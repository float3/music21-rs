use lazy_static::lazy_static;
use std::collections::HashMap;
#[derive(Debug, Clone)]
struct ChordTableAddress {
    cardinality: u8,
    forte_class: u8,
    inversion: i8,
    pc_original: Option<u8>,
}

impl ChordTableAddress {
    pub fn new(cardinality: u8, forte_class: u8, inversion: i8, pc_original: Option<u8>) -> Self {
        Self {
            cardinality,
            forte_class,
            inversion,
            pc_original,
        }
    }
}

type TNIStructure = (Vec<u8>, Vec<u8>, Vec<u8>, u8);

// BEGIN_GENERATED_CODE
lazy_static! {
    pub(crate) static ref FORTE: Vec<Vec<Option<TNIStructure>>> = vec![
        // Index 0 is unused (Cardinality 0 None)
        vec![],
        // Cardinality 1 monad
        vec![
            None, // Index 0 unused
            Some((vec![0], vec![0, 0, 0, 0, 0, 0], vec![1, 1, 1, 1, 11, 11, 11, 11], 0)),
        ],
        // Cardinality 2 diad
        vec![
            None, // Index 0 unused
            Some((vec![0, 1], vec![1, 0, 0, 0, 0, 0], vec![1, 1, 0, 0, 9, 9, 8, 8], 0)),
            Some((vec![0, 2], vec![0, 1, 0, 0, 0, 0], vec![1, 1, 1, 1, 9, 9, 9, 9], 0)),
            Some((vec![0, 3], vec![0, 0, 1, 0, 0, 0], vec![1, 1, 1, 1, 9, 9, 9, 9], 0)),
            Some((vec![0, 4], vec![0, 0, 0, 1, 0, 0], vec![1, 1, 1, 1, 9, 9, 9, 9], 0)),
            Some((vec![0, 5], vec![0, 0, 0, 0, 1, 0], vec![1, 1, 0, 0, 9, 9, 8, 8], 0)),
            Some((vec![0, 6], vec![0, 0, 0, 0, 0, 1], vec![2, 2, 2, 2, 10, 10, 10, 10], 0)),
        ],
        // Cardinality 3 trichord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2], vec![2, 1, 0, 0, 0, 0], vec![1, 1, 0, 0, 7, 7, 4, 4], 0)),
            Some((vec![0, 1, 3], vec![1, 1, 1, 0, 0, 0], vec![1, 0, 0, 0, 5, 6, 5, 5], 0)),
            Some((vec![0, 1, 4], vec![1, 0, 1, 1, 0, 0], vec![1, 0, 0, 0, 5, 6, 5, 5], 0)),
            Some((vec![0, 1, 5], vec![1, 0, 0, 1, 1, 0], vec![1, 0, 1, 0, 5, 6, 5, 6], 0)),
            Some((vec![0, 1, 6], vec![1, 0, 0, 0, 1, 1], vec![1, 0, 0, 1, 6, 7, 7, 6], 0)),
            Some((vec![0, 2, 4], vec![0, 2, 0, 1, 0, 0], vec![1, 1, 1, 1, 7, 7, 7, 7], 0)),
            Some((vec![0, 2, 5], vec![0, 1, 1, 0, 1, 0], vec![1, 0, 0, 0, 5, 6, 5, 5], 0)),
            Some((vec![0, 2, 6], vec![0, 1, 0, 1, 0, 1], vec![1, 0, 0, 1, 6, 7, 7, 6], 0)),
            Some((vec![0, 2, 7], vec![0, 1, 0, 0, 2, 0], vec![1, 1, 0, 0, 7, 7, 4, 4], 0)),
            Some((vec![0, 3, 6], vec![0, 0, 2, 0, 0, 1], vec![1, 1, 1, 1, 8, 8, 8, 8], 0)),
            Some((vec![0, 3, 7], vec![0, 0, 1, 1, 1, 0], vec![1, 0, 0, 0, 5, 6, 5, 5], 0)),
            Some((vec![0, 4, 8], vec![0, 0, 0, 3, 0, 0], vec![3, 3, 3, 3, 9, 9, 9, 9], 0)),
        ],
        // Cardinality 4 tetrachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3], vec![3, 2, 1, 0, 0, 0], vec![1, 1, 0, 0, 5, 5, 1, 1], 0)),
            Some((vec![0, 1, 2, 4], vec![2, 2, 1, 1, 0, 0], vec![1, 0, 0, 0, 3, 4, 1, 1], 0)),
            Some((vec![0, 1, 3, 4], vec![2, 1, 2, 1, 0, 0], vec![1, 1, 0, 0, 3, 3, 2, 2], 0)),
            Some((vec![0, 1, 2, 5], vec![2, 1, 1, 1, 1, 0], vec![1, 0, 0, 0, 1, 3, 2, 3], 0)),
            Some((vec![0, 1, 2, 6], vec![2, 1, 0, 1, 1, 1], vec![1, 0, 0, 0, 2, 4, 3, 2], 0)),
            Some((vec![0, 1, 2, 7], vec![2, 1, 0, 0, 2, 1], vec![1, 1, 1, 1, 4, 4, 4, 4], 0)),
            Some((vec![0, 1, 4, 5], vec![2, 0, 1, 2, 1, 0], vec![1, 1, 0, 0, 3, 3, 3, 3], 0)),
            Some((vec![0, 1, 5, 6], vec![2, 0, 0, 1, 2, 1], vec![1, 1, 1, 1, 4, 4, 4, 4], 0)),
            Some((vec![0, 1, 6, 7], vec![2, 0, 0, 0, 2, 2], vec![2, 2, 2, 2, 6, 6, 6, 6], 0)),
            Some((vec![0, 2, 3, 5], vec![1, 2, 2, 0, 1, 0], vec![1, 1, 1, 1, 3, 3, 3, 3], 0)),
            Some((vec![0, 1, 3, 5], vec![1, 2, 1, 1, 1, 0], vec![1, 0, 1, 0, 1, 3, 1, 3], 0)),
            Some((vec![0, 2, 3, 6], vec![1, 1, 2, 1, 0, 1], vec![1, 0, 0, 0, 2, 4, 3, 2], 0)),
            Some((vec![0, 1, 3, 6], vec![1, 1, 2, 0, 1, 1], vec![1, 0, 0, 1, 2, 4, 4, 2], 0)),
            Some((vec![0, 2, 3, 7], vec![1, 1, 1, 1, 2, 0], vec![1, 0, 0, 0, 1, 3, 2, 3], 0)),
            Some((vec![0, 1, 4, 6], vec![1, 1, 1, 1, 1, 1], vec![1, 0, 0, 0, 0, 3, 3, 1], 29)),
            Some((vec![0, 1, 5, 7], vec![1, 1, 0, 1, 2, 1], vec![1, 0, 0, 0, 2, 4, 3, 2], 0)),
            Some((vec![0, 3, 4, 7], vec![1, 0, 2, 2, 1, 0], vec![1, 1, 1, 1, 3, 3, 3, 3], 0)),
            Some((vec![0, 1, 4, 7], vec![1, 0, 2, 1, 1, 1], vec![1, 0, 0, 1, 2, 4, 4, 2], 0)),
            Some((vec![0, 1, 4, 8], vec![1, 0, 1, 3, 1, 0], vec![1, 0, 1, 0, 3, 5, 3, 5], 0)),
            Some((vec![0, 1, 5, 8], vec![1, 0, 1, 2, 2, 0], vec![1, 1, 0, 0, 3, 3, 3, 3], 0)),
            Some((vec![0, 2, 4, 6], vec![0, 3, 0, 2, 0, 1], vec![1, 1, 1, 1, 6, 6, 6, 6], 0)),
            Some((vec![0, 2, 4, 7], vec![0, 2, 1, 1, 2, 0], vec![1, 0, 0, 0, 3, 4, 1, 1], 0)),
            Some((vec![0, 2, 5, 7], vec![0, 2, 1, 0, 3, 0], vec![1, 1, 0, 0, 5, 5, 1, 1], 0)),
            Some((vec![0, 2, 4, 8], vec![0, 2, 0, 3, 0, 1], vec![1, 1, 1, 1, 6, 6, 6, 6], 0)),
            Some((vec![0, 2, 6, 8], vec![0, 2, 0, 2, 0, 2], vec![2, 2, 2, 2, 6, 6, 6, 6], 0)),
            Some((vec![0, 3, 5, 8], vec![0, 1, 2, 1, 2, 0], vec![1, 1, 0, 0, 3, 3, 2, 2], 0)),
            Some((vec![0, 2, 5, 8], vec![0, 1, 2, 1, 1, 1], vec![1, 0, 0, 0, 2, 4, 3, 2], 0)),
            Some((vec![0, 3, 6, 9], vec![0, 0, 4, 0, 0, 2], vec![4, 4, 4, 4, 8, 8, 8, 8], 0)),
            Some((vec![0, 1, 3, 7], vec![1, 1, 1, 1, 1, 1], vec![1, 0, 0, 0, 0, 3, 3, 1], 15)),
        ],
        // Cardinality 5 pentachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3, 4], vec![4, 3, 2, 1, 0, 0], vec![1, 1, 0, 0, 3, 3, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5], vec![3, 3, 2, 1, 1, 0], vec![1, 0, 0, 0, 1, 2, 1, 1], 0)),
            Some((vec![0, 1, 2, 4, 5], vec![3, 2, 2, 2, 1, 0], vec![1, 0, 0, 0, 1, 1, 1, 0], 0)),
            Some((vec![0, 1, 2, 3, 6], vec![3, 2, 2, 1, 1, 1], vec![1, 0, 0, 0, 0, 2, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 7], vec![3, 2, 1, 1, 2, 1], vec![1, 0, 0, 0, 0, 1, 1, 1], 0)),
            Some((vec![0, 1, 2, 5, 6], vec![3, 1, 1, 2, 2, 1], vec![1, 0, 0, 0, 0, 1, 1, 1], 0)),
            Some((vec![0, 1, 2, 6, 7], vec![3, 1, 0, 1, 3, 2], vec![1, 0, 0, 1, 2, 3, 3, 2], 0)),
            Some((vec![0, 2, 3, 4, 6], vec![2, 3, 2, 2, 0, 1], vec![1, 1, 0, 0, 2, 2, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 6], vec![2, 3, 1, 2, 1, 1], vec![1, 0, 0, 0, 0, 2, 0, 1], 0)),
            Some((vec![0, 1, 3, 4, 6], vec![2, 2, 3, 1, 1, 1], vec![1, 0, 0, 0, 0, 1, 1, 0], 0)),
            Some((vec![0, 2, 3, 4, 7], vec![2, 2, 2, 2, 2, 0], vec![1, 0, 1, 0, 1, 1, 1, 1], 0)),
            Some((vec![0, 1, 3, 5, 6], vec![2, 2, 2, 1, 2, 1], vec![1, 1, 1, 1, 0, 0, 0, 0], 36)),
            Some((vec![0, 1, 2, 4, 8], vec![2, 2, 1, 3, 1, 1], vec![1, 0, 0, 0, 0, 2, 0, 1], 0)),
            Some((vec![0, 1, 2, 5, 7], vec![2, 2, 1, 1, 3, 1], vec![1, 0, 0, 0, 0, 1, 1, 1], 0)),
            Some((vec![0, 1, 2, 6, 8], vec![2, 2, 0, 2, 2, 2], vec![1, 1, 1, 1, 2, 2, 2, 2], 0)),
            Some((vec![0, 1, 3, 4, 7], vec![2, 1, 3, 2, 1, 1], vec![1, 0, 0, 0, 0, 1, 1, 0], 0)),
            Some((vec![0, 1, 3, 4, 8], vec![2, 1, 2, 3, 2, 0], vec![1, 1, 0, 0, 1, 1, 2, 2], 37)),
            Some((vec![0, 1, 4, 5, 7], vec![2, 1, 2, 2, 2, 1], vec![1, 0, 0, 0, 0, 1, 1, 0], 38)),
            Some((vec![0, 1, 3, 6, 7], vec![2, 1, 2, 1, 2, 2], vec![1, 0, 0, 1, 0, 2, 2, 0], 0)),
            Some((vec![0, 1, 3, 7, 8], vec![2, 1, 1, 2, 3, 1], vec![1, 0, 0, 0, 0, 1, 1, 1], 0)),
            Some((vec![0, 1, 4, 5, 8], vec![2, 0, 2, 4, 2, 0], vec![1, 0, 1, 0, 3, 3, 3, 3], 0)),
            Some((vec![0, 1, 4, 7, 8], vec![2, 0, 2, 3, 2, 1], vec![1, 1, 1, 1, 2, 2, 2, 2], 0)),
            Some((vec![0, 2, 3, 5, 7], vec![1, 3, 2, 1, 3, 0], vec![1, 0, 0, 0, 1, 2, 1, 1], 0)),
            Some((vec![0, 1, 3, 5, 7], vec![1, 3, 1, 2, 2, 1], vec![1, 0, 0, 0, 0, 2, 0, 1], 0)),
            Some((vec![0, 2, 3, 5, 8], vec![1, 2, 3, 1, 2, 1], vec![1, 0, 0, 0, 0, 1, 1, 0], 0)),
            Some((vec![0, 2, 4, 5, 8], vec![1, 2, 2, 3, 1, 1], vec![1, 0, 1, 0, 0, 2, 0, 2], 0)),
            Some((vec![0, 1, 3, 5, 8], vec![1, 2, 2, 2, 3, 0], vec![1, 0, 0, 0, 1, 1, 1, 0], 0)),
            Some((vec![0, 2, 3, 6, 8], vec![1, 2, 2, 2, 1, 2], vec![1, 0, 0, 1, 0, 2, 2, 0], 0)),
            Some((vec![0, 1, 3, 6, 8], vec![1, 2, 2, 1, 3, 1], vec![1, 0, 0, 0, 0, 2, 0, 0], 0)),
            Some((vec![0, 1, 4, 6, 8], vec![1, 2, 1, 3, 2, 1], vec![1, 0, 0, 0, 0, 2, 0, 1], 0)),
            Some((vec![0, 1, 3, 6, 9], vec![1, 1, 4, 1, 1, 2], vec![1, 0, 0, 1, 0, 3, 3, 0], 0)),
            Some((vec![0, 1, 4, 6, 9], vec![1, 1, 3, 2, 2, 1], vec![1, 0, 0, 0, 0, 1, 1, 0], 0)),
            Some((vec![0, 2, 4, 6, 8], vec![0, 4, 0, 4, 0, 2], vec![1, 1, 1, 1, 6, 6, 6, 6], 0)),
            Some((vec![0, 2, 4, 6, 9], vec![0, 3, 2, 2, 2, 1], vec![1, 1, 0, 0, 2, 2, 0, 0], 0)),
            Some((vec![0, 2, 4, 7, 9], vec![0, 3, 2, 1, 4, 0], vec![1, 1, 0, 0, 3, 3, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 7], vec![2, 2, 2, 1, 2, 1], vec![1, 0, 0, 1, 0, 1, 1, 0], 12)),
            Some((vec![0, 3, 4, 5, 8], vec![2, 1, 2, 3, 2, 0], vec![1, 1, 0, 0, 1, 1, 2, 2], 17)),
            Some((vec![0, 1, 2, 5, 8], vec![2, 1, 2, 2, 2, 1], vec![1, 0, 0, 0, 0, 1, 1, 0], 18)),
        ],
        // Cardinality 6 hexachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3, 4, 5], vec![5, 4, 3, 2, 1, 0], vec![1, 1, 0, 0, 1, 1, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6], vec![4, 4, 3, 2, 1, 1], vec![1, 0, 0, 0, 0, 1, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6], vec![4, 3, 3, 2, 2, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 36)),
            Some((vec![0, 1, 2, 4, 5, 6], vec![4, 3, 2, 3, 2, 1], vec![1, 1, 0, 0, 0, 0, 0, 0], 37)),
            Some((vec![0, 1, 2, 3, 6, 7], vec![4, 2, 2, 2, 3, 2], vec![1, 0, 0, 0, 0, 1, 0, 0], 0)),
            Some((vec![0, 1, 2, 5, 6, 7], vec![4, 2, 1, 2, 4, 2], vec![1, 1, 0, 0, 0, 0, 1, 1], 38)),
            Some((vec![0, 1, 2, 6, 7, 8], vec![4, 2, 0, 2, 4, 3], vec![2, 2, 2, 2, 2, 2, 2, 2], 0)),
            Some((vec![0, 2, 3, 4, 5, 7], vec![3, 4, 3, 2, 3, 0], vec![1, 1, 1, 1, 1, 1, 1, 1], 0)),
            Some((vec![0, 1, 2, 3, 5, 7], vec![3, 4, 2, 2, 3, 1], vec![1, 0, 1, 0, 0, 1, 0, 1], 0)),
            Some((vec![0, 1, 3, 4, 5, 7], vec![3, 3, 3, 3, 2, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 39)),
            Some((vec![0, 1, 2, 4, 5, 7], vec![3, 3, 3, 2, 3, 1], vec![1, 0, 0, 0, 0, 0, 1, 0], 40)),
            Some((vec![0, 1, 2, 4, 6, 7], vec![3, 3, 2, 2, 3, 2], vec![1, 0, 0, 1, 0, 0, 0, 0], 41)),
            Some((vec![0, 1, 3, 4, 6, 7], vec![3, 2, 4, 2, 2, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 42)),
            Some((vec![0, 1, 3, 4, 5, 8], vec![3, 2, 3, 4, 3, 0], vec![1, 0, 1, 0, 1, 0, 1, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 8], vec![3, 2, 3, 4, 2, 1], vec![1, 0, 0, 0, 0, 1, 0, 0], 0)),
            Some((vec![0, 1, 4, 5, 6, 8], vec![3, 2, 2, 4, 3, 1], vec![1, 0, 1, 0, 0, 1, 0, 1], 0)),
            Some((vec![0, 1, 2, 4, 7, 8], vec![3, 2, 2, 3, 3, 2], vec![1, 0, 0, 1, 0, 0, 0, 0], 43)),
            Some((vec![0, 1, 2, 5, 7, 8], vec![3, 2, 2, 2, 4, 2], vec![1, 0, 0, 0, 0, 1, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 7, 8], vec![3, 1, 3, 4, 3, 1], vec![1, 0, 0, 0, 0, 0, 1, 0], 44)),
            Some((vec![0, 1, 4, 5, 8, 9], vec![3, 0, 3, 6, 3, 0], vec![3, 3, 3, 3, 3, 3, 3, 3], 0)),
            Some((vec![0, 2, 3, 4, 6, 8], vec![2, 4, 2, 4, 1, 2], vec![1, 0, 0, 0, 0, 1, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 6, 8], vec![2, 4, 1, 4, 2, 2], vec![1, 0, 1, 0, 0, 1, 0, 1], 0)),
            Some((vec![0, 2, 3, 5, 6, 8], vec![2, 3, 4, 2, 2, 2], vec![1, 1, 1, 1, 0, 0, 0, 0], 45)),
            Some((vec![0, 1, 3, 4, 6, 8], vec![2, 3, 3, 3, 3, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 46)),
            Some((vec![0, 1, 3, 5, 6, 8], vec![2, 3, 3, 2, 4, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 47)),
            Some((vec![0, 1, 3, 5, 7, 8], vec![2, 3, 2, 3, 4, 1], vec![1, 1, 0, 0, 0, 0, 0, 0], 48)),
            Some((vec![0, 1, 3, 4, 6, 9], vec![2, 2, 5, 2, 2, 2], vec![1, 0, 0, 1, 0, 1, 1, 0], 0)),
            Some((vec![0, 1, 3, 5, 6, 9], vec![2, 2, 4, 3, 2, 2], vec![1, 1, 1, 1, 0, 0, 0, 0], 49)),
            Some((vec![0, 1, 3, 6, 8, 9], vec![2, 2, 4, 2, 3, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 50)),
            Some((vec![0, 1, 3, 6, 7, 9], vec![2, 2, 4, 2, 2, 3], vec![2, 0, 0, 2, 0, 2, 2, 0], 0)),
            Some((vec![0, 1, 3, 5, 8, 9], vec![2, 2, 3, 4, 3, 1], vec![1, 0, 0, 0, 0, 1, 0, 0], 0)),
            Some((vec![0, 2, 4, 5, 7, 9], vec![1, 4, 3, 2, 5, 0], vec![1, 1, 0, 0, 1, 1, 0, 0], 0)),
            Some((vec![0, 2, 3, 5, 7, 9], vec![1, 4, 3, 2, 4, 1], vec![1, 0, 0, 0, 0, 1, 0, 0], 0)),
            Some((vec![0, 1, 3, 5, 7, 9], vec![1, 4, 2, 4, 2, 2], vec![1, 0, 0, 0, 0, 1, 0, 0], 0)),
            Some((vec![0, 2, 4, 6, 8, 10], vec![0, 6, 0, 6, 0, 3], vec![6, 6, 6, 6, 6, 6, 6, 6], 0)),
            Some((vec![0, 1, 2, 3, 4, 7], vec![4, 3, 3, 2, 2, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 3)),
            Some((vec![0, 1, 2, 3, 4, 8], vec![4, 3, 2, 3, 2, 1], vec![1, 1, 0, 0, 0, 0, 0, 0], 4)),
            Some((vec![0, 1, 2, 3, 7, 8], vec![4, 2, 1, 2, 4, 2], vec![1, 1, 0, 0, 0, 0, 1, 1], 6)),
            Some((vec![0, 2, 3, 4, 5, 8], vec![3, 3, 3, 3, 2, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 10)),
            Some((vec![0, 1, 2, 3, 5, 8], vec![3, 3, 3, 2, 3, 1], vec![1, 0, 0, 0, 0, 0, 1, 0], 11)),
            Some((vec![0, 1, 2, 3, 6, 8], vec![3, 3, 2, 2, 3, 2], vec![1, 0, 0, 1, 0, 0, 0, 0], 12)),
            Some((vec![0, 1, 2, 3, 6, 9], vec![3, 2, 4, 2, 2, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 13)),
            Some((vec![0, 1, 2, 5, 6, 8], vec![3, 2, 2, 3, 3, 2], vec![1, 0, 0, 1, 0, 0, 0, 0], 17)),
            Some((vec![0, 1, 2, 5, 6, 9], vec![3, 1, 3, 4, 3, 1], vec![1, 0, 0, 0, 0, 0, 1, 0], 19)),
            Some((vec![0, 2, 3, 4, 6, 9], vec![2, 3, 4, 2, 2, 2], vec![1, 1, 1, 1, 0, 0, 0, 0], 23)),
            Some((vec![0, 1, 2, 4, 6, 9], vec![2, 3, 3, 3, 3, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 24)),
            Some((vec![0, 1, 2, 4, 7, 9], vec![2, 3, 3, 2, 4, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 25)),
            Some((vec![0, 1, 2, 5, 7, 9], vec![2, 3, 2, 3, 4, 1], vec![1, 1, 0, 0, 0, 0, 0, 0], 26)),
            Some((vec![0, 1, 3, 4, 7, 9], vec![2, 2, 4, 3, 2, 2], vec![1, 1, 1, 1, 0, 0, 0, 0], 28)),
            Some((vec![0, 1, 4, 6, 7, 9], vec![2, 2, 4, 2, 3, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 29)),
        ],
        // Cardinality 7 septachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3, 4, 5, 6], vec![6, 5, 4, 3, 2, 1], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 7], vec![5, 5, 4, 3, 3, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 8], vec![5, 4, 4, 4, 3, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 7], vec![5, 4, 4, 3, 3, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 7], vec![5, 4, 3, 3, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 7, 8], vec![5, 3, 3, 4, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 6, 7, 8], vec![5, 3, 2, 3, 5, 3], vec![1, 0, 0, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 2, 3, 4, 5, 6, 8], vec![4, 5, 4, 4, 2, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 8], vec![4, 5, 3, 4, 3, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 9], vec![4, 4, 5, 3, 3, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 5, 6, 8], vec![4, 4, 4, 4, 4, 1], vec![1, 0, 1, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 7, 9], vec![4, 4, 4, 3, 4, 2], vec![1, 1, 1, 1, 0, 0, 0, 0], 36)),
            Some((vec![0, 1, 2, 4, 5, 6, 8], vec![4, 4, 3, 5, 3, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 7, 8], vec![4, 4, 3, 3, 5, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 6, 7, 8], vec![4, 4, 2, 4, 4, 3], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 9], vec![4, 3, 5, 4, 3, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 6, 9], vec![4, 3, 4, 5, 4, 1], vec![1, 1, 0, 0, 0, 0, 0, 0], 37)),
            Some((vec![0, 1, 2, 3, 5, 8, 9], vec![4, 3, 4, 4, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 38)),
            Some((vec![0, 1, 2, 3, 6, 7, 9], vec![4, 3, 4, 3, 4, 3], vec![1, 0, 0, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 7, 8, 9], vec![4, 3, 3, 4, 5, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 8, 9], vec![4, 2, 4, 6, 4, 1], vec![1, 0, 1, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 5, 6, 8, 9], vec![4, 2, 4, 5, 4, 2], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 2, 3, 4, 5, 7, 9], vec![3, 5, 4, 3, 5, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 7, 9], vec![3, 5, 3, 4, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 2, 3, 4, 6, 7, 9], vec![3, 4, 5, 3, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 5, 7, 9], vec![3, 4, 4, 5, 3, 2], vec![1, 0, 1, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 7, 9], vec![3, 4, 4, 4, 5, 1], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 5, 6, 7, 9], vec![3, 4, 4, 4, 3, 3], vec![1, 0, 0, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 6, 7, 9], vec![3, 4, 4, 3, 5, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 6, 8, 9], vec![3, 4, 3, 5, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 6, 7, 9], vec![3, 3, 6, 3, 3, 3], vec![1, 0, 0, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 6, 8, 9], vec![3, 3, 5, 4, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 6, 8, 10], vec![2, 6, 2, 6, 2, 3], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 6, 8, 10], vec![2, 5, 4, 4, 4, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 5, 6, 8, 10], vec![2, 5, 4, 3, 6, 1], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 8], vec![4, 4, 4, 3, 4, 2], vec![1, 0, 0, 1, 0, 0, 0, 0], 12)),
            Some((vec![0, 1, 3, 4, 5, 7, 8], vec![4, 3, 4, 5, 4, 1], vec![1, 1, 0, 0, 0, 0, 0, 0], 17)),
            Some((vec![0, 1, 2, 4, 5, 7, 8], vec![4, 3, 4, 4, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 18)),
        ],
        // Cardinality 8 octachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3, 4, 5, 6, 7], vec![7, 6, 5, 4, 4, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 6, 8], vec![6, 6, 5, 5, 4, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 6, 9], vec![6, 5, 6, 5, 4, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 7, 8], vec![6, 5, 5, 5, 5, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 7, 8], vec![6, 5, 4, 5, 5, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 7, 8], vec![6, 5, 4, 4, 6, 3], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 8, 9], vec![6, 4, 5, 6, 5, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 7, 8, 9], vec![6, 4, 4, 5, 6, 3], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 6, 7, 8, 9], vec![6, 4, 4, 4, 6, 4], vec![2, 2, 2, 2, 0, 0, 0, 0], 0)),
            Some((vec![0, 2, 3, 4, 5, 6, 7, 9], vec![5, 6, 6, 4, 5, 2], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 7, 9], vec![5, 6, 5, 5, 5, 2], vec![1, 0, 1, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 5, 6, 7, 9], vec![5, 5, 6, 5, 4, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 7, 9], vec![5, 5, 6, 4, 5, 3], vec![1, 0, 0, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 6, 7, 9], vec![5, 5, 5, 5, 6, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 8, 9], vec![5, 5, 5, 5, 5, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 29)),
            Some((vec![0, 1, 2, 3, 5, 7, 8, 9], vec![5, 5, 4, 5, 6, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 5, 6, 8, 9], vec![5, 4, 6, 6, 5, 2], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 8, 9], vec![5, 4, 6, 5, 5, 3], vec![1, 0, 0, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 6, 8, 9], vec![5, 4, 5, 7, 5, 2], vec![1, 0, 1, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 7, 8, 9], vec![5, 4, 5, 6, 6, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 8, 10], vec![4, 7, 4, 6, 4, 3], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 8, 10], vec![4, 6, 5, 5, 6, 2], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 7, 8, 10], vec![4, 6, 5, 4, 7, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 6, 8, 10], vec![4, 6, 4, 7, 4, 3], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 6, 7, 8, 10], vec![4, 6, 4, 6, 4, 4], vec![2, 2, 2, 2, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 7, 9, 10], vec![4, 5, 6, 5, 6, 2], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 7, 8, 10], vec![4, 5, 6, 5, 5, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 3, 4, 6, 7, 9, 10], vec![4, 4, 8, 4, 4, 4], vec![4, 4, 4, 4, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 7, 9], vec![5, 5, 5, 5, 5, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 15)),
        ],
        // Cardinality 9 nonachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3, 4, 5, 6, 7, 8], vec![8, 7, 6, 6, 6, 3], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 6, 7, 9], vec![7, 7, 7, 6, 6, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 6, 8, 9], vec![7, 6, 7, 7, 6, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 7, 8, 9], vec![7, 6, 6, 7, 7, 3], vec![1, 0, 1, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 7, 8, 9], vec![7, 6, 6, 6, 7, 4], vec![1, 0, 0, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 6, 8, 10], vec![6, 8, 6, 7, 6, 3], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 7, 8, 10], vec![6, 7, 7, 6, 7, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 7, 8, 10], vec![6, 7, 6, 7, 6, 4], vec![1, 0, 0, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 7, 8, 10], vec![6, 7, 6, 6, 8, 3], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 7, 9, 10], vec![6, 6, 8, 6, 6, 4], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 5, 6, 7, 9, 10], vec![6, 6, 7, 7, 7, 3], vec![1, 0, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 4, 5, 6, 8, 9, 10], vec![6, 6, 6, 9, 6, 3], vec![3, 3, 3, 3, 0, 0, 0, 0], 0)),
        ],
        // Cardinality 10 decachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9], vec![9, 8, 8, 8, 8, 4], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 10], vec![8, 9, 8, 8, 8, 4], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 6, 7, 9, 10], vec![8, 8, 9, 8, 8, 4], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 6, 8, 9, 10], vec![8, 8, 8, 9, 8, 4], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 5, 7, 8, 9, 10], vec![8, 8, 8, 8, 9, 4], vec![1, 1, 0, 0, 0, 0, 0, 0], 0)),
            Some((vec![0, 1, 2, 3, 4, 6, 7, 8, 9, 10], vec![8, 8, 8, 8, 8, 5], vec![2, 2, 2, 2, 0, 0, 0, 0], 0)),
        ],
        // Cardinality 11 undecachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![10, 10, 10, 10, 10, 5], vec![1, 1, 1, 1, 0, 0, 0, 0], 0)),
        ],
        // Cardinality 12 duodecachord
        vec![
            None, // Index 0 unused
            Some((vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], vec![12, 12, 12, 12, 12, 6], vec![12, 12, 12, 12, 0, 0, 0, 0], 0)),
        ],
    ];

    pub(crate) static ref INVERSION_DEFAULT_PITCH_CLASSES: HashMap<(u8, u8), Vec<u8>> = {        let mut m = HashMap::new();
        m.insert((3, 2), vec![0, 2, 3]);
        m.insert((3, 3), vec![0, 3, 4]);
        m.insert((3, 4), vec![0, 4, 5]);
        m.insert((3, 5), vec![0, 5, 6]);
        m.insert((3, 7), vec![0, 3, 5]);
        m.insert((3, 8), vec![0, 4, 6]);
        m.insert((3, 11), vec![0, 4, 7]);
        m.insert((4, 2), vec![0, 2, 3, 4]);
        m.insert((4, 4), vec![0, 3, 4, 5]);
        m.insert((4, 5), vec![0, 4, 5, 6]);
        m.insert((4, 11), vec![0, 2, 4, 5]);
        m.insert((4, 12), vec![0, 3, 4, 6]);
        m.insert((4, 13), vec![0, 3, 5, 6]);
        m.insert((4, 14), vec![0, 4, 5, 7]);
        m.insert((4, 15), vec![0, 2, 5, 6]);
        m.insert((4, 16), vec![0, 2, 6, 7]);
        m.insert((4, 18), vec![0, 3, 6, 7]);
        m.insert((4, 19), vec![0, 3, 4, 8]);
        m.insert((4, 22), vec![0, 3, 5, 7]);
        m.insert((4, 27), vec![0, 3, 6, 8]);
        m.insert((4, 29), vec![0, 4, 6, 7]);
        m.insert((5, 2), vec![0, 2, 3, 4, 5]);
        m.insert((5, 3), vec![0, 1, 3, 4, 5]);
        m.insert((5, 4), vec![0, 3, 4, 5, 6]);
        m.insert((5, 5), vec![0, 4, 5, 6, 7]);
        m.insert((5, 6), vec![0, 1, 4, 5, 6]);
        m.insert((5, 7), vec![0, 1, 5, 6, 7]);
        m.insert((5, 9), vec![0, 2, 4, 5, 6]);
        m.insert((5, 10), vec![0, 2, 3, 5, 6]);
        m.insert((5, 11), vec![0, 3, 4, 5, 7]);
        m.insert((5, 13), vec![0, 2, 3, 4, 8]);
        m.insert((5, 14), vec![0, 2, 5, 6, 7]);
        m.insert((5, 16), vec![0, 3, 4, 6, 7]);
        m.insert((5, 18), vec![0, 2, 3, 6, 7]);
        m.insert((5, 19), vec![0, 1, 4, 6, 7]);
        m.insert((5, 20), vec![0, 1, 5, 7, 8]);
        m.insert((5, 21), vec![0, 3, 4, 7, 8]);
        m.insert((5, 23), vec![0, 2, 4, 5, 7]);
        m.insert((5, 24), vec![0, 2, 4, 6, 7]);
        m.insert((5, 25), vec![0, 3, 5, 6, 8]);
        m.insert((5, 26), vec![0, 3, 4, 6, 8]);
        m.insert((5, 27), vec![0, 3, 5, 7, 8]);
        m.insert((5, 28), vec![0, 2, 5, 6, 8]);
        m.insert((5, 29), vec![0, 2, 5, 7, 8]);
        m.insert((5, 30), vec![0, 2, 4, 7, 8]);
        m.insert((5, 31), vec![0, 2, 3, 6, 9]);
        m.insert((5, 32), vec![0, 1, 4, 7, 9]);
        m.insert((5, 36), vec![0, 3, 5, 6, 7]);
        m.insert((5, 38), vec![0, 3, 6, 7, 8]);
        m.insert((6, 2), vec![0, 2, 3, 4, 5, 6]);
        m.insert((6, 3), vec![0, 1, 3, 4, 5, 6]);
        m.insert((6, 5), vec![0, 1, 4, 5, 6, 7]);
        m.insert((6, 9), vec![0, 2, 4, 5, 6, 7]);
        m.insert((6, 10), vec![0, 2, 3, 4, 6, 7]);
        m.insert((6, 11), vec![0, 2, 3, 5, 6, 7]);
        m.insert((6, 12), vec![0, 1, 3, 5, 6, 7]);
        m.insert((6, 14), vec![0, 3, 4, 5, 7, 8]);
        m.insert((6, 15), vec![0, 3, 4, 6, 7, 8]);
        m.insert((6, 16), vec![0, 2, 3, 4, 7, 8]);
        m.insert((6, 17), vec![0, 1, 4, 6, 7, 8]);
        m.insert((6, 18), vec![0, 1, 3, 6, 7, 8]);
        m.insert((6, 19), vec![0, 1, 4, 5, 7, 8]);
        m.insert((6, 21), vec![0, 2, 4, 5, 6, 8]);
        m.insert((6, 22), vec![0, 2, 4, 6, 7, 8]);
        m.insert((6, 24), vec![0, 2, 4, 5, 7, 8]);
        m.insert((6, 25), vec![0, 2, 3, 5, 7, 8]);
        m.insert((6, 27), vec![0, 2, 3, 5, 6, 9]);
        m.insert((6, 30), vec![0, 2, 3, 6, 8, 9]);
        m.insert((6, 31), vec![0, 1, 4, 6, 8, 9]);
        m.insert((6, 33), vec![0, 2, 4, 6, 7, 9]);
        m.insert((6, 34), vec![0, 2, 4, 6, 8, 9]);
        m.insert((6, 36), vec![0, 3, 4, 5, 6, 7]);
        m.insert((6, 39), vec![0, 3, 4, 5, 6, 8]);
        m.insert((6, 40), vec![0, 3, 5, 6, 7, 8]);
        m.insert((6, 41), vec![0, 2, 5, 6, 7, 8]);
        m.insert((6, 43), vec![0, 2, 3, 6, 7, 8]);
        m.insert((6, 44), vec![0, 1, 2, 5, 8, 9]);
        m.insert((6, 46), vec![0, 2, 4, 5, 6, 9]);
        m.insert((6, 47), vec![0, 2, 3, 4, 7, 9]);
        m.insert((7, 2), vec![0, 2, 3, 4, 5, 6, 7]);
        m.insert((7, 3), vec![0, 3, 4, 5, 6, 7, 8]);
        m.insert((7, 4), vec![0, 1, 3, 4, 5, 6, 7]);
        m.insert((7, 5), vec![0, 1, 2, 4, 5, 6, 7]);
        m.insert((7, 6), vec![0, 1, 4, 5, 6, 7, 8]);
        m.insert((7, 7), vec![0, 1, 2, 5, 6, 7, 8]);
        m.insert((7, 9), vec![0, 2, 4, 5, 6, 7, 8]);
        m.insert((7, 10), vec![0, 2, 3, 4, 5, 6, 9]);
        m.insert((7, 11), vec![0, 2, 3, 4, 5, 7, 8]);
        m.insert((7, 13), vec![0, 2, 3, 4, 6, 7, 8]);
        m.insert((7, 14), vec![0, 1, 3, 5, 6, 7, 8]);
        m.insert((7, 16), vec![0, 1, 3, 4, 5, 6, 9]);
        m.insert((7, 18), vec![0, 1, 4, 6, 7, 8, 9]);
        m.insert((7, 19), vec![0, 1, 2, 3, 6, 8, 9]);
        m.insert((7, 20), vec![0, 1, 2, 5, 7, 8, 9]);
        m.insert((7, 21), vec![0, 1, 3, 4, 5, 8, 9]);
        m.insert((7, 23), vec![0, 2, 4, 5, 6, 7, 9]);
        m.insert((7, 24), vec![0, 2, 4, 6, 7, 8, 9]);
        m.insert((7, 25), vec![0, 2, 3, 5, 6, 7, 9]);
        m.insert((7, 26), vec![0, 2, 4, 5, 6, 8, 9]);
        m.insert((7, 27), vec![0, 2, 4, 5, 7, 8, 9]);
        m.insert((7, 28), vec![0, 2, 3, 4, 6, 8, 9]);
        m.insert((7, 29), vec![0, 2, 3, 5, 7, 8, 9]);
        m.insert((7, 30), vec![0, 1, 3, 5, 7, 8, 9]);
        m.insert((7, 31), vec![0, 2, 3, 5, 6, 8, 9]);
        m.insert((7, 32), vec![0, 1, 3, 5, 6, 8, 9]);
        m.insert((7, 36), vec![0, 2, 3, 5, 6, 7, 8]);
        m.insert((7, 38), vec![0, 1, 3, 4, 6, 7, 8]);
        m.insert((8, 2), vec![0, 2, 3, 4, 5, 6, 7, 8]);
        m.insert((8, 4), vec![0, 1, 3, 4, 5, 6, 7, 8]);
        m.insert((8, 5), vec![0, 1, 2, 4, 5, 6, 7, 8]);
        m.insert((8, 11), vec![0, 2, 4, 5, 6, 7, 8, 9]);
        m.insert((8, 12), vec![0, 2, 3, 4, 5, 6, 8, 9]);
        m.insert((8, 13), vec![0, 2, 3, 5, 6, 7, 8, 9]);
        m.insert((8, 14), vec![0, 2, 3, 4, 5, 7, 8, 9]);
        m.insert((8, 15), vec![0, 1, 3, 5, 6, 7, 8, 9]);
        m.insert((8, 16), vec![0, 1, 2, 4, 6, 7, 8, 9]);
        m.insert((8, 18), vec![0, 1, 3, 4, 6, 7, 8, 9]);
        m.insert((8, 19), vec![0, 1, 3, 4, 5, 7, 8, 9]);
        m.insert((8, 22), vec![0, 1, 2, 3, 5, 7, 9, 10]);
        m.insert((8, 27), vec![0, 1, 2, 4, 6, 7, 9, 10]);
        m.insert((8, 29), vec![0, 2, 3, 4, 6, 7, 8, 9]);
        m.insert((9, 2), vec![0, 2, 3, 4, 5, 6, 7, 8, 9]);
        m.insert((9, 3), vec![0, 1, 3, 4, 5, 6, 7, 8, 9]);
        m.insert((9, 4), vec![0, 1, 2, 4, 5, 6, 7, 8, 9]);
        m.insert((9, 5), vec![0, 1, 2, 3, 5, 6, 7, 8, 9]);
        m.insert((9, 7), vec![0, 1, 2, 3, 4, 5, 7, 9, 10]);
        m.insert((9, 8), vec![0, 1, 2, 3, 4, 6, 8, 9, 10]);
        m.insert((9, 11), vec![0, 1, 2, 3, 5, 6, 8, 9, 10]);
        m
    };

    pub(crate) static ref CARDINALITY_TO_CHORD_MEMBERS: HashMap<u8, HashMap<(u8, i8), (Vec<u8>, Vec<u8>, Vec<u8>)>> = {
        let mut outer = HashMap::new();
        // Cardinality 0 None
        let inner_0 = HashMap::new();
        outer.insert(0, inner_0);
        // Cardinality 1 monad
        let mut inner_1 = HashMap::new();
        inner_1.insert((1, 0), (vec![0], vec![1, 1, 1, 1, 11, 11, 11, 11], vec![0, 0, 0, 0, 0, 0]));
        outer.insert(1, inner_1);
        // Cardinality 2 diad
        let mut inner_2 = HashMap::new();
        inner_2.insert((1, 0), (vec![0, 1], vec![1, 1, 0, 0, 9, 9, 8, 8], vec![1, 0, 0, 0, 0, 0]));
        inner_2.insert((2, 0), (vec![0, 2], vec![1, 1, 1, 1, 9, 9, 9, 9], vec![0, 1, 0, 0, 0, 0]));
        inner_2.insert((3, 0), (vec![0, 3], vec![1, 1, 1, 1, 9, 9, 9, 9], vec![0, 0, 1, 0, 0, 0]));
        inner_2.insert((4, 0), (vec![0, 4], vec![1, 1, 1, 1, 9, 9, 9, 9], vec![0, 0, 0, 1, 0, 0]));
        inner_2.insert((5, 0), (vec![0, 5], vec![1, 1, 0, 0, 9, 9, 8, 8], vec![0, 0, 0, 0, 1, 0]));
        inner_2.insert((6, 0), (vec![0, 6], vec![2, 2, 2, 2, 10, 10, 10, 10], vec![0, 0, 0, 0, 0, 1]));
        outer.insert(2, inner_2);
        // Cardinality 3 trichord
        let mut inner_3 = HashMap::new();
        inner_3.insert((1, 0), (vec![0, 1, 2], vec![1, 1, 0, 0, 7, 7, 4, 4], vec![2, 1, 0, 0, 0, 0]));
        inner_3.insert((2, 1), (vec![0, 1, 3], vec![1, 0, 0, 0, 5, 6, 5, 5], vec![1, 1, 1, 0, 0, 0]));
        inner_3.insert((2, -1), (vec![0, 2, 3], vec![1, 0, 0, 0, 5, 6, 5, 5], vec![1, 1, 1, 0, 0, 0]));
        inner_3.insert((3, 1), (vec![0, 1, 4], vec![1, 0, 0, 0, 5, 6, 5, 5], vec![1, 0, 1, 1, 0, 0]));
        inner_3.insert((3, -1), (vec![0, 3, 4], vec![1, 0, 0, 0, 5, 6, 5, 5], vec![1, 0, 1, 1, 0, 0]));
        inner_3.insert((4, 1), (vec![0, 1, 5], vec![1, 0, 1, 0, 5, 6, 5, 6], vec![1, 0, 0, 1, 1, 0]));
        inner_3.insert((4, -1), (vec![0, 4, 5], vec![1, 0, 1, 0, 5, 6, 5, 6], vec![1, 0, 0, 1, 1, 0]));
        inner_3.insert((5, 1), (vec![0, 1, 6], vec![1, 0, 0, 1, 6, 7, 7, 6], vec![1, 0, 0, 0, 1, 1]));
        inner_3.insert((5, -1), (vec![0, 5, 6], vec![1, 0, 0, 1, 6, 7, 7, 6], vec![1, 0, 0, 0, 1, 1]));
        inner_3.insert((6, 0), (vec![0, 2, 4], vec![1, 1, 1, 1, 7, 7, 7, 7], vec![0, 2, 0, 1, 0, 0]));
        inner_3.insert((7, 1), (vec![0, 2, 5], vec![1, 0, 0, 0, 5, 6, 5, 5], vec![0, 1, 1, 0, 1, 0]));
        inner_3.insert((7, -1), (vec![0, 3, 5], vec![1, 0, 0, 0, 5, 6, 5, 5], vec![0, 1, 1, 0, 1, 0]));
        inner_3.insert((8, 1), (vec![0, 2, 6], vec![1, 0, 0, 1, 6, 7, 7, 6], vec![0, 1, 0, 1, 0, 1]));
        inner_3.insert((8, -1), (vec![0, 4, 6], vec![1, 0, 0, 1, 6, 7, 7, 6], vec![0, 1, 0, 1, 0, 1]));
        inner_3.insert((9, 0), (vec![0, 2, 7], vec![1, 1, 0, 0, 7, 7, 4, 4], vec![0, 1, 0, 0, 2, 0]));
        inner_3.insert((10, 0), (vec![0, 3, 6], vec![1, 1, 1, 1, 8, 8, 8, 8], vec![0, 0, 2, 0, 0, 1]));
        inner_3.insert((11, 1), (vec![0, 3, 7], vec![1, 0, 0, 0, 5, 6, 5, 5], vec![0, 0, 1, 1, 1, 0]));
        inner_3.insert((11, -1), (vec![0, 4, 7], vec![1, 0, 0, 0, 5, 6, 5, 5], vec![0, 0, 1, 1, 1, 0]));
        inner_3.insert((12, 0), (vec![0, 4, 8], vec![3, 3, 3, 3, 9, 9, 9, 9], vec![0, 0, 0, 3, 0, 0]));
        outer.insert(3, inner_3);
        // Cardinality 4 tetrachord
        let mut inner_4 = HashMap::new();
        inner_4.insert((1, 0), (vec![0, 1, 2, 3], vec![1, 1, 0, 0, 5, 5, 1, 1], vec![3, 2, 1, 0, 0, 0]));
        inner_4.insert((2, 1), (vec![0, 1, 2, 4], vec![1, 0, 0, 0, 3, 4, 1, 1], vec![2, 2, 1, 1, 0, 0]));
        inner_4.insert((2, -1), (vec![0, 2, 3, 4], vec![1, 0, 0, 0, 3, 4, 1, 1], vec![2, 2, 1, 1, 0, 0]));
        inner_4.insert((3, 0), (vec![0, 1, 3, 4], vec![1, 1, 0, 0, 3, 3, 2, 2], vec![2, 1, 2, 1, 0, 0]));
        inner_4.insert((4, 1), (vec![0, 1, 2, 5], vec![1, 0, 0, 0, 1, 3, 2, 3], vec![2, 1, 1, 1, 1, 0]));
        inner_4.insert((4, -1), (vec![0, 3, 4, 5], vec![1, 0, 0, 0, 1, 3, 2, 3], vec![2, 1, 1, 1, 1, 0]));
        inner_4.insert((5, 1), (vec![0, 1, 2, 6], vec![1, 0, 0, 0, 2, 4, 3, 2], vec![2, 1, 0, 1, 1, 1]));
        inner_4.insert((5, -1), (vec![0, 4, 5, 6], vec![1, 0, 0, 0, 2, 4, 3, 2], vec![2, 1, 0, 1, 1, 1]));
        inner_4.insert((6, 0), (vec![0, 1, 2, 7], vec![1, 1, 1, 1, 4, 4, 4, 4], vec![2, 1, 0, 0, 2, 1]));
        inner_4.insert((7, 0), (vec![0, 1, 4, 5], vec![1, 1, 0, 0, 3, 3, 3, 3], vec![2, 0, 1, 2, 1, 0]));
        inner_4.insert((8, 0), (vec![0, 1, 5, 6], vec![1, 1, 1, 1, 4, 4, 4, 4], vec![2, 0, 0, 1, 2, 1]));
        inner_4.insert((9, 0), (vec![0, 1, 6, 7], vec![2, 2, 2, 2, 6, 6, 6, 6], vec![2, 0, 0, 0, 2, 2]));
        inner_4.insert((10, 0), (vec![0, 2, 3, 5], vec![1, 1, 1, 1, 3, 3, 3, 3], vec![1, 2, 2, 0, 1, 0]));
        inner_4.insert((11, 1), (vec![0, 1, 3, 5], vec![1, 0, 1, 0, 1, 3, 1, 3], vec![1, 2, 1, 1, 1, 0]));
        inner_4.insert((11, -1), (vec![0, 2, 4, 5], vec![1, 0, 1, 0, 1, 3, 1, 3], vec![1, 2, 1, 1, 1, 0]));
        inner_4.insert((12, 1), (vec![0, 2, 3, 6], vec![1, 0, 0, 0, 2, 4, 3, 2], vec![1, 1, 2, 1, 0, 1]));
        inner_4.insert((12, -1), (vec![0, 3, 4, 6], vec![1, 0, 0, 0, 2, 4, 3, 2], vec![1, 1, 2, 1, 0, 1]));
        inner_4.insert((13, 1), (vec![0, 1, 3, 6], vec![1, 0, 0, 1, 2, 4, 4, 2], vec![1, 1, 2, 0, 1, 1]));
        inner_4.insert((13, -1), (vec![0, 3, 5, 6], vec![1, 0, 0, 1, 2, 4, 4, 2], vec![1, 1, 2, 0, 1, 1]));
        inner_4.insert((14, 1), (vec![0, 2, 3, 7], vec![1, 0, 0, 0, 1, 3, 2, 3], vec![1, 1, 1, 1, 2, 0]));
        inner_4.insert((14, -1), (vec![0, 4, 5, 7], vec![1, 0, 0, 0, 1, 3, 2, 3], vec![1, 1, 1, 1, 2, 0]));
        inner_4.insert((15, 1), (vec![0, 1, 4, 6], vec![1, 0, 0, 0, 0, 3, 3, 1], vec![1, 1, 1, 1, 1, 1]));
        inner_4.insert((15, -1), (vec![0, 2, 5, 6], vec![1, 0, 0, 0, 0, 3, 3, 1], vec![1, 1, 1, 1, 1, 1]));
        inner_4.insert((16, 1), (vec![0, 1, 5, 7], vec![1, 0, 0, 0, 2, 4, 3, 2], vec![1, 1, 0, 1, 2, 1]));
        inner_4.insert((16, -1), (vec![0, 2, 6, 7], vec![1, 0, 0, 0, 2, 4, 3, 2], vec![1, 1, 0, 1, 2, 1]));
        inner_4.insert((17, 0), (vec![0, 3, 4, 7], vec![1, 1, 1, 1, 3, 3, 3, 3], vec![1, 0, 2, 2, 1, 0]));
        inner_4.insert((18, 1), (vec![0, 1, 4, 7], vec![1, 0, 0, 1, 2, 4, 4, 2], vec![1, 0, 2, 1, 1, 1]));
        inner_4.insert((18, -1), (vec![0, 3, 6, 7], vec![1, 0, 0, 1, 2, 4, 4, 2], vec![1, 0, 2, 1, 1, 1]));
        inner_4.insert((19, 1), (vec![0, 1, 4, 8], vec![1, 0, 1, 0, 3, 5, 3, 5], vec![1, 0, 1, 3, 1, 0]));
        inner_4.insert((19, -1), (vec![0, 3, 4, 8], vec![1, 0, 1, 0, 3, 5, 3, 5], vec![1, 0, 1, 3, 1, 0]));
        inner_4.insert((20, 0), (vec![0, 1, 5, 8], vec![1, 1, 0, 0, 3, 3, 3, 3], vec![1, 0, 1, 2, 2, 0]));
        inner_4.insert((21, 0), (vec![0, 2, 4, 6], vec![1, 1, 1, 1, 6, 6, 6, 6], vec![0, 3, 0, 2, 0, 1]));
        inner_4.insert((22, 1), (vec![0, 2, 4, 7], vec![1, 0, 0, 0, 3, 4, 1, 1], vec![0, 2, 1, 1, 2, 0]));
        inner_4.insert((22, -1), (vec![0, 3, 5, 7], vec![1, 0, 0, 0, 3, 4, 1, 1], vec![0, 2, 1, 1, 2, 0]));
        inner_4.insert((23, 0), (vec![0, 2, 5, 7], vec![1, 1, 0, 0, 5, 5, 1, 1], vec![0, 2, 1, 0, 3, 0]));
        inner_4.insert((24, 0), (vec![0, 2, 4, 8], vec![1, 1, 1, 1, 6, 6, 6, 6], vec![0, 2, 0, 3, 0, 1]));
        inner_4.insert((25, 0), (vec![0, 2, 6, 8], vec![2, 2, 2, 2, 6, 6, 6, 6], vec![0, 2, 0, 2, 0, 2]));
        inner_4.insert((26, 0), (vec![0, 3, 5, 8], vec![1, 1, 0, 0, 3, 3, 2, 2], vec![0, 1, 2, 1, 2, 0]));
        inner_4.insert((27, 1), (vec![0, 2, 5, 8], vec![1, 0, 0, 0, 2, 4, 3, 2], vec![0, 1, 2, 1, 1, 1]));
        inner_4.insert((27, -1), (vec![0, 3, 6, 8], vec![1, 0, 0, 0, 2, 4, 3, 2], vec![0, 1, 2, 1, 1, 1]));
        inner_4.insert((28, 0), (vec![0, 3, 6, 9], vec![4, 4, 4, 4, 8, 8, 8, 8], vec![0, 0, 4, 0, 0, 2]));
        inner_4.insert((29, 1), (vec![0, 1, 3, 7], vec![1, 0, 0, 0, 0, 3, 3, 1], vec![1, 1, 1, 1, 1, 1]));
        inner_4.insert((29, -1), (vec![0, 4, 6, 7], vec![1, 0, 0, 0, 0, 3, 3, 1], vec![1, 1, 1, 1, 1, 1]));
        outer.insert(4, inner_4);
        // Cardinality 5 pentachord
        let mut inner_5 = HashMap::new();
        inner_5.insert((1, 0), (vec![0, 1, 2, 3, 4], vec![1, 1, 0, 0, 3, 3, 0, 0], vec![4, 3, 2, 1, 0, 0]));
        inner_5.insert((2, 1), (vec![0, 1, 2, 3, 5], vec![1, 0, 0, 0, 1, 2, 1, 1], vec![3, 3, 2, 1, 1, 0]));
        inner_5.insert((2, -1), (vec![0, 2, 3, 4, 5], vec![1, 0, 0, 0, 1, 2, 1, 1], vec![3, 3, 2, 1, 1, 0]));
        inner_5.insert((3, 1), (vec![0, 1, 2, 4, 5], vec![1, 0, 0, 0, 1, 1, 1, 0], vec![3, 2, 2, 2, 1, 0]));
        inner_5.insert((3, -1), (vec![0, 1, 3, 4, 5], vec![1, 0, 0, 0, 1, 1, 1, 0], vec![3, 2, 2, 2, 1, 0]));
        inner_5.insert((4, 1), (vec![0, 1, 2, 3, 6], vec![1, 0, 0, 0, 0, 2, 0, 0], vec![3, 2, 2, 1, 1, 1]));
        inner_5.insert((4, -1), (vec![0, 3, 4, 5, 6], vec![1, 0, 0, 0, 0, 2, 0, 0], vec![3, 2, 2, 1, 1, 1]));
        inner_5.insert((5, 1), (vec![0, 1, 2, 3, 7], vec![1, 0, 0, 0, 0, 1, 1, 1], vec![3, 2, 1, 1, 2, 1]));
        inner_5.insert((5, -1), (vec![0, 4, 5, 6, 7], vec![1, 0, 0, 0, 0, 1, 1, 1], vec![3, 2, 1, 1, 2, 1]));
        inner_5.insert((6, 1), (vec![0, 1, 2, 5, 6], vec![1, 0, 0, 0, 0, 1, 1, 1], vec![3, 1, 1, 2, 2, 1]));
        inner_5.insert((6, -1), (vec![0, 1, 4, 5, 6], vec![1, 0, 0, 0, 0, 1, 1, 1], vec![3, 1, 1, 2, 2, 1]));
        inner_5.insert((7, 1), (vec![0, 1, 2, 6, 7], vec![1, 0, 0, 1, 2, 3, 3, 2], vec![3, 1, 0, 1, 3, 2]));
        inner_5.insert((7, -1), (vec![0, 1, 5, 6, 7], vec![1, 0, 0, 1, 2, 3, 3, 2], vec![3, 1, 0, 1, 3, 2]));
        inner_5.insert((8, 0), (vec![0, 2, 3, 4, 6], vec![1, 1, 0, 0, 2, 2, 0, 0], vec![2, 3, 2, 2, 0, 1]));
        inner_5.insert((9, 1), (vec![0, 1, 2, 4, 6], vec![1, 0, 0, 0, 0, 2, 0, 1], vec![2, 3, 1, 2, 1, 1]));
        inner_5.insert((9, -1), (vec![0, 2, 4, 5, 6], vec![1, 0, 0, 0, 0, 2, 0, 1], vec![2, 3, 1, 2, 1, 1]));
        inner_5.insert((10, 1), (vec![0, 1, 3, 4, 6], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![2, 2, 3, 1, 1, 1]));
        inner_5.insert((10, -1), (vec![0, 2, 3, 5, 6], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![2, 2, 3, 1, 1, 1]));
        inner_5.insert((11, 1), (vec![0, 2, 3, 4, 7], vec![1, 0, 1, 0, 1, 1, 1, 1], vec![2, 2, 2, 2, 2, 0]));
        inner_5.insert((11, -1), (vec![0, 3, 4, 5, 7], vec![1, 0, 1, 0, 1, 1, 1, 1], vec![2, 2, 2, 2, 2, 0]));
        inner_5.insert((12, 0), (vec![0, 1, 3, 5, 6], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![2, 2, 2, 1, 2, 1]));
        inner_5.insert((13, 1), (vec![0, 1, 2, 4, 8], vec![1, 0, 0, 0, 0, 2, 0, 1], vec![2, 2, 1, 3, 1, 1]));
        inner_5.insert((13, -1), (vec![0, 2, 3, 4, 8], vec![1, 0, 0, 0, 0, 2, 0, 1], vec![2, 2, 1, 3, 1, 1]));
        inner_5.insert((14, 1), (vec![0, 1, 2, 5, 7], vec![1, 0, 0, 0, 0, 1, 1, 1], vec![2, 2, 1, 1, 3, 1]));
        inner_5.insert((14, -1), (vec![0, 2, 5, 6, 7], vec![1, 0, 0, 0, 0, 1, 1, 1], vec![2, 2, 1, 1, 3, 1]));
        inner_5.insert((15, 0), (vec![0, 1, 2, 6, 8], vec![1, 1, 1, 1, 2, 2, 2, 2], vec![2, 2, 0, 2, 2, 2]));
        inner_5.insert((16, 1), (vec![0, 1, 3, 4, 7], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![2, 1, 3, 2, 1, 1]));
        inner_5.insert((16, -1), (vec![0, 3, 4, 6, 7], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![2, 1, 3, 2, 1, 1]));
        inner_5.insert((17, 0), (vec![0, 1, 3, 4, 8], vec![1, 1, 0, 0, 1, 1, 2, 2], vec![2, 1, 2, 3, 2, 0]));
        inner_5.insert((18, 1), (vec![0, 1, 4, 5, 7], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![2, 1, 2, 2, 2, 1]));
        inner_5.insert((18, -1), (vec![0, 2, 3, 6, 7], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![2, 1, 2, 2, 2, 1]));
        inner_5.insert((19, 1), (vec![0, 1, 3, 6, 7], vec![1, 0, 0, 1, 0, 2, 2, 0], vec![2, 1, 2, 1, 2, 2]));
        inner_5.insert((19, -1), (vec![0, 1, 4, 6, 7], vec![1, 0, 0, 1, 0, 2, 2, 0], vec![2, 1, 2, 1, 2, 2]));
        inner_5.insert((20, 1), (vec![0, 1, 3, 7, 8], vec![1, 0, 0, 0, 0, 1, 1, 1], vec![2, 1, 1, 2, 3, 1]));
        inner_5.insert((20, -1), (vec![0, 1, 5, 7, 8], vec![1, 0, 0, 0, 0, 1, 1, 1], vec![2, 1, 1, 2, 3, 1]));
        inner_5.insert((21, 1), (vec![0, 1, 4, 5, 8], vec![1, 0, 1, 0, 3, 3, 3, 3], vec![2, 0, 2, 4, 2, 0]));
        inner_5.insert((21, -1), (vec![0, 3, 4, 7, 8], vec![1, 0, 1, 0, 3, 3, 3, 3], vec![2, 0, 2, 4, 2, 0]));
        inner_5.insert((22, 0), (vec![0, 1, 4, 7, 8], vec![1, 1, 1, 1, 2, 2, 2, 2], vec![2, 0, 2, 3, 2, 1]));
        inner_5.insert((23, 1), (vec![0, 2, 3, 5, 7], vec![1, 0, 0, 0, 1, 2, 1, 1], vec![1, 3, 2, 1, 3, 0]));
        inner_5.insert((23, -1), (vec![0, 2, 4, 5, 7], vec![1, 0, 0, 0, 1, 2, 1, 1], vec![1, 3, 2, 1, 3, 0]));
        inner_5.insert((24, 1), (vec![0, 1, 3, 5, 7], vec![1, 0, 0, 0, 0, 2, 0, 1], vec![1, 3, 1, 2, 2, 1]));
        inner_5.insert((24, -1), (vec![0, 2, 4, 6, 7], vec![1, 0, 0, 0, 0, 2, 0, 1], vec![1, 3, 1, 2, 2, 1]));
        inner_5.insert((25, 1), (vec![0, 2, 3, 5, 8], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![1, 2, 3, 1, 2, 1]));
        inner_5.insert((25, -1), (vec![0, 3, 5, 6, 8], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![1, 2, 3, 1, 2, 1]));
        inner_5.insert((26, 1), (vec![0, 2, 4, 5, 8], vec![1, 0, 1, 0, 0, 2, 0, 2], vec![1, 2, 2, 3, 1, 1]));
        inner_5.insert((26, -1), (vec![0, 3, 4, 6, 8], vec![1, 0, 1, 0, 0, 2, 0, 2], vec![1, 2, 2, 3, 1, 1]));
        inner_5.insert((27, 1), (vec![0, 1, 3, 5, 8], vec![1, 0, 0, 0, 1, 1, 1, 0], vec![1, 2, 2, 2, 3, 0]));
        inner_5.insert((27, -1), (vec![0, 3, 5, 7, 8], vec![1, 0, 0, 0, 1, 1, 1, 0], vec![1, 2, 2, 2, 3, 0]));
        inner_5.insert((28, 1), (vec![0, 2, 3, 6, 8], vec![1, 0, 0, 1, 0, 2, 2, 0], vec![1, 2, 2, 2, 1, 2]));
        inner_5.insert((28, -1), (vec![0, 2, 5, 6, 8], vec![1, 0, 0, 1, 0, 2, 2, 0], vec![1, 2, 2, 2, 1, 2]));
        inner_5.insert((29, 1), (vec![0, 1, 3, 6, 8], vec![1, 0, 0, 0, 0, 2, 0, 0], vec![1, 2, 2, 1, 3, 1]));
        inner_5.insert((29, -1), (vec![0, 2, 5, 7, 8], vec![1, 0, 0, 0, 0, 2, 0, 0], vec![1, 2, 2, 1, 3, 1]));
        inner_5.insert((30, 1), (vec![0, 1, 4, 6, 8], vec![1, 0, 0, 0, 0, 2, 0, 1], vec![1, 2, 1, 3, 2, 1]));
        inner_5.insert((30, -1), (vec![0, 2, 4, 7, 8], vec![1, 0, 0, 0, 0, 2, 0, 1], vec![1, 2, 1, 3, 2, 1]));
        inner_5.insert((31, 1), (vec![0, 1, 3, 6, 9], vec![1, 0, 0, 1, 0, 3, 3, 0], vec![1, 1, 4, 1, 1, 2]));
        inner_5.insert((31, -1), (vec![0, 2, 3, 6, 9], vec![1, 0, 0, 1, 0, 3, 3, 0], vec![1, 1, 4, 1, 1, 2]));
        inner_5.insert((32, 1), (vec![0, 1, 4, 6, 9], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![1, 1, 3, 2, 2, 1]));
        inner_5.insert((32, -1), (vec![0, 1, 4, 7, 9], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![1, 1, 3, 2, 2, 1]));
        inner_5.insert((33, 0), (vec![0, 2, 4, 6, 8], vec![1, 1, 1, 1, 6, 6, 6, 6], vec![0, 4, 0, 4, 0, 2]));
        inner_5.insert((34, 0), (vec![0, 2, 4, 6, 9], vec![1, 1, 0, 0, 2, 2, 0, 0], vec![0, 3, 2, 2, 2, 1]));
        inner_5.insert((35, 0), (vec![0, 2, 4, 7, 9], vec![1, 1, 0, 0, 3, 3, 0, 0], vec![0, 3, 2, 1, 4, 0]));
        inner_5.insert((36, 1), (vec![0, 1, 2, 4, 7], vec![1, 0, 0, 1, 0, 1, 1, 0], vec![2, 2, 2, 1, 2, 1]));
        inner_5.insert((36, -1), (vec![0, 3, 5, 6, 7], vec![1, 0, 0, 1, 0, 1, 1, 0], vec![2, 2, 2, 1, 2, 1]));
        inner_5.insert((37, 0), (vec![0, 3, 4, 5, 8], vec![1, 1, 0, 0, 1, 1, 2, 2], vec![2, 1, 2, 3, 2, 0]));
        inner_5.insert((38, 1), (vec![0, 1, 2, 5, 8], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![2, 1, 2, 2, 2, 1]));
        inner_5.insert((38, -1), (vec![0, 3, 6, 7, 8], vec![1, 0, 0, 0, 0, 1, 1, 0], vec![2, 1, 2, 2, 2, 1]));
        outer.insert(5, inner_5);
        // Cardinality 6 hexachord
        let mut inner_6 = HashMap::new();
        inner_6.insert((1, 0), (vec![0, 1, 2, 3, 4, 5], vec![1, 1, 0, 0, 1, 1, 0, 0], vec![5, 4, 3, 2, 1, 0]));
        inner_6.insert((2, 1), (vec![0, 1, 2, 3, 4, 6], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![4, 4, 3, 2, 1, 1]));
        inner_6.insert((2, -1), (vec![0, 2, 3, 4, 5, 6], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![4, 4, 3, 2, 1, 1]));
        inner_6.insert((3, 1), (vec![0, 1, 2, 3, 5, 6], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 3, 2, 2, 1]));
        inner_6.insert((3, -1), (vec![0, 1, 3, 4, 5, 6], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 3, 2, 2, 1]));
        inner_6.insert((4, 0), (vec![0, 1, 2, 4, 5, 6], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![4, 3, 2, 3, 2, 1]));
        inner_6.insert((5, 1), (vec![0, 1, 2, 3, 6, 7], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![4, 2, 2, 2, 3, 2]));
        inner_6.insert((5, -1), (vec![0, 1, 4, 5, 6, 7], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![4, 2, 2, 2, 3, 2]));
        inner_6.insert((6, 0), (vec![0, 1, 2, 5, 6, 7], vec![1, 1, 0, 0, 0, 0, 1, 1], vec![4, 2, 1, 2, 4, 2]));
        inner_6.insert((7, 0), (vec![0, 1, 2, 6, 7, 8], vec![2, 2, 2, 2, 2, 2, 2, 2], vec![4, 2, 0, 2, 4, 3]));
        inner_6.insert((8, 0), (vec![0, 2, 3, 4, 5, 7], vec![1, 1, 1, 1, 1, 1, 1, 1], vec![3, 4, 3, 2, 3, 0]));
        inner_6.insert((9, 1), (vec![0, 1, 2, 3, 5, 7], vec![1, 0, 1, 0, 0, 1, 0, 1], vec![3, 4, 2, 2, 3, 1]));
        inner_6.insert((9, -1), (vec![0, 2, 4, 5, 6, 7], vec![1, 0, 1, 0, 0, 1, 0, 1], vec![3, 4, 2, 2, 3, 1]));
        inner_6.insert((10, 1), (vec![0, 1, 3, 4, 5, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 3, 3, 3, 2, 1]));
        inner_6.insert((10, -1), (vec![0, 2, 3, 4, 6, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 3, 3, 3, 2, 1]));
        inner_6.insert((11, 1), (vec![0, 1, 2, 4, 5, 7], vec![1, 0, 0, 0, 0, 0, 1, 0], vec![3, 3, 3, 2, 3, 1]));
        inner_6.insert((11, -1), (vec![0, 2, 3, 5, 6, 7], vec![1, 0, 0, 0, 0, 0, 1, 0], vec![3, 3, 3, 2, 3, 1]));
        inner_6.insert((12, 1), (vec![0, 1, 2, 4, 6, 7], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 3, 2, 2, 3, 2]));
        inner_6.insert((12, -1), (vec![0, 1, 3, 5, 6, 7], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 3, 2, 2, 3, 2]));
        inner_6.insert((13, 0), (vec![0, 1, 3, 4, 6, 7], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![3, 2, 4, 2, 2, 2]));
        inner_6.insert((14, 1), (vec![0, 1, 3, 4, 5, 8], vec![1, 0, 1, 0, 1, 0, 1, 0], vec![3, 2, 3, 4, 3, 0]));
        inner_6.insert((14, -1), (vec![0, 3, 4, 5, 7, 8], vec![1, 0, 1, 0, 1, 0, 1, 0], vec![3, 2, 3, 4, 3, 0]));
        inner_6.insert((15, 1), (vec![0, 1, 2, 4, 5, 8], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![3, 2, 3, 4, 2, 1]));
        inner_6.insert((15, -1), (vec![0, 3, 4, 6, 7, 8], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![3, 2, 3, 4, 2, 1]));
        inner_6.insert((16, 1), (vec![0, 1, 4, 5, 6, 8], vec![1, 0, 1, 0, 0, 1, 0, 1], vec![3, 2, 2, 4, 3, 1]));
        inner_6.insert((16, -1), (vec![0, 2, 3, 4, 7, 8], vec![1, 0, 1, 0, 0, 1, 0, 1], vec![3, 2, 2, 4, 3, 1]));
        inner_6.insert((17, 1), (vec![0, 1, 2, 4, 7, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 2, 2, 3, 3, 2]));
        inner_6.insert((17, -1), (vec![0, 1, 4, 6, 7, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 2, 2, 3, 3, 2]));
        inner_6.insert((18, 1), (vec![0, 1, 2, 5, 7, 8], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![3, 2, 2, 2, 4, 2]));
        inner_6.insert((18, -1), (vec![0, 1, 3, 6, 7, 8], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![3, 2, 2, 2, 4, 2]));
        inner_6.insert((19, 1), (vec![0, 1, 3, 4, 7, 8], vec![1, 0, 0, 0, 0, 0, 1, 0], vec![3, 1, 3, 4, 3, 1]));
        inner_6.insert((19, -1), (vec![0, 1, 4, 5, 7, 8], vec![1, 0, 0, 0, 0, 0, 1, 0], vec![3, 1, 3, 4, 3, 1]));
        inner_6.insert((20, 0), (vec![0, 1, 4, 5, 8, 9], vec![3, 3, 3, 3, 3, 3, 3, 3], vec![3, 0, 3, 6, 3, 0]));
        inner_6.insert((21, 1), (vec![0, 2, 3, 4, 6, 8], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![2, 4, 2, 4, 1, 2]));
        inner_6.insert((21, -1), (vec![0, 2, 4, 5, 6, 8], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![2, 4, 2, 4, 1, 2]));
        inner_6.insert((22, 1), (vec![0, 1, 2, 4, 6, 8], vec![1, 0, 1, 0, 0, 1, 0, 1], vec![2, 4, 1, 4, 2, 2]));
        inner_6.insert((22, -1), (vec![0, 2, 4, 6, 7, 8], vec![1, 0, 1, 0, 0, 1, 0, 1], vec![2, 4, 1, 4, 2, 2]));
        inner_6.insert((23, 0), (vec![0, 2, 3, 5, 6, 8], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![2, 3, 4, 2, 2, 2]));
        inner_6.insert((24, 1), (vec![0, 1, 3, 4, 6, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![2, 3, 3, 3, 3, 1]));
        inner_6.insert((24, -1), (vec![0, 2, 4, 5, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![2, 3, 3, 3, 3, 1]));
        inner_6.insert((25, 1), (vec![0, 1, 3, 5, 6, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![2, 3, 3, 2, 4, 1]));
        inner_6.insert((25, -1), (vec![0, 2, 3, 5, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![2, 3, 3, 2, 4, 1]));
        inner_6.insert((26, 0), (vec![0, 1, 3, 5, 7, 8], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![2, 3, 2, 3, 4, 1]));
        inner_6.insert((27, 1), (vec![0, 1, 3, 4, 6, 9], vec![1, 0, 0, 1, 0, 1, 1, 0], vec![2, 2, 5, 2, 2, 2]));
        inner_6.insert((27, -1), (vec![0, 2, 3, 5, 6, 9], vec![1, 0, 0, 1, 0, 1, 1, 0], vec![2, 2, 5, 2, 2, 2]));
        inner_6.insert((28, 0), (vec![0, 1, 3, 5, 6, 9], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![2, 2, 4, 3, 2, 2]));
        inner_6.insert((29, 0), (vec![0, 1, 3, 6, 8, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![2, 2, 4, 2, 3, 2]));
        inner_6.insert((30, 1), (vec![0, 1, 3, 6, 7, 9], vec![2, 0, 0, 2, 0, 2, 2, 0], vec![2, 2, 4, 2, 2, 3]));
        inner_6.insert((30, -1), (vec![0, 2, 3, 6, 8, 9], vec![2, 0, 0, 2, 0, 2, 2, 0], vec![2, 2, 4, 2, 2, 3]));
        inner_6.insert((31, 1), (vec![0, 1, 3, 5, 8, 9], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![2, 2, 3, 4, 3, 1]));
        inner_6.insert((31, -1), (vec![0, 1, 4, 6, 8, 9], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![2, 2, 3, 4, 3, 1]));
        inner_6.insert((32, 0), (vec![0, 2, 4, 5, 7, 9], vec![1, 1, 0, 0, 1, 1, 0, 0], vec![1, 4, 3, 2, 5, 0]));
        inner_6.insert((33, 1), (vec![0, 2, 3, 5, 7, 9], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![1, 4, 3, 2, 4, 1]));
        inner_6.insert((33, -1), (vec![0, 2, 4, 6, 7, 9], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![1, 4, 3, 2, 4, 1]));
        inner_6.insert((34, 1), (vec![0, 1, 3, 5, 7, 9], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![1, 4, 2, 4, 2, 2]));
        inner_6.insert((34, -1), (vec![0, 2, 4, 6, 8, 9], vec![1, 0, 0, 0, 0, 1, 0, 0], vec![1, 4, 2, 4, 2, 2]));
        inner_6.insert((35, 0), (vec![0, 2, 4, 6, 8, 10], vec![6, 6, 6, 6, 6, 6, 6, 6], vec![0, 6, 0, 6, 0, 3]));
        inner_6.insert((36, 1), (vec![0, 1, 2, 3, 4, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 3, 2, 2, 1]));
        inner_6.insert((36, -1), (vec![0, 3, 4, 5, 6, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 3, 2, 2, 1]));
        inner_6.insert((37, 0), (vec![0, 1, 2, 3, 4, 8], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![4, 3, 2, 3, 2, 1]));
        inner_6.insert((38, 0), (vec![0, 1, 2, 3, 7, 8], vec![1, 1, 0, 0, 0, 0, 1, 1], vec![4, 2, 1, 2, 4, 2]));
        inner_6.insert((39, 1), (vec![0, 2, 3, 4, 5, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 3, 3, 3, 2, 1]));
        inner_6.insert((39, -1), (vec![0, 3, 4, 5, 6, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 3, 3, 3, 2, 1]));
        inner_6.insert((40, 1), (vec![0, 1, 2, 3, 5, 8], vec![1, 0, 0, 0, 0, 0, 1, 0], vec![3, 3, 3, 2, 3, 1]));
        inner_6.insert((40, -1), (vec![0, 3, 5, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 1, 0], vec![3, 3, 3, 2, 3, 1]));
        inner_6.insert((41, 1), (vec![0, 1, 2, 3, 6, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 3, 2, 2, 3, 2]));
        inner_6.insert((41, -1), (vec![0, 2, 5, 6, 7, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 3, 2, 2, 3, 2]));
        inner_6.insert((42, 0), (vec![0, 1, 2, 3, 6, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![3, 2, 4, 2, 2, 2]));
        inner_6.insert((43, 1), (vec![0, 1, 2, 5, 6, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 2, 2, 3, 3, 2]));
        inner_6.insert((43, -1), (vec![0, 2, 3, 6, 7, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 2, 2, 3, 3, 2]));
        inner_6.insert((44, 1), (vec![0, 1, 2, 5, 6, 9], vec![1, 0, 0, 0, 0, 0, 1, 0], vec![3, 1, 3, 4, 3, 1]));
        inner_6.insert((44, -1), (vec![0, 1, 2, 5, 8, 9], vec![1, 0, 0, 0, 0, 0, 1, 0], vec![3, 1, 3, 4, 3, 1]));
        inner_6.insert((45, 0), (vec![0, 2, 3, 4, 6, 9], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![2, 3, 4, 2, 2, 2]));
        inner_6.insert((46, 1), (vec![0, 1, 2, 4, 6, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![2, 3, 3, 3, 3, 1]));
        inner_6.insert((46, -1), (vec![0, 2, 4, 5, 6, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![2, 3, 3, 3, 3, 1]));
        inner_6.insert((47, 1), (vec![0, 1, 2, 4, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![2, 3, 3, 2, 4, 1]));
        inner_6.insert((47, -1), (vec![0, 2, 3, 4, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![2, 3, 3, 2, 4, 1]));
        inner_6.insert((48, 0), (vec![0, 1, 2, 5, 7, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![2, 3, 2, 3, 4, 1]));
        inner_6.insert((49, 0), (vec![0, 1, 3, 4, 7, 9], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![2, 2, 4, 3, 2, 2]));
        inner_6.insert((50, 0), (vec![0, 1, 4, 6, 7, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![2, 2, 4, 2, 3, 2]));
        outer.insert(6, inner_6);
        // Cardinality 7 septachord
        let mut inner_7 = HashMap::new();
        inner_7.insert((1, 0), (vec![0, 1, 2, 3, 4, 5, 6], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![6, 5, 4, 3, 2, 1]));
        inner_7.insert((2, 1), (vec![0, 1, 2, 3, 4, 5, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 4, 3, 3, 1]));
        inner_7.insert((2, -1), (vec![0, 2, 3, 4, 5, 6, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 4, 3, 3, 1]));
        inner_7.insert((3, 1), (vec![0, 1, 2, 3, 4, 5, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 4, 4, 4, 3, 1]));
        inner_7.insert((3, -1), (vec![0, 3, 4, 5, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 4, 4, 4, 3, 1]));
        inner_7.insert((4, 1), (vec![0, 1, 2, 3, 4, 6, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 4, 4, 3, 3, 2]));
        inner_7.insert((4, -1), (vec![0, 1, 3, 4, 5, 6, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 4, 4, 3, 3, 2]));
        inner_7.insert((5, 1), (vec![0, 1, 2, 3, 5, 6, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 4, 3, 3, 4, 2]));
        inner_7.insert((5, -1), (vec![0, 1, 2, 4, 5, 6, 7], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 4, 3, 3, 4, 2]));
        inner_7.insert((6, 1), (vec![0, 1, 2, 3, 4, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 3, 3, 4, 4, 2]));
        inner_7.insert((6, -1), (vec![0, 1, 4, 5, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 3, 3, 4, 4, 2]));
        inner_7.insert((7, 1), (vec![0, 1, 2, 3, 6, 7, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![5, 3, 2, 3, 5, 3]));
        inner_7.insert((7, -1), (vec![0, 1, 2, 5, 6, 7, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![5, 3, 2, 3, 5, 3]));
        inner_7.insert((8, 0), (vec![0, 2, 3, 4, 5, 6, 8], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![4, 5, 4, 4, 2, 2]));
        inner_7.insert((9, 1), (vec![0, 1, 2, 3, 4, 6, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 5, 3, 4, 3, 2]));
        inner_7.insert((9, -1), (vec![0, 2, 4, 5, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 5, 3, 4, 3, 2]));
        inner_7.insert((10, 1), (vec![0, 1, 2, 3, 4, 6, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 4, 5, 3, 3, 2]));
        inner_7.insert((10, -1), (vec![0, 2, 3, 4, 5, 6, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 4, 5, 3, 3, 2]));
        inner_7.insert((11, 1), (vec![0, 1, 3, 4, 5, 6, 8], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![4, 4, 4, 4, 4, 1]));
        inner_7.insert((11, -1), (vec![0, 2, 3, 4, 5, 7, 8], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![4, 4, 4, 4, 4, 1]));
        inner_7.insert((12, 0), (vec![0, 1, 2, 3, 4, 7, 9], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![4, 4, 4, 3, 4, 2]));
        inner_7.insert((13, 1), (vec![0, 1, 2, 4, 5, 6, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 4, 3, 5, 3, 2]));
        inner_7.insert((13, -1), (vec![0, 2, 3, 4, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 4, 3, 5, 3, 2]));
        inner_7.insert((14, 1), (vec![0, 1, 2, 3, 5, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 4, 3, 3, 5, 2]));
        inner_7.insert((14, -1), (vec![0, 1, 3, 5, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 4, 3, 3, 5, 2]));
        inner_7.insert((15, 0), (vec![0, 1, 2, 4, 6, 7, 8], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![4, 4, 2, 4, 4, 3]));
        inner_7.insert((16, 1), (vec![0, 1, 2, 3, 5, 6, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 5, 4, 3, 2]));
        inner_7.insert((16, -1), (vec![0, 1, 3, 4, 5, 6, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 5, 4, 3, 2]));
        inner_7.insert((17, 0), (vec![0, 1, 2, 4, 5, 6, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![4, 3, 4, 5, 4, 1]));
        inner_7.insert((18, 1), (vec![0, 1, 2, 3, 5, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 4, 4, 4, 2]));
        inner_7.insert((18, -1), (vec![0, 1, 4, 6, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 4, 4, 4, 2]));
        inner_7.insert((19, 1), (vec![0, 1, 2, 3, 6, 7, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![4, 3, 4, 3, 4, 3]));
        inner_7.insert((19, -1), (vec![0, 1, 2, 3, 6, 8, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![4, 3, 4, 3, 4, 3]));
        inner_7.insert((20, 1), (vec![0, 1, 2, 4, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 3, 4, 5, 2]));
        inner_7.insert((20, -1), (vec![0, 1, 2, 5, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 3, 4, 5, 2]));
        inner_7.insert((21, 1), (vec![0, 1, 2, 4, 5, 8, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![4, 2, 4, 6, 4, 1]));
        inner_7.insert((21, -1), (vec![0, 1, 3, 4, 5, 8, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![4, 2, 4, 6, 4, 1]));
        inner_7.insert((22, 0), (vec![0, 1, 2, 5, 6, 8, 9], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![4, 2, 4, 5, 4, 2]));
        inner_7.insert((23, 1), (vec![0, 2, 3, 4, 5, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 5, 4, 3, 5, 1]));
        inner_7.insert((23, -1), (vec![0, 2, 4, 5, 6, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 5, 4, 3, 5, 1]));
        inner_7.insert((24, 1), (vec![0, 1, 2, 3, 5, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 5, 3, 4, 4, 2]));
        inner_7.insert((24, -1), (vec![0, 2, 4, 6, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 5, 3, 4, 4, 2]));
        inner_7.insert((25, 1), (vec![0, 2, 3, 4, 6, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 4, 5, 3, 4, 2]));
        inner_7.insert((25, -1), (vec![0, 2, 3, 5, 6, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 4, 5, 3, 4, 2]));
        inner_7.insert((26, 1), (vec![0, 1, 3, 4, 5, 7, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![3, 4, 4, 5, 3, 2]));
        inner_7.insert((26, -1), (vec![0, 2, 4, 5, 6, 8, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![3, 4, 4, 5, 3, 2]));
        inner_7.insert((27, 1), (vec![0, 1, 2, 4, 5, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 4, 4, 4, 5, 1]));
        inner_7.insert((27, -1), (vec![0, 2, 4, 5, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 4, 4, 4, 5, 1]));
        inner_7.insert((28, 1), (vec![0, 1, 3, 5, 6, 7, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 4, 4, 4, 3, 3]));
        inner_7.insert((28, -1), (vec![0, 2, 3, 4, 6, 8, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 4, 4, 4, 3, 3]));
        inner_7.insert((29, 1), (vec![0, 1, 2, 4, 6, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 4, 4, 3, 5, 2]));
        inner_7.insert((29, -1), (vec![0, 2, 3, 5, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 4, 4, 3, 5, 2]));
        inner_7.insert((30, 1), (vec![0, 1, 2, 4, 6, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 4, 3, 5, 4, 2]));
        inner_7.insert((30, -1), (vec![0, 1, 3, 5, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 4, 3, 5, 4, 2]));
        inner_7.insert((31, 1), (vec![0, 1, 3, 4, 6, 7, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 3, 6, 3, 3, 3]));
        inner_7.insert((31, -1), (vec![0, 2, 3, 5, 6, 8, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![3, 3, 6, 3, 3, 3]));
        inner_7.insert((32, 1), (vec![0, 1, 3, 4, 6, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 3, 5, 4, 4, 2]));
        inner_7.insert((32, -1), (vec![0, 1, 3, 5, 6, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![3, 3, 5, 4, 4, 2]));
        inner_7.insert((33, 0), (vec![0, 1, 2, 4, 6, 8, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![2, 6, 2, 6, 2, 3]));
        inner_7.insert((34, 0), (vec![0, 1, 3, 4, 6, 8, 10], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![2, 5, 4, 4, 4, 2]));
        inner_7.insert((35, 0), (vec![0, 1, 3, 5, 6, 8, 10], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![2, 5, 4, 3, 6, 1]));
        inner_7.insert((36, 1), (vec![0, 1, 2, 3, 5, 6, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![4, 4, 4, 3, 4, 2]));
        inner_7.insert((36, -1), (vec![0, 2, 3, 5, 6, 7, 8], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![4, 4, 4, 3, 4, 2]));
        inner_7.insert((37, 0), (vec![0, 1, 3, 4, 5, 7, 8], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![4, 3, 4, 5, 4, 1]));
        inner_7.insert((38, 1), (vec![0, 1, 2, 4, 5, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 4, 4, 4, 2]));
        inner_7.insert((38, -1), (vec![0, 1, 3, 4, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 3, 4, 4, 4, 2]));
        outer.insert(7, inner_7);
        // Cardinality 8 octachord
        let mut inner_8 = HashMap::new();
        inner_8.insert((1, 0), (vec![0, 1, 2, 3, 4, 5, 6, 7], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![7, 6, 5, 4, 4, 2]));
        inner_8.insert((2, 1), (vec![0, 1, 2, 3, 4, 5, 6, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 6, 5, 5, 4, 2]));
        inner_8.insert((2, -1), (vec![0, 2, 3, 4, 5, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 6, 5, 5, 4, 2]));
        inner_8.insert((3, 0), (vec![0, 1, 2, 3, 4, 5, 6, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![6, 5, 6, 5, 4, 2]));
        inner_8.insert((4, 1), (vec![0, 1, 2, 3, 4, 5, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 5, 5, 5, 5, 2]));
        inner_8.insert((4, -1), (vec![0, 1, 3, 4, 5, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 5, 5, 5, 5, 2]));
        inner_8.insert((5, 1), (vec![0, 1, 2, 3, 4, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 5, 4, 5, 5, 3]));
        inner_8.insert((5, -1), (vec![0, 1, 2, 4, 5, 6, 7, 8], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 5, 4, 5, 5, 3]));
        inner_8.insert((6, 0), (vec![0, 1, 2, 3, 5, 6, 7, 8], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![6, 5, 4, 4, 6, 3]));
        inner_8.insert((7, 0), (vec![0, 1, 2, 3, 4, 5, 8, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![6, 4, 5, 6, 5, 2]));
        inner_8.insert((8, 0), (vec![0, 1, 2, 3, 4, 7, 8, 9], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![6, 4, 4, 5, 6, 3]));
        inner_8.insert((9, 0), (vec![0, 1, 2, 3, 6, 7, 8, 9], vec![2, 2, 2, 2, 0, 0, 0, 0], vec![6, 4, 4, 4, 6, 4]));
        inner_8.insert((10, 0), (vec![0, 2, 3, 4, 5, 6, 7, 9], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![5, 6, 6, 4, 5, 2]));
        inner_8.insert((11, 1), (vec![0, 1, 2, 3, 4, 5, 7, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![5, 6, 5, 5, 5, 2]));
        inner_8.insert((11, -1), (vec![0, 2, 4, 5, 6, 7, 8, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![5, 6, 5, 5, 5, 2]));
        inner_8.insert((12, 1), (vec![0, 1, 3, 4, 5, 6, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 6, 5, 4, 3]));
        inner_8.insert((12, -1), (vec![0, 2, 3, 4, 5, 6, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 6, 5, 4, 3]));
        inner_8.insert((13, 1), (vec![0, 1, 2, 3, 4, 6, 7, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![5, 5, 6, 4, 5, 3]));
        inner_8.insert((13, -1), (vec![0, 2, 3, 5, 6, 7, 8, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![5, 5, 6, 4, 5, 3]));
        inner_8.insert((14, 1), (vec![0, 1, 2, 4, 5, 6, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 5, 5, 6, 2]));
        inner_8.insert((14, -1), (vec![0, 2, 3, 4, 5, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 5, 5, 6, 2]));
        inner_8.insert((15, 1), (vec![0, 1, 2, 3, 4, 6, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 5, 5, 5, 3]));
        inner_8.insert((15, -1), (vec![0, 1, 3, 5, 6, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 5, 5, 5, 3]));
        inner_8.insert((16, 1), (vec![0, 1, 2, 3, 5, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 4, 5, 6, 3]));
        inner_8.insert((16, -1), (vec![0, 1, 2, 4, 6, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 4, 5, 6, 3]));
        inner_8.insert((17, 0), (vec![0, 1, 3, 4, 5, 6, 8, 9], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![5, 4, 6, 6, 5, 2]));
        inner_8.insert((18, 1), (vec![0, 1, 2, 3, 5, 6, 8, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![5, 4, 6, 5, 5, 3]));
        inner_8.insert((18, -1), (vec![0, 1, 3, 4, 6, 7, 8, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![5, 4, 6, 5, 5, 3]));
        inner_8.insert((19, 1), (vec![0, 1, 2, 4, 5, 6, 8, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![5, 4, 5, 7, 5, 2]));
        inner_8.insert((19, -1), (vec![0, 1, 3, 4, 5, 7, 8, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![5, 4, 5, 7, 5, 2]));
        inner_8.insert((20, 0), (vec![0, 1, 2, 4, 5, 7, 8, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![5, 4, 5, 6, 6, 2]));
        inner_8.insert((21, 0), (vec![0, 1, 2, 3, 4, 6, 8, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![4, 7, 4, 6, 4, 3]));
        inner_8.insert((22, 1), (vec![0, 1, 2, 3, 5, 6, 8, 10], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 6, 5, 5, 6, 2]));
        inner_8.insert((22, -1), (vec![0, 1, 2, 3, 5, 7, 9, 10], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 6, 5, 5, 6, 2]));
        inner_8.insert((23, 0), (vec![0, 1, 2, 3, 5, 7, 8, 10], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![4, 6, 5, 4, 7, 2]));
        inner_8.insert((24, 0), (vec![0, 1, 2, 4, 5, 6, 8, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![4, 6, 4, 7, 4, 3]));
        inner_8.insert((25, 0), (vec![0, 1, 2, 4, 6, 7, 8, 10], vec![2, 2, 2, 2, 0, 0, 0, 0], vec![4, 6, 4, 6, 4, 4]));
        inner_8.insert((26, 0), (vec![0, 1, 2, 4, 5, 7, 9, 10], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![4, 5, 6, 5, 6, 2]));
        inner_8.insert((27, 1), (vec![0, 1, 2, 4, 5, 7, 8, 10], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 5, 6, 5, 5, 3]));
        inner_8.insert((27, -1), (vec![0, 1, 2, 4, 6, 7, 9, 10], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![4, 5, 6, 5, 5, 3]));
        inner_8.insert((28, 0), (vec![0, 1, 3, 4, 6, 7, 9, 10], vec![4, 4, 4, 4, 0, 0, 0, 0], vec![4, 4, 8, 4, 4, 4]));
        inner_8.insert((29, 1), (vec![0, 1, 2, 3, 5, 6, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 5, 5, 5, 3]));
        inner_8.insert((29, -1), (vec![0, 2, 3, 4, 6, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![5, 5, 5, 5, 5, 3]));
        outer.insert(8, inner_8);
        // Cardinality 9 nonachord
        let mut inner_9 = HashMap::new();
        inner_9.insert((1, 0), (vec![0, 1, 2, 3, 4, 5, 6, 7, 8], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![8, 7, 6, 6, 6, 3]));
        inner_9.insert((2, 1), (vec![0, 1, 2, 3, 4, 5, 6, 7, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![7, 7, 7, 6, 6, 3]));
        inner_9.insert((2, -1), (vec![0, 2, 3, 4, 5, 6, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![7, 7, 7, 6, 6, 3]));
        inner_9.insert((3, 1), (vec![0, 1, 2, 3, 4, 5, 6, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![7, 6, 7, 7, 6, 3]));
        inner_9.insert((3, -1), (vec![0, 1, 3, 4, 5, 6, 7, 8, 9], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![7, 6, 7, 7, 6, 3]));
        inner_9.insert((4, 1), (vec![0, 1, 2, 3, 4, 5, 7, 8, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![7, 6, 6, 7, 7, 3]));
        inner_9.insert((4, -1), (vec![0, 1, 2, 4, 5, 6, 7, 8, 9], vec![1, 0, 1, 0, 0, 0, 0, 0], vec![7, 6, 6, 7, 7, 3]));
        inner_9.insert((5, 1), (vec![0, 1, 2, 3, 4, 6, 7, 8, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![7, 6, 6, 6, 7, 4]));
        inner_9.insert((5, -1), (vec![0, 1, 2, 3, 5, 6, 7, 8, 9], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![7, 6, 6, 6, 7, 4]));
        inner_9.insert((6, 0), (vec![0, 1, 2, 3, 4, 5, 6, 8, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![6, 8, 6, 7, 6, 3]));
        inner_9.insert((7, 1), (vec![0, 1, 2, 3, 4, 5, 7, 8, 10], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 7, 7, 6, 7, 3]));
        inner_9.insert((7, -1), (vec![0, 1, 2, 3, 4, 5, 7, 9, 10], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 7, 7, 6, 7, 3]));
        inner_9.insert((8, 1), (vec![0, 1, 2, 3, 4, 6, 7, 8, 10], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![6, 7, 6, 7, 6, 4]));
        inner_9.insert((8, -1), (vec![0, 1, 2, 3, 4, 6, 8, 9, 10], vec![1, 0, 0, 1, 0, 0, 0, 0], vec![6, 7, 6, 7, 6, 4]));
        inner_9.insert((9, 0), (vec![0, 1, 2, 3, 5, 6, 7, 8, 10], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![6, 7, 6, 6, 8, 3]));
        inner_9.insert((10, 0), (vec![0, 1, 2, 3, 4, 6, 7, 9, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![6, 6, 8, 6, 6, 4]));
        inner_9.insert((11, 1), (vec![0, 1, 2, 3, 5, 6, 7, 9, 10], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 6, 7, 7, 7, 3]));
        inner_9.insert((11, -1), (vec![0, 1, 2, 3, 5, 6, 8, 9, 10], vec![1, 0, 0, 0, 0, 0, 0, 0], vec![6, 6, 7, 7, 7, 3]));
        inner_9.insert((12, 0), (vec![0, 1, 2, 4, 5, 6, 8, 9, 10], vec![3, 3, 3, 3, 0, 0, 0, 0], vec![6, 6, 6, 9, 6, 3]));
        outer.insert(9, inner_9);
        // Cardinality 10 decachord
        let mut inner_10 = HashMap::new();
        inner_10.insert((1, 0), (vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![9, 8, 8, 8, 8, 4]));
        inner_10.insert((2, 0), (vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![8, 9, 8, 8, 8, 4]));
        inner_10.insert((3, 0), (vec![0, 1, 2, 3, 4, 5, 6, 7, 9, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![8, 8, 9, 8, 8, 4]));
        inner_10.insert((4, 0), (vec![0, 1, 2, 3, 4, 5, 6, 8, 9, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![8, 8, 8, 9, 8, 4]));
        inner_10.insert((5, 0), (vec![0, 1, 2, 3, 4, 5, 7, 8, 9, 10], vec![1, 1, 0, 0, 0, 0, 0, 0], vec![8, 8, 8, 8, 9, 4]));
        inner_10.insert((6, 0), (vec![0, 1, 2, 3, 4, 6, 7, 8, 9, 10], vec![2, 2, 2, 2, 0, 0, 0, 0], vec![8, 8, 8, 8, 8, 5]));
        outer.insert(10, inner_10);
        // Cardinality 11 undecachord
        let mut inner_11 = HashMap::new();
        inner_11.insert((1, 0), (vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![1, 1, 1, 1, 0, 0, 0, 0], vec![10, 10, 10, 10, 10, 5]));
        outer.insert(11, inner_11);
        // Cardinality 12 duodecachord
        let mut inner_12 = HashMap::new();
        inner_12.insert((1, 0), (vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], vec![12, 12, 12, 12, 0, 0, 0, 0], vec![12, 12, 12, 12, 12, 6]));
        outer.insert(12, inner_12);
        outer
    };

    pub(crate) static ref MAXIMUM_INDEX_NUMBER_WITHOUT_INVERSION_EQUIVALENCE: HashMap<u8, u8> = {        let mut m = HashMap::new();
        m.insert(0, 1);
        m.insert(1, 1);
        m.insert(2, 6);
        m.insert(3, 19);
        m.insert(4, 43);
        m.insert(5, 66);
        m.insert(6, 80);
        m.insert(7, 66);
        m.insert(8, 43);
        m.insert(9, 19);
        m.insert(10, 6);
        m.insert(11, 1);
        m.insert(12, 1);
        m
    };

    pub(crate) static ref MAXIMUM_INDEX_NUMBER_WITH_INVERSION_EQUIVALENCE: HashMap<u8, u8> = {
        let mut m = HashMap::new();
        m.insert(0, 1);
        m.insert(1, 1);
        m.insert(2, 6);
        m.insert(3, 12);
        m.insert(4, 29);
        m.insert(5, 38);
        m.insert(6, 50);
        m.insert(7, 38);
        m.insert(8, 29);
        m.insert(9, 12);
        m.insert(10, 6);
        m.insert(11, 1);
        m.insert(12, 1);
        m
    };

    pub(crate) static ref FORTE_NUMBER_WITH_INVERSION_TO_INDEX: HashMap<(u8, u8, i8), u8> = {
        let mut m = HashMap::new();
        m.insert((1, 1, 0), 1);
        m.insert((2, 1, 0), 1);
        m.insert((2, 2, 0), 2);
        m.insert((2, 3, 0), 3);
        m.insert((2, 4, 0), 4);
        m.insert((2, 5, 0), 5);
        m.insert((2, 6, 0), 6);
        m.insert((3, 1, 0), 1);
        m.insert((3, 2, 1), 2);
        m.insert((3, 2, -1), 3);
        m.insert((3, 3, 1), 4);
        m.insert((3, 3, -1), 5);
        m.insert((3, 4, 1), 6);
        m.insert((3, 4, -1), 7);
        m.insert((3, 5, 1), 8);
        m.insert((3, 5, -1), 9);
        m.insert((3, 6, 0), 10);
        m.insert((3, 7, 1), 11);
        m.insert((3, 7, -1), 12);
        m.insert((3, 8, 1), 13);
        m.insert((3, 8, -1), 14);
        m.insert((3, 9, 0), 15);
        m.insert((3, 10, 0), 16);
        m.insert((3, 11, 1), 17);
        m.insert((3, 11, -1), 18);
        m.insert((3, 12, 0), 19);
        m.insert((4, 1, 0), 1);
        m.insert((4, 2, 1), 2);
        m.insert((4, 2, -1), 3);
        m.insert((4, 3, 0), 4);
        m.insert((4, 4, 1), 5);
        m.insert((4, 4, -1), 6);
        m.insert((4, 5, 1), 7);
        m.insert((4, 5, -1), 8);
        m.insert((4, 6, 0), 9);
        m.insert((4, 7, 0), 10);
        m.insert((4, 8, 0), 11);
        m.insert((4, 9, 0), 12);
        m.insert((4, 10, 0), 13);
        m.insert((4, 11, 1), 14);
        m.insert((4, 11, -1), 15);
        m.insert((4, 12, 1), 16);
        m.insert((4, 12, -1), 17);
        m.insert((4, 13, 1), 18);
        m.insert((4, 13, -1), 19);
        m.insert((4, 14, 1), 20);
        m.insert((4, 14, -1), 21);
        m.insert((4, 15, 1), 22);
        m.insert((4, 15, -1), 23);
        m.insert((4, 16, 1), 24);
        m.insert((4, 16, -1), 25);
        m.insert((4, 17, 0), 26);
        m.insert((4, 18, 1), 27);
        m.insert((4, 18, -1), 28);
        m.insert((4, 19, 1), 29);
        m.insert((4, 19, -1), 30);
        m.insert((4, 20, 0), 31);
        m.insert((4, 21, 0), 32);
        m.insert((4, 22, 1), 33);
        m.insert((4, 22, -1), 34);
        m.insert((4, 23, 0), 35);
        m.insert((4, 24, 0), 36);
        m.insert((4, 25, 0), 37);
        m.insert((4, 26, 0), 38);
        m.insert((4, 27, 1), 39);
        m.insert((4, 27, -1), 40);
        m.insert((4, 28, 0), 41);
        m.insert((4, 29, 1), 42);
        m.insert((4, 29, -1), 43);
        m.insert((5, 1, 0), 1);
        m.insert((5, 2, 1), 2);
        m.insert((5, 2, -1), 3);
        m.insert((5, 3, 1), 4);
        m.insert((5, 3, -1), 5);
        m.insert((5, 4, 1), 6);
        m.insert((5, 4, -1), 7);
        m.insert((5, 5, 1), 8);
        m.insert((5, 5, -1), 9);
        m.insert((5, 6, 1), 10);
        m.insert((5, 6, -1), 11);
        m.insert((5, 7, 1), 12);
        m.insert((5, 7, -1), 13);
        m.insert((5, 8, 0), 14);
        m.insert((5, 9, 1), 15);
        m.insert((5, 9, -1), 16);
        m.insert((5, 10, 1), 17);
        m.insert((5, 10, -1), 18);
        m.insert((5, 11, 1), 19);
        m.insert((5, 11, -1), 20);
        m.insert((5, 12, 0), 21);
        m.insert((5, 13, 1), 22);
        m.insert((5, 13, -1), 23);
        m.insert((5, 14, 1), 24);
        m.insert((5, 14, -1), 25);
        m.insert((5, 15, 0), 26);
        m.insert((5, 16, 1), 27);
        m.insert((5, 16, -1), 28);
        m.insert((5, 17, 0), 29);
        m.insert((5, 18, 1), 30);
        m.insert((5, 18, -1), 31);
        m.insert((5, 19, 1), 32);
        m.insert((5, 19, -1), 33);
        m.insert((5, 20, 1), 34);
        m.insert((5, 20, -1), 35);
        m.insert((5, 21, 1), 36);
        m.insert((5, 21, -1), 37);
        m.insert((5, 22, 0), 38);
        m.insert((5, 23, 1), 39);
        m.insert((5, 23, -1), 40);
        m.insert((5, 24, 1), 41);
        m.insert((5, 24, -1), 42);
        m.insert((5, 25, 1), 43);
        m.insert((5, 25, -1), 44);
        m.insert((5, 26, 1), 45);
        m.insert((5, 26, -1), 46);
        m.insert((5, 27, 1), 47);
        m.insert((5, 27, -1), 48);
        m.insert((5, 28, 1), 49);
        m.insert((5, 28, -1), 50);
        m.insert((5, 29, 1), 51);
        m.insert((5, 29, -1), 52);
        m.insert((5, 30, 1), 53);
        m.insert((5, 30, -1), 54);
        m.insert((5, 31, 1), 55);
        m.insert((5, 31, -1), 56);
        m.insert((5, 32, 1), 57);
        m.insert((5, 32, -1), 58);
        m.insert((5, 33, 0), 59);
        m.insert((5, 34, 0), 60);
        m.insert((5, 35, 0), 61);
        m.insert((5, 36, 1), 62);
        m.insert((5, 36, -1), 63);
        m.insert((5, 37, 0), 64);
        m.insert((5, 38, 1), 65);
        m.insert((5, 38, -1), 66);
        m.insert((6, 1, 0), 1);
        m.insert((6, 2, 1), 2);
        m.insert((6, 2, -1), 3);
        m.insert((6, 3, 1), 4);
        m.insert((6, 3, -1), 5);
        m.insert((6, 4, 0), 6);
        m.insert((6, 5, 1), 7);
        m.insert((6, 5, -1), 8);
        m.insert((6, 6, 0), 9);
        m.insert((6, 7, 0), 10);
        m.insert((6, 8, 0), 11);
        m.insert((6, 9, 1), 12);
        m.insert((6, 9, -1), 13);
        m.insert((6, 10, 1), 14);
        m.insert((6, 10, -1), 15);
        m.insert((6, 11, 1), 16);
        m.insert((6, 11, -1), 17);
        m.insert((6, 12, 1), 18);
        m.insert((6, 12, -1), 19);
        m.insert((6, 13, 0), 20);
        m.insert((6, 14, 1), 21);
        m.insert((6, 14, -1), 22);
        m.insert((6, 15, 1), 23);
        m.insert((6, 15, -1), 24);
        m.insert((6, 16, 1), 25);
        m.insert((6, 16, -1), 26);
        m.insert((6, 17, 1), 27);
        m.insert((6, 17, -1), 28);
        m.insert((6, 18, 1), 29);
        m.insert((6, 18, -1), 30);
        m.insert((6, 19, 1), 31);
        m.insert((6, 19, -1), 32);
        m.insert((6, 20, 0), 33);
        m.insert((6, 21, 1), 34);
        m.insert((6, 21, -1), 35);
        m.insert((6, 22, 1), 36);
        m.insert((6, 22, -1), 37);
        m.insert((6, 23, 0), 38);
        m.insert((6, 24, 1), 39);
        m.insert((6, 24, -1), 40);
        m.insert((6, 25, 1), 41);
        m.insert((6, 25, -1), 42);
        m.insert((6, 26, 0), 43);
        m.insert((6, 27, 1), 44);
        m.insert((6, 27, -1), 45);
        m.insert((6, 28, 0), 46);
        m.insert((6, 29, 0), 47);
        m.insert((6, 30, 1), 48);
        m.insert((6, 30, -1), 49);
        m.insert((6, 31, 1), 50);
        m.insert((6, 31, -1), 51);
        m.insert((6, 32, 0), 52);
        m.insert((6, 33, 1), 53);
        m.insert((6, 33, -1), 54);
        m.insert((6, 34, 1), 55);
        m.insert((6, 34, -1), 56);
        m.insert((6, 35, 0), 57);
        m.insert((6, 36, 1), 58);
        m.insert((6, 36, -1), 59);
        m.insert((6, 37, 0), 60);
        m.insert((6, 38, 0), 61);
        m.insert((6, 39, 1), 62);
        m.insert((6, 39, -1), 63);
        m.insert((6, 40, 1), 64);
        m.insert((6, 40, -1), 65);
        m.insert((6, 41, 1), 66);
        m.insert((6, 41, -1), 67);
        m.insert((6, 42, 0), 68);
        m.insert((6, 43, 1), 69);
        m.insert((6, 43, -1), 70);
        m.insert((6, 44, 1), 71);
        m.insert((6, 44, -1), 72);
        m.insert((6, 45, 0), 73);
        m.insert((6, 46, 1), 74);
        m.insert((6, 46, -1), 75);
        m.insert((6, 47, 1), 76);
        m.insert((6, 47, -1), 77);
        m.insert((6, 48, 0), 78);
        m.insert((6, 49, 0), 79);
        m.insert((6, 50, 0), 80);
        m.insert((7, 1, 0), 1);
        m.insert((7, 2, 1), 2);
        m.insert((7, 2, -1), 3);
        m.insert((7, 3, 1), 4);
        m.insert((7, 3, -1), 5);
        m.insert((7, 4, 1), 6);
        m.insert((7, 4, -1), 7);
        m.insert((7, 5, 1), 8);
        m.insert((7, 5, -1), 9);
        m.insert((7, 6, 1), 10);
        m.insert((7, 6, -1), 11);
        m.insert((7, 7, 1), 12);
        m.insert((7, 7, -1), 13);
        m.insert((7, 8, 0), 14);
        m.insert((7, 9, 1), 15);
        m.insert((7, 9, -1), 16);
        m.insert((7, 10, 1), 17);
        m.insert((7, 10, -1), 18);
        m.insert((7, 11, 1), 19);
        m.insert((7, 11, -1), 20);
        m.insert((7, 12, 0), 21);
        m.insert((7, 13, 1), 22);
        m.insert((7, 13, -1), 23);
        m.insert((7, 14, 1), 24);
        m.insert((7, 14, -1), 25);
        m.insert((7, 15, 0), 26);
        m.insert((7, 16, 1), 27);
        m.insert((7, 16, -1), 28);
        m.insert((7, 17, 0), 29);
        m.insert((7, 18, 1), 30);
        m.insert((7, 18, -1), 31);
        m.insert((7, 19, 1), 32);
        m.insert((7, 19, -1), 33);
        m.insert((7, 20, 1), 34);
        m.insert((7, 20, -1), 35);
        m.insert((7, 21, 1), 36);
        m.insert((7, 21, -1), 37);
        m.insert((7, 22, 0), 38);
        m.insert((7, 23, 1), 39);
        m.insert((7, 23, -1), 40);
        m.insert((7, 24, 1), 41);
        m.insert((7, 24, -1), 42);
        m.insert((7, 25, 1), 43);
        m.insert((7, 25, -1), 44);
        m.insert((7, 26, 1), 45);
        m.insert((7, 26, -1), 46);
        m.insert((7, 27, 1), 47);
        m.insert((7, 27, -1), 48);
        m.insert((7, 28, 1), 49);
        m.insert((7, 28, -1), 50);
        m.insert((7, 29, 1), 51);
        m.insert((7, 29, -1), 52);
        m.insert((7, 30, 1), 53);
        m.insert((7, 30, -1), 54);
        m.insert((7, 31, 1), 55);
        m.insert((7, 31, -1), 56);
        m.insert((7, 32, 1), 57);
        m.insert((7, 32, -1), 58);
        m.insert((7, 33, 0), 59);
        m.insert((7, 34, 0), 60);
        m.insert((7, 35, 0), 61);
        m.insert((7, 36, 1), 62);
        m.insert((7, 36, -1), 63);
        m.insert((7, 37, 0), 64);
        m.insert((7, 38, 1), 65);
        m.insert((7, 38, -1), 66);
        m.insert((8, 1, 0), 1);
        m.insert((8, 2, 1), 2);
        m.insert((8, 2, -1), 3);
        m.insert((8, 3, 0), 4);
        m.insert((8, 4, 1), 5);
        m.insert((8, 4, -1), 6);
        m.insert((8, 5, 1), 7);
        m.insert((8, 5, -1), 8);
        m.insert((8, 6, 0), 9);
        m.insert((8, 7, 0), 10);
        m.insert((8, 8, 0), 11);
        m.insert((8, 9, 0), 12);
        m.insert((8, 10, 0), 13);
        m.insert((8, 11, 1), 14);
        m.insert((8, 11, -1), 15);
        m.insert((8, 12, 1), 16);
        m.insert((8, 12, -1), 17);
        m.insert((8, 13, 1), 18);
        m.insert((8, 13, -1), 19);
        m.insert((8, 14, 1), 20);
        m.insert((8, 14, -1), 21);
        m.insert((8, 15, 1), 22);
        m.insert((8, 15, -1), 23);
        m.insert((8, 16, 1), 24);
        m.insert((8, 16, -1), 25);
        m.insert((8, 17, 0), 26);
        m.insert((8, 18, 1), 27);
        m.insert((8, 18, -1), 28);
        m.insert((8, 19, 1), 29);
        m.insert((8, 19, -1), 30);
        m.insert((8, 20, 0), 31);
        m.insert((8, 21, 0), 32);
        m.insert((8, 22, 1), 33);
        m.insert((8, 22, -1), 34);
        m.insert((8, 23, 0), 35);
        m.insert((8, 24, 0), 36);
        m.insert((8, 25, 0), 37);
        m.insert((8, 26, 0), 38);
        m.insert((8, 27, 1), 39);
        m.insert((8, 27, -1), 40);
        m.insert((8, 28, 0), 41);
        m.insert((8, 29, 1), 42);
        m.insert((8, 29, -1), 43);
        m.insert((9, 1, 0), 1);
        m.insert((9, 2, 1), 2);
        m.insert((9, 2, -1), 3);
        m.insert((9, 3, 1), 4);
        m.insert((9, 3, -1), 5);
        m.insert((9, 4, 1), 6);
        m.insert((9, 4, -1), 7);
        m.insert((9, 5, 1), 8);
        m.insert((9, 5, -1), 9);
        m.insert((9, 6, 0), 10);
        m.insert((9, 7, 1), 11);
        m.insert((9, 7, -1), 12);
        m.insert((9, 8, 1), 13);
        m.insert((9, 8, -1), 14);
        m.insert((9, 9, 0), 15);
        m.insert((9, 10, 0), 16);
        m.insert((9, 11, 1), 17);
        m.insert((9, 11, -1), 18);
        m.insert((9, 12, 0), 19);
        m.insert((10, 1, 0), 1);
        m.insert((10, 2, 0), 2);
        m.insert((10, 3, 0), 3);
        m.insert((10, 4, 0), 4);
        m.insert((10, 5, 0), 5);
        m.insert((10, 6, 0), 6);
        m.insert((11, 1, 0), 1);
        m.insert((12, 1, 0), 1);
        m
    };

    pub(crate) static ref TN_INDEX_TO_CHORD_INFO: HashMap<(u8, u8, i8), Option<Vec<&'static str>>> = {
        let mut m = HashMap::new();
        m.insert((1, 1, 0), Some(vec!["unison", "monad", "singleton"]));
        m.insert((2, 1, 0), Some(vec!["interval class 1", "minor second", "m2", "half step", "semitone"]));
        m.insert((2, 2, 0), Some(vec!["interval class 2", "major second", "M2", "whole step", "whole tone"]));
        m.insert((2, 3, 0), Some(vec!["interval class 3", "minor third", "m3"]));
        m.insert((2, 4, 0), Some(vec!["interval class 4", "major third", "M3"]));
        m.insert((2, 5, 0), Some(vec!["interval class 5", "perfect fourth", "P4"]));
        m.insert((2, 6, 0), Some(vec!["tritone", "diminished fifth", "augmented fourth"]));
        m.insert((3, 1, 0), Some(vec!["chromatic trimirror"]));
        m.insert((3, 2, 1), Some(vec!["phrygian trichord"]));
        m.insert((3, 2, -1), Some(vec!["minor trichord"]));
        m.insert((3, 3, 1), Some(vec!["major-minor trichord"]));
        m.insert((3, 3, -1), Some(vec!["major-minor trichord"]));
        m.insert((3, 4, 1), Some(vec!["incomplete major-seventh chord"]));
        m.insert((3, 4, -1), Some(vec!["incomplete major-seventh chord"]));
        m.insert((3, 5, 1), Some(vec!["tritone-fourth"]));
        m.insert((3, 5, -1), Some(vec!["tritone-fourth"]));
        m.insert((3, 6, 0), Some(vec!["whole-tone trichord"]));
        m.insert((3, 7, 1), Some(vec!["incomplete minor-seventh chord"]));
        m.insert((3, 7, -1), Some(vec!["incomplete dominant-seventh chord"]));
        m.insert((3, 8, 1), Some(vec!["incomplete dominant-seventh chord", "Italian augmented sixth chord"]));
        m.insert((3, 8, -1), Some(vec!["incomplete half-diminished seventh chord"]));
        m.insert((3, 9, 0), Some(vec!["quartal trichord"]));
        m.insert((3, 10, 0), Some(vec!["diminished triad"]));
        m.insert((3, 11, 1), Some(vec!["minor triad"]));
        m.insert((3, 11, -1), Some(vec!["major triad"]));
        m.insert((3, 12, 0), Some(vec!["augmented triad", "equal 3-part octave division"]));
        m.insert((4, 1, 0), Some(vec!["chromatic tetramirror", "BACH"]));
        m.insert((4, 2, 1), Some(vec!["major-second tetracluster"]));
        m.insert((4, 2, -1), Some(vec!["major-second tetracluster"]));
        m.insert((4, 3, 0), Some(vec!["alternating tetramirror"]));
        m.insert((4, 4, 1), Some(vec!["minor third tetracluster"]));
        m.insert((4, 4, -1), Some(vec!["minor third tetracluster"]));
        m.insert((4, 5, 1), Some(vec!["major third tetracluster"]));
        m.insert((4, 5, -1), Some(vec!["major third tetracluster"]));
        m.insert((4, 6, 0), Some(vec!["perfect fourth tetramirror"]));
        m.insert((4, 7, 0), Some(vec!["Arabian tetramirror"]));
        m.insert((4, 8, 0), Some(vec!["double-fourth tetramirror"]));
        m.insert((4, 9, 0), Some(vec!["double tritone tetramirror"]));
        m.insert((4, 10, 0), Some(vec!["minor tetramirror"]));
        m.insert((4, 11, 1), Some(vec!["phrygian tetrachord"]));
        m.insert((4, 11, -1), Some(vec!["lydian tetrachord", "major tetrachord"]));
        m.insert((4, 12, 1), Some(vec!["harmonic minor tetrachord"]));
        m.insert((4, 12, -1), Some(vec!["major-third diminished tetrachord"]));
        m.insert((4, 13, 1), Some(vec!["minor-second diminished tetrachord"]));
        m.insert((4, 13, -1), Some(vec!["perfect-fourth diminished tetrachord"]));
        m.insert((4, 14, 1), Some(vec!["major-second minor tetrachord"]));
        m.insert((4, 14, -1), Some(vec!["perfect-fourth major tetrachord"]));
        m.insert((4, 15, 1), Some(vec!["all-interval tetrachord"]));
        m.insert((4, 15, -1), Some(vec!["all-interval tetrachord"]));
        m.insert((4, 16, 1), Some(vec!["minor-second quartal tetrachord"]));
        m.insert((4, 16, -1), Some(vec!["tritone quartal tetrachord"]));
        m.insert((4, 17, 0), Some(vec!["major-minor tetramirror"]));
        m.insert((4, 18, 1), Some(vec!["major-diminished tetrachord"]));
        m.insert((4, 18, -1), Some(vec!["minor-diminished tetrachord"]));
        m.insert((4, 19, 1), Some(vec!["minor-augmented tetrachord"]));
        m.insert((4, 19, -1), Some(vec!["augmented major tetrachord"]));
        m.insert((4, 20, 0), Some(vec!["major seventh chord"]));
        m.insert((4, 21, 0), Some(vec!["whole-tone tetramirror"]));
        m.insert((4, 22, 1), Some(vec!["major-second major tetrachord"]));
        m.insert((4, 22, -1), Some(vec!["perfect-fourth minor tetrachord"]));
        m.insert((4, 23, 0), Some(vec!["quartal tetramirror"]));
        m.insert((4, 24, 0), Some(vec!["augmented seventh chord"]));
        m.insert((4, 25, 0), Some(vec!["Messiaen's truncated mode 6", "French augmented sixth chord"]));
        m.insert((4, 26, 0), Some(vec!["minor seventh chord"]));
        m.insert((4, 27, 1), Some(vec!["half-diminished seventh chord"]));
        m.insert((4, 27, -1), Some(vec!["dominant seventh chord", "major minor seventh chord", "German augmented sixth chord", "Swiss augmented sixth chord"]));
        m.insert((4, 28, 0), Some(vec!["diminished seventh chord", "equal 4-part octave division"]));
        m.insert((4, 29, 1), Some(vec!["all-interval tetrachord"]));
        m.insert((4, 29, -1), Some(vec!["all-interval tetrachord"]));
        m.insert((5, 1, 0), Some(vec!["chromatic pentamirror"]));
        m.insert((5, 2, 1), Some(vec!["major-second pentacluster"]));
        m.insert((5, 2, -1), Some(vec!["major-second pentacluster"]));
        m.insert((5, 3, 1), Some(vec!["minor-second major pentachord"]));
        m.insert((5, 3, -1), Some(vec!["Spanish pentacluster"]));
        m.insert((5, 4, 1), Some(vec!["blues pentacluster"]));
        m.insert((5, 4, -1), Some(vec!["minor-third pentacluster"]));
        m.insert((5, 5, 1), Some(vec!["major-third pentacluster"]));
        m.insert((5, 5, -1), Some(vec!["major-third pentacluster"]));
        m.insert((5, 6, 1), Some(vec!["Asian pentacluster", "quasi raga Megharanji"]));
        m.insert((5, 6, -1), Some(vec!["Asian pentacluster"]));
        m.insert((5, 7, 1), Some(vec!["double pentacluster", "quasi raga Nabhomani"]));
        m.insert((5, 7, -1), Some(vec!["double pentacluster"]));
        m.insert((5, 8, 0), Some(vec!["tritone-symmetric pentamirror"]));
        m.insert((5, 9, 1), Some(vec!["tritone-expanding pentachord"]));
        m.insert((5, 9, -1), Some(vec!["tritone-contracting pentachord"]));
        m.insert((5, 10, 1), Some(vec!["alternating pentachord"]));
        m.insert((5, 10, -1), Some(vec!["alternating pentachord"]));
        m.insert((5, 11, 1), Some(vec!["center-cluster pentachord"]));
        m.insert((5, 11, -1), Some(vec!["center-cluster pentachord"]));
        m.insert((5, 12, 0), Some(vec!["locrian pentachord"]));
        m.insert((5, 13, 1), Some(vec!["augmented pentacluster"]));
        m.insert((5, 13, -1), Some(vec!["augmented pentacluster"]));
        m.insert((5, 14, 1), Some(vec!["double-seconds triple-fourth pentachord"]));
        m.insert((5, 14, -1), Some(vec!["double-seconds triple-fourth pentachord"]));
        m.insert((5, 15, 0), Some(vec!["asymmetric pentamirror"]));
        m.insert((5, 16, 1), Some(vec!["major-minor-diminished pentachord"]));
        m.insert((5, 16, -1), Some(vec!["major-minor diminished pentachord"]));
        m.insert((5, 17, 0), Some(vec!["minor-major ninth chord"]));
        m.insert((5, 18, 1), Some(vec!["Roma (Gypsy) pentachord"]));
        m.insert((5, 18, -1), Some(vec!["Roma (Gypsy) pentachord"]));
        m.insert((5, 19, 1), Some(vec!["Javanese pentachord"]));
        m.insert((5, 19, -1), Some(vec!["Balinese pentachord"]));
        m.insert((5, 20, 1), Some(vec!["Balinese Pelog pentatonic", "quasi raga Bhupala", "quasi raga Bibhas"]));
        m.insert((5, 20, -1), Some(vec!["Hirajoshi pentatonic", "Iwato", "Sakura", "quasi raga Saveri"]));
        m.insert((5, 21, 1), Some(vec!["major-augmented ninth chord", "Syrian pentatonic", "quasi raga Megharanji"]));
        m.insert((5, 21, -1), Some(vec!["Lebanese pentachord", "augmented-minor chord"]));
        m.insert((5, 22, 0), Some(vec!["Persian pentamirror", "quasi raga Ramkali"]));
        m.insert((5, 23, 1), Some(vec!["dorian pentachord", "minor pentachord"]));
        m.insert((5, 23, -1), Some(vec!["major pentachord"]));
        m.insert((5, 24, 1), Some(vec!["phrygian pentachord"]));
        m.insert((5, 24, -1), Some(vec!["lydian pentachord"]));
        m.insert((5, 25, 1), Some(vec!["diminished-major ninth chord"]));
        m.insert((5, 25, -1), Some(vec!["minor-diminished ninth chord"]));
        m.insert((5, 26, 1), Some(vec!["diminished-augmented ninth chord"]));
        m.insert((5, 26, -1), Some(vec!["augmented-diminished ninth chord"]));
        m.insert((5, 27, 1), Some(vec!["major-ninth chord"]));
        m.insert((5, 27, -1), Some(vec!["minor-ninth chord"]));
        m.insert((5, 28, 1), Some(vec!["augmented-sixth pentachord"]));
        m.insert((5, 28, -1), Some(vec!["Javanese pentatonic", "augmented-sixth pentachord"]));
        m.insert((5, 29, 1), Some(vec!["Kumoi pentachord"]));
        m.insert((5, 29, -1), Some(vec!["Kumoi pentachord"]));
        m.insert((5, 30, 1), Some(vec!["enigmatic pentachord"]));
        m.insert((5, 30, -1), Some(vec!["enigmatic pentachord", "altered pentatonic"]));
        m.insert((5, 31, 1), Some(vec!["diminished minor-ninth chord"]));
        m.insert((5, 31, -1), Some(vec!["flat-ninth pentachord", "quasi raga Ranjaniraga"]));
        m.insert((5, 32, 1), Some(vec!["Neapolitan pentachord"]));
        m.insert((5, 32, -1), Some(vec!["Neapolitan pentachord"]));
        m.insert((5, 33, 0), Some(vec!["whole-tone pentachord"]));
        m.insert((5, 34, 0), Some(vec!["dominant-ninth", "major-minor", "Prometheus pentamirror", "dominant pentatonic"]));
        m.insert((5, 35, 0), Some(vec!["major pentatonic", "black-key scale", "blues pentatonic", "slendro", "quartal pentamirror"]));
        m.insert((5, 36, 1), Some(vec!["major-seventh pentacluster"]));
        m.insert((5, 36, -1), Some(vec!["minor-seventh pentacluster"]));
        m.insert((5, 37, 0), Some(vec!["center-cluster pentamirror"]));
        m.insert((5, 38, 1), Some(vec!["diminished pentacluster"]));
        m.insert((5, 38, -1), Some(vec!["diminished pentacluster"]));
        m.insert((6, 1, 0), Some(vec!["A all combinatorial (P6, I11, RI5, RI11)", "chromatic hexamirror", "first-order all-combinatorial"]));
        m.insert((6, 2, 1), Some(vec!["combinatorial I (I11)"]));
        m.insert((6, 2, -1), Some(vec!["combinatorial I (I1)"]));
        m.insert((6, 3, 1), None);
        m.insert((6, 3, -1), None);
        m.insert((6, 4, 0), Some(vec!["combinatorial RI (RI6)"]));
        m.insert((6, 5, 1), Some(vec!["combinatorial I (I11)"]));
        m.insert((6, 5, -1), Some(vec!["combinatorial I (I3)"]));
        m.insert((6, 6, 0), Some(vec!["double cluster hexamirror"]));
        m.insert((6, 7, 0), Some(vec!["B all combinatorial (P3, P9, I5, R6, R12, R8)", "Messiaen's mode 5", "second-order all combinatorial"]));
        m.insert((6, 8, 0), Some(vec!["D all combinatorial (P6, I1, RI7)"]));
        m.insert((6, 9, 1), Some(vec!["combinatorial I (I11)"]));
        m.insert((6, 9, -1), Some(vec!["combinatorial I (I3)"]));
        m.insert((6, 10, 1), None);
        m.insert((6, 10, -1), None);
        m.insert((6, 11, 1), None);
        m.insert((6, 11, -1), None);
        m.insert((6, 12, 1), None);
        m.insert((6, 12, -1), None);
        m.insert((6, 13, 0), Some(vec!["alternating hexamirror", "combinatorial I (I7)"]));
        m.insert((6, 14, 1), Some(vec!["combinatorial P (P6)"]));
        m.insert((6, 14, -1), Some(vec!["combinatorial P (P6)"]));
        m.insert((6, 15, 1), Some(vec!["combinatorial I (I11)"]));
        m.insert((6, 15, -1), Some(vec!["combinatorial I (I5)"]));
        m.insert((6, 16, 1), Some(vec!["combinatorial I (I3)"]));
        m.insert((6, 16, -1), Some(vec!["combinatorial I (I1)", "quasi raga Megha"]));
        m.insert((6, 17, 1), Some(vec!["all tri-chord hexachord"]));
        m.insert((6, 17, -1), Some(vec!["all tri-chord hexachord (inverted form)"]));
        m.insert((6, 18, 1), Some(vec!["combinatorial I (I11)"]));
        m.insert((6, 18, -1), Some(vec!["combinatorial I (I5)"]));
        m.insert((6, 19, 1), None);
        m.insert((6, 19, -1), None);
        m.insert((6, 20, 0), Some(vec!["E all combinatorial (P2, P6, P10, I3, I7, R4, R8, RI1, RI5, RI9)", "Messiaen's truncated mode 3", "Genus tertium", "third-order all combinatorial"]));
        m.insert((6, 21, 1), Some(vec!["combinatorial I (I1)"]));
        m.insert((6, 21, -1), Some(vec!["combinatorial I (I3)"]));
        m.insert((6, 22, 1), Some(vec!["combinatorial I (I11)"]));
        m.insert((6, 22, -1), Some(vec!["combinatorial I (I5)"]));
        m.insert((6, 23, 0), Some(vec!["combinatorial RI (RI8)", "super-locrian hexamirror"]));
        m.insert((6, 24, 1), None);
        m.insert((6, 24, -1), Some(vec!["melodic-minor hexachord"]));
        m.insert((6, 25, 1), Some(vec!["locrian hexachord"]));
        m.insert((6, 25, -1), Some(vec!["minor hexachord"]));
        m.insert((6, 26, 0), Some(vec!["phrygian hexamirror", "combinatorial RI (RI8)"]));
        m.insert((6, 27, 1), Some(vec!["combinatorial I (I11)"]));
        m.insert((6, 27, -1), Some(vec!["combinatorial I (I1)", "pyramid hexachord"]));
        m.insert((6, 28, 0), Some(vec!["double-phrygian hexachord", "combinatorial RI (RI6)"]));
        m.insert((6, 29, 0), Some(vec!["combinatorial RI (RI9)"]));
        m.insert((6, 30, 1), Some(vec!["Messiaen's truncated mode 2", "minor-bitonal hexachord", "combinatorial R (R6)", "combinatorial I (I1, I7)"]));
        m.insert((6, 30, -1), Some(vec!["Stravinsky's Petrushka-chord", "Messiaen's truncated mode 2", "major-bitonal hexachord", "combinatorial R (R6)", "combinatorial I (I1, I7)"]));
        m.insert((6, 31, 1), Some(vec!["combinatorial I (I7)"]));
        m.insert((6, 31, -1), Some(vec!["combinatorial I (I11)"]));
        m.insert((6, 32, 0), Some(vec!["Guidonian hexachord", "C all combinatorial (P6, I3, RI9)", "major hexamirror", "quartal hexamirror", "first-order all combinatorial"]));
        m.insert((6, 33, 1), Some(vec!["dorian hexachord", "combinatorial I (I6)"]));
        m.insert((6, 33, -1), Some(vec!["dominant-eleventh", "lydian hexachord", "combinatorial I (I1)"]));
        m.insert((6, 34, 1), Some(vec!["Scriabin's Mystic-chord", "Prometheus hexachord", "combinatorial I (I11)"]));
        m.insert((6, 34, -1), Some(vec!["augmented-eleventh", "harmonic hexachord", "combinatorial I (I7)"]));
        m.insert((6, 35, 0), Some(vec!["whole tone scale", "6 equal part division", "F all-combinatorial (P1, P3, P5, P7, P9, P11, I1, I3, I5, I7, I9, I11, R2, R4, R6, R8, R10, RI2, RI4, RI6, RI8, RI10)", "Messiaen's mode 1", "sixth-order all combinatorial"]));
        m.insert((6, 36, 1), None);
        m.insert((6, 36, -1), None);
        m.insert((6, 37, 0), Some(vec!["combinatorial RI (RI4)"]));
        m.insert((6, 38, 0), Some(vec!["combinatorial RI (RI3)"]));
        m.insert((6, 39, 1), None);
        m.insert((6, 39, -1), None);
        m.insert((6, 40, 1), None);
        m.insert((6, 40, -1), None);
        m.insert((6, 41, 1), None);
        m.insert((6, 41, -1), None);
        m.insert((6, 42, 0), Some(vec!["combinatorial RI (RI3)"]));
        m.insert((6, 43, 1), Some(vec!["complement of all tri-chord hexachord"]));
        m.insert((6, 43, -1), Some(vec!["complement of all-tri-chord hexachord (inverted form)"]));
        m.insert((6, 44, 1), Some(vec!["Schoenberg Anagram hexachord"]));
        m.insert((6, 44, -1), Some(vec!["quasi raga Bauli"]));
        m.insert((6, 45, 0), Some(vec!["combinatorial RI (RI6)"]));
        m.insert((6, 46, 1), None);
        m.insert((6, 46, -1), None);
        m.insert((6, 47, 1), None);
        m.insert((6, 47, -1), Some(vec!["blues scale"]));
        m.insert((6, 48, 0), Some(vec!["combinatorial RI (RI2)"]));
        m.insert((6, 49, 0), Some(vec!["combinatorial RI (RI4)", "Prometheus Neapolitan mode"]));
        m.insert((6, 50, 0), Some(vec!["combinatorial RI (RI1)"]));
        m.insert((7, 1, 0), Some(vec!["chromatic heptamirror"]));
        m.insert((7, 2, 1), None);
        m.insert((7, 2, -1), None);
        m.insert((7, 3, 1), None);
        m.insert((7, 3, -1), None);
        m.insert((7, 4, 1), None);
        m.insert((7, 4, -1), None);
        m.insert((7, 5, 1), None);
        m.insert((7, 5, -1), None);
        m.insert((7, 6, 1), None);
        m.insert((7, 6, -1), None);
        m.insert((7, 7, 1), None);
        m.insert((7, 7, -1), None);
        m.insert((7, 8, 0), None);
        m.insert((7, 9, 1), None);
        m.insert((7, 9, -1), None);
        m.insert((7, 10, 1), None);
        m.insert((7, 10, -1), None);
        m.insert((7, 11, 1), None);
        m.insert((7, 11, -1), None);
        m.insert((7, 12, 0), None);
        m.insert((7, 13, 1), None);
        m.insert((7, 13, -1), None);
        m.insert((7, 14, 1), None);
        m.insert((7, 14, -1), None);
        m.insert((7, 15, 0), None);
        m.insert((7, 16, 1), Some(vec!["Debussy's heptatonic"]));
        m.insert((7, 16, -1), None);
        m.insert((7, 17, 0), None);
        m.insert((7, 18, 1), None);
        m.insert((7, 18, -1), None);
        m.insert((7, 19, 1), None);
        m.insert((7, 19, -1), None);
        m.insert((7, 20, 1), Some(vec!["chromatic phrygian inverse"]));
        m.insert((7, 20, -1), Some(vec!["Greek chromatic", "chromatic mixolydian", "chromatic dorian", "quasi raga Pantuvarali", "mela Kanakangi"]));
        m.insert((7, 21, 1), None);
        m.insert((7, 21, -1), Some(vec!["Roma (Gypsy) hepatonic"]));
        m.insert((7, 22, 0), Some(vec!["double harmonic scale", "major Roma (Gypsy)", "Hungarian minor", "double harmonic scale", "quasi raga Mayamdavagaula"]));
        m.insert((7, 23, 1), None);
        m.insert((7, 23, -1), Some(vec!["tritone major heptachord"]));
        m.insert((7, 24, 1), None);
        m.insert((7, 24, -1), Some(vec!["mystic heptachord", "Enigmatic heptatonic"]));
        m.insert((7, 25, 1), None);
        m.insert((7, 25, -1), None);
        m.insert((7, 26, 1), None);
        m.insert((7, 26, -1), None);
        m.insert((7, 27, 1), None);
        m.insert((7, 27, -1), Some(vec!["modified blues"]));
        m.insert((7, 28, 1), None);
        m.insert((7, 28, -1), None);
        m.insert((7, 29, 1), None);
        m.insert((7, 29, -1), None);
        m.insert((7, 30, 1), Some(vec!["Neapolitan-minor mode"]));
        m.insert((7, 30, -1), None);
        m.insert((7, 31, 1), Some(vec!["alternating heptachord", "Hungarian major mode"]));
        m.insert((7, 31, -1), Some(vec!["diminished scale", "alternating heptachord"]));
        m.insert((7, 32, 1), Some(vec!["harmonic minor scale", "harmonic minor collection", "Spanish Roma (Gypsy)", "mela Kiravani"]));
        m.insert((7, 32, -1), Some(vec!["harmonic major scale (inverted)", "harmonic minor collection (inverted)", "mela Cakravana", "quasi raga Ahir Bhairav"]));
        m.insert((7, 33, 0), Some(vec!["Neapolitan-major mode", "leading-whole-tone mode"]));
        m.insert((7, 34, 0), Some(vec!["melodic minor ascending scale", "jazz minor", "augmented thirteenth heptamirror", "harmonic/super-locrian"]));
        m.insert((7, 35, 0), Some(vec!["major scale", "major diatonic heptachord", "natural minor scale", "dominant thirteenth", "locrian", "phrygian", "major inverse"]));
        m.insert((7, 36, 1), None);
        m.insert((7, 36, -1), None);
        m.insert((7, 37, 0), None);
        m.insert((7, 38, 1), None);
        m.insert((7, 38, -1), None);
        m.insert((8, 1, 0), Some(vec!["chromatic octamirror"]));
        m.insert((8, 2, 1), None);
        m.insert((8, 2, -1), None);
        m.insert((8, 3, 0), None);
        m.insert((8, 4, 1), None);
        m.insert((8, 4, -1), None);
        m.insert((8, 5, 1), None);
        m.insert((8, 5, -1), None);
        m.insert((8, 6, 0), None);
        m.insert((8, 7, 0), None);
        m.insert((8, 8, 0), None);
        m.insert((8, 9, 0), Some(vec!["Messiaen's mode 4"]));
        m.insert((8, 10, 0), None);
        m.insert((8, 11, 1), None);
        m.insert((8, 11, -1), Some(vec!["blues octatonic"]));
        m.insert((8, 12, 1), None);
        m.insert((8, 12, -1), None);
        m.insert((8, 13, 1), Some(vec!["blues octatonic"]));
        m.insert((8, 13, -1), None);
        m.insert((8, 14, 1), None);
        m.insert((8, 14, -1), None);
        m.insert((8, 15, 1), None);
        m.insert((8, 15, -1), None);
        m.insert((8, 16, 1), None);
        m.insert((8, 16, -1), Some(vec!["enigmatic octachord"]));
        m.insert((8, 17, 0), None);
        m.insert((8, 18, 1), None);
        m.insert((8, 18, -1), None);
        m.insert((8, 19, 1), None);
        m.insert((8, 19, -1), None);
        m.insert((8, 20, 0), None);
        m.insert((8, 21, 0), None);
        m.insert((8, 22, 1), None);
        m.insert((8, 22, -1), Some(vec!["Spanish octatonic scale"]));
        m.insert((8, 23, 0), Some(vec!["Greek", "quartal octachord", "diatonic octad"]));
        m.insert((8, 24, 0), None);
        m.insert((8, 25, 0), Some(vec!["Messiaen's mode 6"]));
        m.insert((8, 26, 0), Some(vec!["Spanish phrygian", "blues"]));
        m.insert((8, 27, 1), None);
        m.insert((8, 27, -1), None);
        m.insert((8, 28, 0), Some(vec!["octatonic scale", "Messiaen's mode 2", "alternating octatonic scale", "diminished scale"]));
        m.insert((8, 29, 1), None);
        m.insert((8, 29, -1), None);
        m.insert((9, 1, 0), Some(vec!["chromatic nonamirror"]));
        m.insert((9, 2, 1), None);
        m.insert((9, 2, -1), None);
        m.insert((9, 3, 1), None);
        m.insert((9, 3, -1), None);
        m.insert((9, 4, 1), None);
        m.insert((9, 4, -1), None);
        m.insert((9, 5, 1), None);
        m.insert((9, 5, -1), None);
        m.insert((9, 6, 0), None);
        m.insert((9, 7, 1), Some(vec!["nonatonic blues"]));
        m.insert((9, 7, -1), None);
        m.insert((9, 8, 1), None);
        m.insert((9, 8, -1), None);
        m.insert((9, 9, 0), None);
        m.insert((9, 10, 0), None);
        m.insert((9, 11, 1), None);
        m.insert((9, 11, -1), Some(vec!["diminishing nonachord"]));
        m.insert((9, 12, 0), Some(vec!["Messiaen's mode 3", "Tsjerepnin"]));
        m.insert((10, 1, 0), Some(vec!["chromatic decamirror"]));
        m.insert((10, 2, 0), None);
        m.insert((10, 3, 0), None);
        m.insert((10, 4, 0), None);
        m.insert((10, 5, 0), Some(vec!["major-minor mixed"]));
        m.insert((10, 6, 0), Some(vec!["Messiaen's mode 7"]));
        m.insert((11, 1, 0), Some(vec!["chromatic undecamirror"]));
        m.insert((12, 1, 0), Some(vec!["aggregate", "dodecachord", "twelve-tone chromatic", "chromatic scale", "dodecamirror"]));
        m
    };
}
// END_GENERATED_CODE
