/*
This file is autogenerated from the tables in the original music21 library
check the build script for details
*/

use super::{
    CardinalityToChordMembers, Forte, ForteNumberWithInversionToIndex,
    InversionDefaultPitchClasses, MaximumIndexNumberWithInversionEquivalence,
    MaximumIndexNumberWithoutInversionEquivalence, Sign, TnIndexToChordInfo,
};
use std::{collections::HashMap, sync::LazyLock};

pub(super) static FORTE: Forte = LazyLock::new(|| {
    [
        vec![],
        vec![
            None,
            Some((
                [
                    true, false, false, false, false, false, false, false, false, false, false,
                    false,
                ],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 11, 11, 11, 11],
                0,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, false, false, false, false, false, false, false, false, false,
                    false,
                ],
                [1, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 9, 9, 8, 8],
                0,
            )),
            Some((
                [
                    true, false, true, false, false, false, false, false, false, false, false,
                    false,
                ],
                [0, 1, 0, 0, 0, 0],
                [1, 1, 1, 1, 9, 9, 9, 9],
                0,
            )),
            Some((
                [
                    true, false, false, true, false, false, false, false, false, false, false,
                    false,
                ],
                [0, 0, 1, 0, 0, 0],
                [1, 1, 1, 1, 9, 9, 9, 9],
                0,
            )),
            Some((
                [
                    true, false, false, false, true, false, false, false, false, false, false,
                    false,
                ],
                [0, 0, 0, 1, 0, 0],
                [1, 1, 1, 1, 9, 9, 9, 9],
                0,
            )),
            Some((
                [
                    true, false, false, false, false, true, false, false, false, false, false,
                    false,
                ],
                [0, 0, 0, 0, 1, 0],
                [1, 1, 0, 0, 9, 9, 8, 8],
                0,
            )),
            Some((
                [
                    true, false, false, false, false, false, true, false, false, false, false,
                    false,
                ],
                [0, 0, 0, 0, 0, 1],
                [2, 2, 2, 2, 10, 10, 10, 10],
                0,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, false, false, false, false, false, false, false, false, false,
                ],
                [2, 1, 0, 0, 0, 0],
                [1, 1, 0, 0, 7, 7, 4, 4],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, false, false, false, false, false, false, false,
                ],
                [1, 1, 1, 0, 0, 0],
                [1, 0, 0, 0, 5, 6, 5, 5],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, false, false, false, false, false, false, false,
                ],
                [1, 0, 1, 1, 0, 0],
                [1, 0, 0, 0, 5, 6, 5, 5],
                0,
            )),
            Some((
                [
                    true, true, false, false, false, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 1, 1, 0],
                [1, 0, 1, 0, 5, 6, 5, 6],
                0,
            )),
            Some((
                [
                    true, true, false, false, false, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 1],
                [1, 0, 0, 1, 6, 7, 7, 6],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, false, false, false, false, false, false, false,
                ],
                [0, 2, 0, 1, 0, 0],
                [1, 1, 1, 1, 7, 7, 7, 7],
                0,
            )),
            Some((
                [
                    true, false, true, false, false, true, false, false, false, false, false, false,
                ],
                [0, 1, 1, 0, 1, 0],
                [1, 0, 0, 0, 5, 6, 5, 5],
                0,
            )),
            Some((
                [
                    true, false, true, false, false, false, true, false, false, false, false, false,
                ],
                [0, 1, 0, 1, 0, 1],
                [1, 0, 0, 1, 6, 7, 7, 6],
                0,
            )),
            Some((
                [
                    true, false, true, false, false, false, false, true, false, false, false, false,
                ],
                [0, 1, 0, 0, 2, 0],
                [1, 1, 0, 0, 7, 7, 4, 4],
                0,
            )),
            Some((
                [
                    true, false, false, true, false, false, true, false, false, false, false, false,
                ],
                [0, 0, 2, 0, 0, 1],
                [1, 1, 1, 1, 8, 8, 8, 8],
                0,
            )),
            Some((
                [
                    true, false, false, true, false, false, false, true, false, false, false, false,
                ],
                [0, 0, 1, 1, 1, 0],
                [1, 0, 0, 0, 5, 6, 5, 5],
                0,
            )),
            Some((
                [
                    true, false, false, false, true, false, false, false, true, false, false, false,
                ],
                [0, 0, 0, 3, 0, 0],
                [3, 3, 3, 3, 9, 9, 9, 9],
                0,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, false, false, false, false, false, false, false, false,
                ],
                [3, 2, 1, 0, 0, 0],
                [1, 1, 0, 0, 5, 5, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, false, false, false, false, false, false,
                ],
                [2, 2, 1, 1, 0, 0],
                [1, 0, 0, 0, 3, 4, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, false, false, false, false, false, false,
                ],
                [2, 1, 2, 1, 0, 0],
                [1, 1, 0, 0, 3, 3, 2, 2],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, true, false, false, false, false, false, false,
                ],
                [2, 1, 1, 1, 1, 0],
                [1, 0, 0, 0, 1, 3, 2, 3],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, false, true, false, false, false, false, false,
                ],
                [2, 1, 0, 1, 1, 1],
                [1, 0, 0, 0, 2, 4, 3, 2],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, false, false, true, false, false, false, false,
                ],
                [2, 1, 0, 0, 2, 1],
                [1, 1, 1, 1, 4, 4, 4, 4],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, true, false, false, false, false, false, false,
                ],
                [2, 0, 1, 2, 1, 0],
                [1, 1, 0, 0, 3, 3, 3, 3],
                0,
            )),
            Some((
                [
                    true, true, false, false, false, true, true, false, false, false, false, false,
                ],
                [2, 0, 0, 1, 2, 1],
                [1, 1, 1, 1, 4, 4, 4, 4],
                0,
            )),
            Some((
                [
                    true, true, false, false, false, false, true, true, false, false, false, false,
                ],
                [2, 0, 0, 0, 2, 2],
                [2, 2, 2, 2, 6, 6, 6, 6],
                0,
            )),
            Some((
                [
                    true, false, true, true, false, true, false, false, false, false, false, false,
                ],
                [1, 2, 2, 0, 1, 0],
                [1, 1, 1, 1, 3, 3, 3, 3],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, false, false, false, false, false, false,
                ],
                [1, 2, 1, 1, 1, 0],
                [1, 0, 1, 0, 1, 3, 1, 3],
                0,
            )),
            Some((
                [
                    true, false, true, true, false, false, true, false, false, false, false, false,
                ],
                [1, 1, 2, 1, 0, 1],
                [1, 0, 0, 0, 2, 4, 3, 2],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, false, true, false, false, false, false, false,
                ],
                [1, 1, 2, 0, 1, 1],
                [1, 0, 0, 1, 2, 4, 4, 2],
                0,
            )),
            Some((
                [
                    true, false, true, true, false, false, false, true, false, false, false, false,
                ],
                [1, 1, 1, 1, 2, 0],
                [1, 0, 0, 0, 1, 3, 2, 3],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, false, true, false, false, false, false, false,
                ],
                [1, 1, 1, 1, 1, 1],
                [1, 0, 0, 0, 0, 3, 3, 1],
                29,
            )),
            Some((
                [
                    true, true, false, false, false, true, false, true, false, false, false, false,
                ],
                [1, 1, 0, 1, 2, 1],
                [1, 0, 0, 0, 2, 4, 3, 2],
                0,
            )),
            Some((
                [
                    true, false, false, true, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 2, 2, 1, 0],
                [1, 1, 1, 1, 3, 3, 3, 3],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 2, 1, 1, 1],
                [1, 0, 0, 1, 2, 4, 4, 2],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, false, false, false, true, false, false, false,
                ],
                [1, 0, 1, 3, 1, 0],
                [1, 0, 1, 0, 3, 5, 3, 5],
                0,
            )),
            Some((
                [
                    true, true, false, false, false, true, false, false, true, false, false, false,
                ],
                [1, 0, 1, 2, 2, 0],
                [1, 1, 0, 0, 3, 3, 3, 3],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, false, true, false, false, false, false, false,
                ],
                [0, 3, 0, 2, 0, 1],
                [1, 1, 1, 1, 6, 6, 6, 6],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, false, false, true, false, false, false, false,
                ],
                [0, 2, 1, 1, 2, 0],
                [1, 0, 0, 0, 3, 4, 1, 1],
                0,
            )),
            Some((
                [
                    true, false, true, false, false, true, false, true, false, false, false, false,
                ],
                [0, 2, 1, 0, 3, 0],
                [1, 1, 0, 0, 5, 5, 1, 1],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, false, false, false, true, false, false, false,
                ],
                [0, 2, 0, 3, 0, 1],
                [1, 1, 1, 1, 6, 6, 6, 6],
                0,
            )),
            Some((
                [
                    true, false, true, false, false, false, true, false, true, false, false, false,
                ],
                [0, 2, 0, 2, 0, 2],
                [2, 2, 2, 2, 6, 6, 6, 6],
                0,
            )),
            Some((
                [
                    true, false, false, true, false, true, false, false, true, false, false, false,
                ],
                [0, 1, 2, 1, 2, 0],
                [1, 1, 0, 0, 3, 3, 2, 2],
                0,
            )),
            Some((
                [
                    true, false, true, false, false, true, false, false, true, false, false, false,
                ],
                [0, 1, 2, 1, 1, 1],
                [1, 0, 0, 0, 2, 4, 3, 2],
                0,
            )),
            Some((
                [
                    true, false, false, true, false, false, true, false, false, true, false, false,
                ],
                [0, 0, 4, 0, 0, 2],
                [4, 4, 4, 4, 8, 8, 8, 8],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, false, false, true, false, false, false, false,
                ],
                [1, 1, 1, 1, 1, 1],
                [1, 0, 0, 0, 0, 3, 3, 1],
                15,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, true, false, false, false, false, false, false, false,
                ],
                [4, 3, 2, 1, 0, 0],
                [1, 1, 0, 0, 3, 3, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, false, false, false, false, false, false,
                ],
                [3, 3, 2, 1, 1, 0],
                [1, 0, 0, 0, 1, 2, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, false, false, false, false, false,
                ],
                [3, 2, 2, 2, 1, 0],
                [1, 0, 0, 0, 1, 1, 1, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, false, true, false, false, false, false, false,
                ],
                [3, 2, 2, 1, 1, 1],
                [1, 0, 0, 0, 0, 2, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, false, false, true, false, false, false, false,
                ],
                [3, 2, 1, 1, 2, 1],
                [1, 0, 0, 0, 0, 1, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, true, true, false, false, false, false, false,
                ],
                [3, 1, 1, 2, 2, 1],
                [1, 0, 0, 0, 0, 1, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, false, true, true, false, false, false, false,
                ],
                [3, 1, 0, 1, 3, 2],
                [1, 0, 0, 1, 2, 3, 3, 2],
                0,
            )),
            Some((
                [
                    true, false, true, true, true, false, true, false, false, false, false, false,
                ],
                [2, 3, 2, 2, 0, 1],
                [1, 1, 0, 0, 2, 2, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, false, false, false, false, false,
                ],
                [2, 3, 1, 2, 1, 1],
                [1, 0, 0, 0, 0, 2, 0, 1],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, true, false, false, false, false, false,
                ],
                [2, 2, 3, 1, 1, 1],
                [1, 0, 0, 0, 0, 1, 1, 0],
                0,
            )),
            Some((
                [
                    true, false, true, true, true, false, false, true, false, false, false, false,
                ],
                [2, 2, 2, 2, 2, 0],
                [1, 0, 1, 0, 1, 1, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, true, false, false, false, false, false,
                ],
                [2, 2, 2, 1, 2, 1],
                [1, 1, 1, 1, 0, 0, 0, 0],
                36,
            )),
            Some((
                [
                    true, true, true, false, true, false, false, false, true, false, false, false,
                ],
                [2, 2, 1, 3, 1, 1],
                [1, 0, 0, 0, 0, 2, 0, 1],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, true, false, true, false, false, false, false,
                ],
                [2, 2, 1, 1, 3, 1],
                [1, 0, 0, 0, 0, 1, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, false, true, false, true, false, false, false,
                ],
                [2, 2, 0, 2, 2, 2],
                [1, 1, 1, 1, 2, 2, 2, 2],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, false, true, false, false, false, false,
                ],
                [2, 1, 3, 2, 1, 1],
                [1, 0, 0, 0, 0, 1, 1, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, false, false, true, false, false, false,
                ],
                [2, 1, 2, 3, 2, 0],
                [1, 1, 0, 0, 1, 1, 2, 2],
                37,
            )),
            Some((
                [
                    true, true, false, false, true, true, false, true, false, false, false, false,
                ],
                [2, 1, 2, 2, 2, 1],
                [1, 0, 0, 0, 0, 1, 1, 0],
                38,
            )),
            Some((
                [
                    true, true, false, true, false, false, true, true, false, false, false, false,
                ],
                [2, 1, 2, 1, 2, 2],
                [1, 0, 0, 1, 0, 2, 2, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, false, false, true, true, false, false, false,
                ],
                [2, 1, 1, 2, 3, 1],
                [1, 0, 0, 0, 0, 1, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, true, false, false, true, false, false, false,
                ],
                [2, 0, 2, 4, 2, 0],
                [1, 0, 1, 0, 3, 3, 3, 3],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, false, false, true, true, false, false, false,
                ],
                [2, 0, 2, 3, 2, 1],
                [1, 1, 1, 1, 2, 2, 2, 2],
                0,
            )),
            Some((
                [
                    true, false, true, true, false, true, false, true, false, false, false, false,
                ],
                [1, 3, 2, 1, 3, 0],
                [1, 0, 0, 0, 1, 2, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, false, true, false, false, false, false,
                ],
                [1, 3, 1, 2, 2, 1],
                [1, 0, 0, 0, 0, 2, 0, 1],
                0,
            )),
            Some((
                [
                    true, false, true, true, false, true, false, false, true, false, false, false,
                ],
                [1, 2, 3, 1, 2, 1],
                [1, 0, 0, 0, 0, 1, 1, 0],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, true, false, false, true, false, false, false,
                ],
                [1, 2, 2, 3, 1, 1],
                [1, 0, 1, 0, 0, 2, 0, 2],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, false, false, true, false, false, false,
                ],
                [1, 2, 2, 2, 3, 0],
                [1, 0, 0, 0, 1, 1, 1, 0],
                0,
            )),
            Some((
                [
                    true, false, true, true, false, false, true, false, true, false, false, false,
                ],
                [1, 2, 2, 2, 1, 2],
                [1, 0, 0, 1, 0, 2, 2, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, false, true, false, true, false, false, false,
                ],
                [1, 2, 2, 1, 3, 1],
                [1, 0, 0, 0, 0, 2, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, false, true, false, true, false, false, false,
                ],
                [1, 2, 1, 3, 2, 1],
                [1, 0, 0, 0, 0, 2, 0, 1],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, false, true, false, false, true, false, false,
                ],
                [1, 1, 4, 1, 1, 2],
                [1, 0, 0, 1, 0, 3, 3, 0],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, false, true, false, false, true, false, false,
                ],
                [1, 1, 3, 2, 2, 1],
                [1, 0, 0, 0, 0, 1, 1, 0],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, false, true, false, true, false, false, false,
                ],
                [0, 4, 0, 4, 0, 2],
                [1, 1, 1, 1, 6, 6, 6, 6],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, false, true, false, false, true, false, false,
                ],
                [0, 3, 2, 2, 2, 1],
                [1, 1, 0, 0, 2, 2, 0, 0],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, false, false, true, false, true, false, false,
                ],
                [0, 3, 2, 1, 4, 0],
                [1, 1, 0, 0, 3, 3, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, false, true, false, false, false, false,
                ],
                [2, 2, 2, 1, 2, 1],
                [1, 0, 0, 1, 0, 1, 1, 0],
                12,
            )),
            Some((
                [
                    true, false, false, true, true, true, false, false, true, false, false, false,
                ],
                [2, 1, 2, 3, 2, 0],
                [1, 1, 0, 0, 1, 1, 2, 2],
                17,
            )),
            Some((
                [
                    true, true, true, false, false, true, false, false, true, false, false, false,
                ],
                [2, 1, 2, 2, 2, 1],
                [1, 0, 0, 0, 0, 1, 1, 0],
                18,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, true, true, false, false, false, false, false, false,
                ],
                [5, 4, 3, 2, 1, 0],
                [1, 1, 0, 0, 1, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, false, false, false, false, false,
                ],
                [4, 4, 3, 2, 1, 1],
                [1, 0, 0, 0, 0, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, false, false, false, false, false,
                ],
                [4, 3, 3, 2, 2, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                36,
            )),
            Some((
                [
                    true, true, true, false, true, true, true, false, false, false, false, false,
                ],
                [4, 3, 2, 3, 2, 1],
                [1, 1, 0, 0, 0, 0, 0, 0],
                37,
            )),
            Some((
                [
                    true, true, true, true, false, false, true, true, false, false, false, false,
                ],
                [4, 2, 2, 2, 3, 2],
                [1, 0, 0, 0, 0, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, true, true, true, false, false, false, false,
                ],
                [4, 2, 1, 2, 4, 2],
                [1, 1, 0, 0, 0, 0, 1, 1],
                38,
            )),
            Some((
                [
                    true, true, true, false, false, false, true, true, true, false, false, false,
                ],
                [4, 2, 0, 2, 4, 3],
                [2, 2, 2, 2, 2, 2, 2, 2],
                0,
            )),
            Some((
                [
                    true, false, true, true, true, true, false, true, false, false, false, false,
                ],
                [3, 4, 3, 2, 3, 0],
                [1, 1, 1, 1, 1, 1, 1, 1],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, false, true, false, false, false, false,
                ],
                [3, 4, 2, 2, 3, 1],
                [1, 0, 1, 0, 0, 1, 0, 1],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, true, false, true, false, false, false, false,
                ],
                [3, 3, 3, 3, 2, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                39,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, true, false, false, false, false,
                ],
                [3, 3, 3, 2, 3, 1],
                [1, 0, 0, 0, 0, 0, 1, 0],
                40,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, true, false, false, false, false,
                ],
                [3, 3, 2, 2, 3, 2],
                [1, 0, 0, 1, 0, 0, 0, 0],
                41,
            )),
            Some((
                [
                    true, true, false, true, true, false, true, true, false, false, false, false,
                ],
                [3, 2, 4, 2, 2, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                42,
            )),
            Some((
                [
                    true, true, false, true, true, true, false, false, true, false, false, false,
                ],
                [3, 2, 3, 4, 3, 0],
                [1, 0, 1, 0, 1, 0, 1, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, false, true, false, false, false,
                ],
                [3, 2, 3, 4, 2, 1],
                [1, 0, 0, 0, 0, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, false, true, true, true, false, true, false, false, false,
                ],
                [3, 2, 2, 4, 3, 1],
                [1, 0, 1, 0, 0, 1, 0, 1],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, false, true, true, false, false, false,
                ],
                [3, 2, 2, 3, 3, 2],
                [1, 0, 0, 1, 0, 0, 0, 0],
                43,
            )),
            Some((
                [
                    true, true, true, false, false, true, false, true, true, false, false, false,
                ],
                [3, 2, 2, 2, 4, 2],
                [1, 0, 0, 0, 0, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, false, true, true, false, false, false,
                ],
                [3, 1, 3, 4, 3, 1],
                [1, 0, 0, 0, 0, 0, 1, 0],
                44,
            )),
            Some((
                [
                    true, true, false, false, true, true, false, false, true, true, false, false,
                ],
                [3, 0, 3, 6, 3, 0],
                [3, 3, 3, 3, 3, 3, 3, 3],
                0,
            )),
            Some((
                [
                    true, false, true, true, true, false, true, false, true, false, false, false,
                ],
                [2, 4, 2, 4, 1, 2],
                [1, 0, 0, 0, 0, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, false, true, false, false, false,
                ],
                [2, 4, 1, 4, 2, 2],
                [1, 0, 1, 0, 0, 1, 0, 1],
                0,
            )),
            Some((
                [
                    true, false, true, true, false, true, true, false, true, false, false, false,
                ],
                [2, 3, 4, 2, 2, 2],
                [1, 1, 1, 1, 0, 0, 0, 0],
                45,
            )),
            Some((
                [
                    true, true, false, true, true, false, true, false, true, false, false, false,
                ],
                [2, 3, 3, 3, 3, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                46,
            )),
            Some((
                [
                    true, true, false, true, false, true, true, false, true, false, false, false,
                ],
                [2, 3, 3, 2, 4, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                47,
            )),
            Some((
                [
                    true, true, false, true, false, true, false, true, true, false, false, false,
                ],
                [2, 3, 2, 3, 4, 1],
                [1, 1, 0, 0, 0, 0, 0, 0],
                48,
            )),
            Some((
                [
                    true, true, false, true, true, false, true, false, false, true, false, false,
                ],
                [2, 2, 5, 2, 2, 2],
                [1, 0, 0, 1, 0, 1, 1, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, true, false, false, true, false, false,
                ],
                [2, 2, 4, 3, 2, 2],
                [1, 1, 1, 1, 0, 0, 0, 0],
                49,
            )),
            Some((
                [
                    true, true, false, true, false, false, true, false, true, true, false, false,
                ],
                [2, 2, 4, 2, 3, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                50,
            )),
            Some((
                [
                    true, true, false, true, false, false, true, true, false, true, false, false,
                ],
                [2, 2, 4, 2, 2, 3],
                [2, 0, 0, 2, 0, 2, 2, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, false, false, true, true, false, false,
                ],
                [2, 2, 3, 4, 3, 1],
                [1, 0, 0, 0, 0, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, true, false, true, false, true, false, false,
                ],
                [1, 4, 3, 2, 5, 0],
                [1, 1, 0, 0, 1, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, false, true, true, false, true, false, true, false, true, false, false,
                ],
                [1, 4, 3, 2, 4, 1],
                [1, 0, 0, 0, 0, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, false, true, false, true, false, false,
                ],
                [1, 4, 2, 4, 2, 2],
                [1, 0, 0, 0, 0, 1, 0, 0],
                0,
            )),
            Some((
                [
                    true, false, true, false, true, false, true, false, true, false, true, false,
                ],
                [0, 6, 0, 6, 0, 3],
                [6, 6, 6, 6, 6, 6, 6, 6],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, false, true, false, false, false, false,
                ],
                [4, 3, 3, 2, 2, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                3,
            )),
            Some((
                [
                    true, true, true, true, true, false, false, false, true, false, false, false,
                ],
                [4, 3, 2, 3, 2, 1],
                [1, 1, 0, 0, 0, 0, 0, 0],
                4,
            )),
            Some((
                [
                    true, true, true, true, false, false, false, true, true, false, false, false,
                ],
                [4, 2, 1, 2, 4, 2],
                [1, 1, 0, 0, 0, 0, 1, 1],
                6,
            )),
            Some((
                [
                    true, false, true, true, true, true, false, false, true, false, false, false,
                ],
                [3, 3, 3, 3, 2, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                10,
            )),
            Some((
                [
                    true, true, true, true, false, true, false, false, true, false, false, false,
                ],
                [3, 3, 3, 2, 3, 1],
                [1, 0, 0, 0, 0, 0, 1, 0],
                11,
            )),
            Some((
                [
                    true, true, true, true, false, false, true, false, true, false, false, false,
                ],
                [3, 3, 2, 2, 3, 2],
                [1, 0, 0, 1, 0, 0, 0, 0],
                12,
            )),
            Some((
                [
                    true, true, true, true, false, false, true, false, false, true, false, false,
                ],
                [3, 2, 4, 2, 2, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                13,
            )),
            Some((
                [
                    true, true, true, false, false, true, true, false, true, false, false, false,
                ],
                [3, 2, 2, 3, 3, 2],
                [1, 0, 0, 1, 0, 0, 0, 0],
                17,
            )),
            Some((
                [
                    true, true, true, false, false, true, true, false, false, true, false, false,
                ],
                [3, 1, 3, 4, 3, 1],
                [1, 0, 0, 0, 0, 0, 1, 0],
                19,
            )),
            Some((
                [
                    true, false, true, true, true, false, true, false, false, true, false, false,
                ],
                [2, 3, 4, 2, 2, 2],
                [1, 1, 1, 1, 0, 0, 0, 0],
                23,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, false, false, true, false, false,
                ],
                [2, 3, 3, 3, 3, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                24,
            )),
            Some((
                [
                    true, true, true, false, true, false, false, true, false, true, false, false,
                ],
                [2, 3, 3, 2, 4, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                25,
            )),
            Some((
                [
                    true, true, true, false, false, true, false, true, false, true, false, false,
                ],
                [2, 3, 2, 3, 4, 1],
                [1, 1, 0, 0, 0, 0, 0, 0],
                26,
            )),
            Some((
                [
                    true, true, false, true, true, false, false, true, false, true, false, false,
                ],
                [2, 2, 4, 3, 2, 2],
                [1, 1, 1, 1, 0, 0, 0, 0],
                28,
            )),
            Some((
                [
                    true, true, false, false, true, false, true, true, false, true, false, false,
                ],
                [2, 2, 4, 2, 3, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                29,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, true, true, true, false, false, false, false, false,
                ],
                [6, 5, 4, 3, 2, 1],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, false, true, false, false, false, false,
                ],
                [5, 5, 4, 3, 3, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, false, false, true, false, false, false,
                ],
                [5, 4, 4, 4, 3, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, true, false, false, false, false,
                ],
                [5, 4, 4, 3, 3, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, true, false, false, false, false,
                ],
                [5, 4, 3, 3, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, false, true, true, false, false, false,
                ],
                [5, 3, 3, 4, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, false, true, true, true, false, false, false,
                ],
                [5, 3, 2, 3, 5, 3],
                [1, 0, 0, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, false, true, true, true, true, true, false, true, false, false, false,
                ],
                [4, 5, 4, 4, 2, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, false, true, false, false, false,
                ],
                [4, 5, 3, 4, 3, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, false, false, true, false, false,
                ],
                [4, 4, 5, 3, 3, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, true, true, false, true, false, false, false,
                ],
                [4, 4, 4, 4, 4, 1],
                [1, 0, 1, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, false, true, false, true, false, false,
                ],
                [4, 4, 4, 3, 4, 2],
                [1, 1, 1, 1, 0, 0, 0, 0],
                36,
            )),
            Some((
                [
                    true, true, true, false, true, true, true, false, true, false, false, false,
                ],
                [4, 4, 3, 5, 3, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, false, true, true, false, false, false,
                ],
                [4, 4, 3, 3, 5, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, true, true, false, false, false,
                ],
                [4, 4, 2, 4, 4, 3],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, false, false, true, false, false,
                ],
                [4, 3, 5, 4, 3, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, true, false, false, true, false, false,
                ],
                [4, 3, 4, 5, 4, 1],
                [1, 1, 0, 0, 0, 0, 0, 0],
                37,
            )),
            Some((
                [
                    true, true, true, true, false, true, false, false, true, true, false, false,
                ],
                [4, 3, 4, 4, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                38,
            )),
            Some((
                [
                    true, true, true, true, false, false, true, true, false, true, false, false,
                ],
                [4, 3, 4, 3, 4, 3],
                [1, 0, 0, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, false, true, true, true, false, false,
                ],
                [4, 3, 3, 4, 5, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, false, true, true, false, false,
                ],
                [4, 2, 4, 6, 4, 1],
                [1, 0, 1, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, false, true, true, false, true, true, false, false,
                ],
                [4, 2, 4, 5, 4, 2],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, false, true, true, true, true, false, true, false, true, false, false,
                ],
                [3, 5, 4, 3, 5, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, false, true, false, true, false, false,
                ],
                [3, 5, 3, 4, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, false, true, true, true, false, true, true, false, true, false, false,
                ],
                [3, 4, 5, 3, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, true, false, true, false, true, false, false,
                ],
                [3, 4, 4, 5, 3, 2],
                [1, 0, 1, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, true, false, true, false, false,
                ],
                [3, 4, 4, 4, 5, 1],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, true, true, false, true, false, false,
                ],
                [3, 4, 4, 4, 3, 3],
                [1, 0, 0, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, true, false, true, false, false,
                ],
                [3, 4, 4, 3, 5, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, false, true, true, false, false,
                ],
                [3, 4, 3, 5, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, true, true, false, true, false, false,
                ],
                [3, 3, 6, 3, 3, 3],
                [1, 0, 0, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, true, false, true, true, false, false,
                ],
                [3, 3, 5, 4, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, false, true, false, true, false,
                ],
                [2, 6, 2, 6, 2, 3],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, true, false, true, false, true, false,
                ],
                [2, 5, 4, 4, 4, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, false, true, true, false, true, false, true, false,
                ],
                [2, 5, 4, 3, 6, 1],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, false, true, false, false, false,
                ],
                [4, 4, 4, 3, 4, 2],
                [1, 0, 0, 1, 0, 0, 0, 0],
                12,
            )),
            Some((
                [
                    true, true, false, true, true, true, false, true, true, false, false, false,
                ],
                [4, 3, 4, 5, 4, 1],
                [1, 1, 0, 0, 0, 0, 0, 0],
                17,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, true, true, false, false, false,
                ],
                [4, 3, 4, 4, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                18,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, true, true, true, true, false, false, false, false,
                ],
                [7, 6, 5, 4, 4, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, true, false, true, false, false, false,
                ],
                [6, 6, 5, 5, 4, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, true, false, false, true, false, false,
                ],
                [6, 5, 6, 5, 4, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, false, true, true, false, false, false,
                ],
                [6, 5, 5, 5, 5, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, true, true, false, false, false,
                ],
                [6, 5, 4, 5, 5, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, true, true, false, false, false,
                ],
                [6, 5, 4, 4, 6, 3],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, false, false, true, true, false, false,
                ],
                [6, 4, 5, 6, 5, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, false, true, true, true, false, false,
                ],
                [6, 4, 4, 5, 6, 3],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, false, true, true, true, true, false, false,
                ],
                [6, 4, 4, 4, 6, 4],
                [2, 2, 2, 2, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, false, true, true, true, true, true, true, false, true, false, false,
                ],
                [5, 6, 6, 4, 5, 2],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, false, true, false, true, false, false,
                ],
                [5, 6, 5, 5, 5, 2],
                [1, 0, 1, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, true, true, true, false, true, false, false,
                ],
                [5, 5, 6, 5, 4, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, true, false, true, false, false,
                ],
                [5, 5, 6, 4, 5, 3],
                [1, 0, 0, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, true, true, false, true, false, false,
                ],
                [5, 5, 5, 5, 6, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, false, true, true, false, false,
                ],
                [5, 5, 5, 5, 5, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                29,
            )),
            Some((
                [
                    true, true, true, true, false, true, false, true, true, true, false, false,
                ],
                [5, 5, 4, 5, 6, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, true, true, false, true, true, false, false,
                ],
                [5, 4, 6, 6, 5, 2],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, false, true, true, false, false,
                ],
                [5, 4, 6, 5, 5, 3],
                [1, 0, 0, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, true, false, true, true, false, false,
                ],
                [5, 4, 5, 7, 5, 2],
                [1, 0, 1, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, true, true, true, false, false,
                ],
                [5, 4, 5, 6, 6, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, false, true, false, true, false,
                ],
                [4, 7, 4, 6, 4, 3],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, false, true, false, true, false,
                ],
                [4, 6, 5, 5, 6, 2],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, false, true, true, false, true, false,
                ],
                [4, 6, 5, 4, 7, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, true, false, true, false, true, false,
                ],
                [4, 6, 4, 7, 4, 3],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, false, true, true, true, false, true, false,
                ],
                [4, 6, 4, 6, 4, 4],
                [2, 2, 2, 2, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, true, false, true, true, false,
                ],
                [4, 5, 6, 5, 6, 2],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, false, true, true, false, true, false,
                ],
                [4, 5, 6, 5, 5, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, false, true, true, false, true, true, false, true, true, false,
                ],
                [4, 4, 8, 4, 4, 4],
                [4, 4, 4, 4, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, true, false, true, false, false,
                ],
                [5, 5, 5, 5, 5, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                15,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, true, true, true, true, true, false, false, false,
                ],
                [8, 7, 6, 6, 6, 3],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, true, true, false, true, false, false,
                ],
                [7, 7, 7, 6, 6, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, true, false, true, true, false, false,
                ],
                [7, 6, 7, 7, 6, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, false, true, true, true, false, false,
                ],
                [7, 6, 6, 7, 7, 3],
                [1, 0, 1, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, true, true, true, false, false,
                ],
                [7, 6, 6, 6, 7, 4],
                [1, 0, 0, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, true, false, true, false, true, false,
                ],
                [6, 8, 6, 7, 6, 3],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, false, true, true, false, true, false,
                ],
                [6, 7, 7, 6, 7, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, true, true, false, true, false,
                ],
                [6, 7, 6, 7, 6, 4],
                [1, 0, 0, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, true, true, false, true, false,
                ],
                [6, 7, 6, 6, 8, 3],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, true, false, true, true, false,
                ],
                [6, 6, 8, 6, 6, 4],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, false, true, true, true, false, true, true, false,
                ],
                [6, 6, 7, 7, 7, 3],
                [1, 0, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, false, true, true, true, false, true, true, true, false,
                ],
                [6, 6, 6, 9, 6, 3],
                [3, 3, 3, 3, 0, 0, 0, 0],
                0,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, true, true, true, true, true, true, false, false,
                ],
                [9, 8, 8, 8, 8, 4],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, true, true, true, false, true, false,
                ],
                [8, 9, 8, 8, 8, 4],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, true, true, false, true, true, false,
                ],
                [8, 8, 9, 8, 8, 4],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, true, false, true, true, true, false,
                ],
                [8, 8, 8, 9, 8, 4],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, true, false, true, true, true, true, false,
                ],
                [8, 8, 8, 8, 9, 4],
                [1, 1, 0, 0, 0, 0, 0, 0],
                0,
            )),
            Some((
                [
                    true, true, true, true, true, false, true, true, true, true, true, false,
                ],
                [8, 8, 8, 8, 8, 5],
                [2, 2, 2, 2, 0, 0, 0, 0],
                0,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, true, true, true, true, true, true, true, false,
                ],
                [10, 10, 10, 10, 10, 5],
                [1, 1, 1, 1, 0, 0, 0, 0],
                0,
            )),
        ],
        vec![
            None,
            Some((
                [
                    true, true, true, true, true, true, true, true, true, true, true, true,
                ],
                [12, 12, 12, 12, 12, 6],
                [12, 12, 12, 12, 0, 0, 0, 0],
                0,
            )),
        ],
    ]
});

pub(super) static INVERSION_DEFAULT_PITCH_CLASSES: InversionDefaultPitchClasses =
    LazyLock::new(|| {
        let mut m = HashMap::new();
        m.insert((3, 2), [
            true, false, true, true, false, false, false, false, false, false, false, false,
        ]);
        m.insert((3, 3), [
            true, false, false, true, true, false, false, false, false, false, false, false,
        ]);
        m.insert((3, 4), [
            true, false, false, false, true, true, false, false, false, false, false, false,
        ]);
        m.insert((3, 5), [
            true, false, false, false, false, true, true, false, false, false, false, false,
        ]);
        m.insert((3, 7), [
            true, false, false, true, false, true, false, false, false, false, false, false,
        ]);
        m.insert((3, 8), [
            true, false, false, false, true, false, true, false, false, false, false, false,
        ]);
        m.insert((3, 11), [
            true, false, false, false, true, false, false, true, false, false, false, false,
        ]);
        m.insert((4, 2), [
            true, false, true, true, true, false, false, false, false, false, false, false,
        ]);
        m.insert((4, 4), [
            true, false, false, true, true, true, false, false, false, false, false, false,
        ]);
        m.insert((4, 5), [
            true, false, false, false, true, true, true, false, false, false, false, false,
        ]);
        m.insert((4, 11), [
            true, false, true, false, true, true, false, false, false, false, false, false,
        ]);
        m.insert((4, 12), [
            true, false, false, true, true, false, true, false, false, false, false, false,
        ]);
        m.insert((4, 13), [
            true, false, false, true, false, true, true, false, false, false, false, false,
        ]);
        m.insert((4, 14), [
            true, false, false, false, true, true, false, true, false, false, false, false,
        ]);
        m.insert((4, 15), [
            true, false, true, false, false, true, true, false, false, false, false, false,
        ]);
        m.insert((4, 16), [
            true, false, true, false, false, false, true, true, false, false, false, false,
        ]);
        m.insert((4, 18), [
            true, false, false, true, false, false, true, true, false, false, false, false,
        ]);
        m.insert((4, 19), [
            true, false, false, true, true, false, false, false, true, false, false, false,
        ]);
        m.insert((4, 22), [
            true, false, false, true, false, true, false, true, false, false, false, false,
        ]);
        m.insert((4, 27), [
            true, false, false, true, false, false, true, false, true, false, false, false,
        ]);
        m.insert((4, 29), [
            true, false, false, false, true, false, true, true, false, false, false, false,
        ]);
        m.insert((5, 2), [
            true, false, true, true, true, true, false, false, false, false, false, false,
        ]);
        m.insert((5, 3), [
            true, true, false, true, true, true, false, false, false, false, false, false,
        ]);
        m.insert((5, 4), [
            true, false, false, true, true, true, true, false, false, false, false, false,
        ]);
        m.insert((5, 5), [
            true, false, false, false, true, true, true, true, false, false, false, false,
        ]);
        m.insert((5, 6), [
            true, true, false, false, true, true, true, false, false, false, false, false,
        ]);
        m.insert((5, 7), [
            true, true, false, false, false, true, true, true, false, false, false, false,
        ]);
        m.insert((5, 9), [
            true, false, true, false, true, true, true, false, false, false, false, false,
        ]);
        m.insert((5, 10), [
            true, false, true, true, false, true, true, false, false, false, false, false,
        ]);
        m.insert((5, 11), [
            true, false, false, true, true, true, false, true, false, false, false, false,
        ]);
        m.insert((5, 13), [
            true, false, true, true, true, false, false, false, true, false, false, false,
        ]);
        m.insert((5, 14), [
            true, false, true, false, false, true, true, true, false, false, false, false,
        ]);
        m.insert((5, 16), [
            true, false, false, true, true, false, true, true, false, false, false, false,
        ]);
        m.insert((5, 18), [
            true, false, true, true, false, false, true, true, false, false, false, false,
        ]);
        m.insert((5, 19), [
            true, true, false, false, true, false, true, true, false, false, false, false,
        ]);
        m.insert((5, 20), [
            true, true, false, false, false, true, false, true, true, false, false, false,
        ]);
        m.insert((5, 21), [
            true, false, false, true, true, false, false, true, true, false, false, false,
        ]);
        m.insert((5, 23), [
            true, false, true, false, true, true, false, true, false, false, false, false,
        ]);
        m.insert((5, 24), [
            true, false, true, false, true, false, true, true, false, false, false, false,
        ]);
        m.insert((5, 25), [
            true, false, false, true, false, true, true, false, true, false, false, false,
        ]);
        m.insert((5, 26), [
            true, false, false, true, true, false, true, false, true, false, false, false,
        ]);
        m.insert((5, 27), [
            true, false, false, true, false, true, false, true, true, false, false, false,
        ]);
        m.insert((5, 28), [
            true, false, true, false, false, true, true, false, true, false, false, false,
        ]);
        m.insert((5, 29), [
            true, false, true, false, false, true, false, true, true, false, false, false,
        ]);
        m.insert((5, 30), [
            true, false, true, false, true, false, false, true, true, false, false, false,
        ]);
        m.insert((5, 31), [
            true, false, true, true, false, false, true, false, false, true, false, false,
        ]);
        m.insert((5, 32), [
            true, true, false, false, true, false, false, true, false, true, false, false,
        ]);
        m.insert((5, 36), [
            true, false, false, true, false, true, true, true, false, false, false, false,
        ]);
        m.insert((5, 38), [
            true, false, false, true, false, false, true, true, true, false, false, false,
        ]);
        m.insert((6, 2), [
            true, false, true, true, true, true, true, false, false, false, false, false,
        ]);
        m.insert((6, 3), [
            true, true, false, true, true, true, true, false, false, false, false, false,
        ]);
        m.insert((6, 5), [
            true, true, false, false, true, true, true, true, false, false, false, false,
        ]);
        m.insert((6, 9), [
            true, false, true, false, true, true, true, true, false, false, false, false,
        ]);
        m.insert((6, 10), [
            true, false, true, true, true, false, true, true, false, false, false, false,
        ]);
        m.insert((6, 11), [
            true, false, true, true, false, true, true, true, false, false, false, false,
        ]);
        m.insert((6, 12), [
            true, true, false, true, false, true, true, true, false, false, false, false,
        ]);
        m.insert((6, 14), [
            true, false, false, true, true, true, false, true, true, false, false, false,
        ]);
        m.insert((6, 15), [
            true, false, false, true, true, false, true, true, true, false, false, false,
        ]);
        m.insert((6, 16), [
            true, false, true, true, true, false, false, true, true, false, false, false,
        ]);
        m.insert((6, 17), [
            true, true, false, false, true, false, true, true, true, false, false, false,
        ]);
        m.insert((6, 18), [
            true, true, false, true, false, false, true, true, true, false, false, false,
        ]);
        m.insert((6, 19), [
            true, true, false, false, true, true, false, true, true, false, false, false,
        ]);
        m.insert((6, 21), [
            true, false, true, false, true, true, true, false, true, false, false, false,
        ]);
        m.insert((6, 22), [
            true, false, true, false, true, false, true, true, true, false, false, false,
        ]);
        m.insert((6, 24), [
            true, false, true, false, true, true, false, true, true, false, false, false,
        ]);
        m.insert((6, 25), [
            true, false, true, true, false, true, false, true, true, false, false, false,
        ]);
        m.insert((6, 27), [
            true, false, true, true, false, true, true, false, false, true, false, false,
        ]);
        m.insert((6, 30), [
            true, false, true, true, false, false, true, false, true, true, false, false,
        ]);
        m.insert((6, 31), [
            true, true, false, false, true, false, true, false, true, true, false, false,
        ]);
        m.insert((6, 33), [
            true, false, true, false, true, false, true, true, false, true, false, false,
        ]);
        m.insert((6, 34), [
            true, false, true, false, true, false, true, false, true, true, false, false,
        ]);
        m.insert((6, 36), [
            true, false, false, true, true, true, true, true, false, false, false, false,
        ]);
        m.insert((6, 39), [
            true, false, false, true, true, true, true, false, true, false, false, false,
        ]);
        m.insert((6, 40), [
            true, false, false, true, false, true, true, true, true, false, false, false,
        ]);
        m.insert((6, 41), [
            true, false, true, false, false, true, true, true, true, false, false, false,
        ]);
        m.insert((6, 43), [
            true, false, true, true, false, false, true, true, true, false, false, false,
        ]);
        m.insert((6, 44), [
            true, true, true, false, false, true, false, false, true, true, false, false,
        ]);
        m.insert((6, 46), [
            true, false, true, false, true, true, true, false, false, true, false, false,
        ]);
        m.insert((6, 47), [
            true, false, true, true, true, false, false, true, false, true, false, false,
        ]);
        m.insert((7, 2), [
            true, false, true, true, true, true, true, true, false, false, false, false,
        ]);
        m.insert((7, 3), [
            true, false, false, true, true, true, true, true, true, false, false, false,
        ]);
        m.insert((7, 4), [
            true, true, false, true, true, true, true, true, false, false, false, false,
        ]);
        m.insert((7, 5), [
            true, true, true, false, true, true, true, true, false, false, false, false,
        ]);
        m.insert((7, 6), [
            true, true, false, false, true, true, true, true, true, false, false, false,
        ]);
        m.insert((7, 7), [
            true, true, true, false, false, true, true, true, true, false, false, false,
        ]);
        m.insert((7, 9), [
            true, false, true, false, true, true, true, true, true, false, false, false,
        ]);
        m.insert((7, 10), [
            true, false, true, true, true, true, true, false, false, true, false, false,
        ]);
        m.insert((7, 11), [
            true, false, true, true, true, true, false, true, true, false, false, false,
        ]);
        m.insert((7, 13), [
            true, false, true, true, true, false, true, true, true, false, false, false,
        ]);
        m.insert((7, 14), [
            true, true, false, true, false, true, true, true, true, false, false, false,
        ]);
        m.insert((7, 16), [
            true, true, false, true, true, true, true, false, false, true, false, false,
        ]);
        m.insert((7, 18), [
            true, true, false, false, true, false, true, true, true, true, false, false,
        ]);
        m.insert((7, 19), [
            true, true, true, true, false, false, true, false, true, true, false, false,
        ]);
        m.insert((7, 20), [
            true, true, true, false, false, true, false, true, true, true, false, false,
        ]);
        m.insert((7, 21), [
            true, true, false, true, true, true, false, false, true, true, false, false,
        ]);
        m.insert((7, 23), [
            true, false, true, false, true, true, true, true, false, true, false, false,
        ]);
        m.insert((7, 24), [
            true, false, true, false, true, false, true, true, true, true, false, false,
        ]);
        m.insert((7, 25), [
            true, false, true, true, false, true, true, true, false, true, false, false,
        ]);
        m.insert((7, 26), [
            true, false, true, false, true, true, true, false, true, true, false, false,
        ]);
        m.insert((7, 27), [
            true, false, true, false, true, true, false, true, true, true, false, false,
        ]);
        m.insert((7, 28), [
            true, false, true, true, true, false, true, false, true, true, false, false,
        ]);
        m.insert((7, 29), [
            true, false, true, true, false, true, false, true, true, true, false, false,
        ]);
        m.insert((7, 30), [
            true, true, false, true, false, true, false, true, true, true, false, false,
        ]);
        m.insert((7, 31), [
            true, false, true, true, false, true, true, false, true, true, false, false,
        ]);
        m.insert((7, 32), [
            true, true, false, true, false, true, true, false, true, true, false, false,
        ]);
        m.insert((7, 36), [
            true, false, true, true, false, true, true, true, true, false, false, false,
        ]);
        m.insert((7, 38), [
            true, true, false, true, true, false, true, true, true, false, false, false,
        ]);
        m.insert((8, 2), [
            true, false, true, true, true, true, true, true, true, false, false, false,
        ]);
        m.insert((8, 4), [
            true, true, false, true, true, true, true, true, true, false, false, false,
        ]);
        m.insert((8, 5), [
            true, true, true, false, true, true, true, true, true, false, false, false,
        ]);
        m.insert((8, 11), [
            true, false, true, false, true, true, true, true, true, true, false, false,
        ]);
        m.insert((8, 12), [
            true, false, true, true, true, true, true, false, true, true, false, false,
        ]);
        m.insert((8, 13), [
            true, false, true, true, false, true, true, true, true, true, false, false,
        ]);
        m.insert((8, 14), [
            true, false, true, true, true, true, false, true, true, true, false, false,
        ]);
        m.insert((8, 15), [
            true, true, false, true, false, true, true, true, true, true, false, false,
        ]);
        m.insert((8, 16), [
            true, true, true, false, true, false, true, true, true, true, false, false,
        ]);
        m.insert((8, 18), [
            true, true, false, true, true, false, true, true, true, true, false, false,
        ]);
        m.insert((8, 19), [
            true, true, false, true, true, true, false, true, true, true, false, false,
        ]);
        m.insert((8, 22), [
            true, true, true, true, false, true, false, true, false, true, true, false,
        ]);
        m.insert((8, 27), [
            true, true, true, false, true, false, true, true, false, true, true, false,
        ]);
        m.insert((8, 29), [
            true, false, true, true, true, false, true, true, true, true, false, false,
        ]);
        m.insert((9, 2), [
            true, false, true, true, true, true, true, true, true, true, false, false,
        ]);
        m.insert((9, 3), [
            true, true, false, true, true, true, true, true, true, true, false, false,
        ]);
        m.insert((9, 4), [
            true, true, true, false, true, true, true, true, true, true, false, false,
        ]);
        m.insert((9, 5), [
            true, true, true, true, false, true, true, true, true, true, false, false,
        ]);
        m.insert((9, 7), [
            true, true, true, true, true, true, false, true, false, true, true, false,
        ]);
        m.insert((9, 8), [
            true, true, true, true, true, false, true, false, true, true, true, false,
        ]);
        m.insert((9, 11), [
            true, true, true, true, false, true, true, false, true, true, true, false,
        ]);
        m
    });

pub(super) static CARDINALITY_TO_CHORD_MEMBERS_GENERATED: CardinalityToChordMembers =
    LazyLock::new(|| {
        let inner_0 = HashMap::new();
        let mut inner_1 = HashMap::new();
        inner_1.insert(
            (1, Sign::Zero),
            (
                [
                    true, false, false, false, false, false, false, false, false, false, false,
                    false,
                ],
                [1, 1, 1, 1, 11, 11, 11, 11],
                [0, 0, 0, 0, 0, 0],
            ),
        );
        let mut inner_2 = HashMap::new();
        inner_2.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, false, false, false, false, false, false, false, false, false,
                    false,
                ],
                [1, 1, 0, 0, 9, 9, 8, 8],
                [1, 0, 0, 0, 0, 0],
            ),
        );
        inner_2.insert(
            (2, Sign::Zero),
            (
                [
                    true, false, true, false, false, false, false, false, false, false, false,
                    false,
                ],
                [1, 1, 1, 1, 9, 9, 9, 9],
                [0, 1, 0, 0, 0, 0],
            ),
        );
        inner_2.insert(
            (3, Sign::Zero),
            (
                [
                    true, false, false, true, false, false, false, false, false, false, false,
                    false,
                ],
                [1, 1, 1, 1, 9, 9, 9, 9],
                [0, 0, 1, 0, 0, 0],
            ),
        );
        inner_2.insert(
            (4, Sign::Zero),
            (
                [
                    true, false, false, false, true, false, false, false, false, false, false,
                    false,
                ],
                [1, 1, 1, 1, 9, 9, 9, 9],
                [0, 0, 0, 1, 0, 0],
            ),
        );
        inner_2.insert(
            (5, Sign::Zero),
            (
                [
                    true, false, false, false, false, true, false, false, false, false, false,
                    false,
                ],
                [1, 1, 0, 0, 9, 9, 8, 8],
                [0, 0, 0, 0, 1, 0],
            ),
        );
        inner_2.insert(
            (6, Sign::Zero),
            (
                [
                    true, false, false, false, false, false, true, false, false, false, false,
                    false,
                ],
                [2, 2, 2, 2, 10, 10, 10, 10],
                [0, 0, 0, 0, 0, 1],
            ),
        );
        let mut inner_3 = HashMap::new();
        inner_3.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, false, false, false, false, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 7, 7, 4, 4],
                [2, 1, 0, 0, 0, 0],
            ),
        );
        inner_3.insert(
            (2, Sign::One),
            (
                [
                    true, true, false, true, false, false, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 5, 6, 5, 5],
                [1, 1, 1, 0, 0, 0],
            ),
        );
        inner_3.insert(
            (2, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, false, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 5, 6, 5, 5],
                [1, 1, 1, 0, 0, 0],
            ),
        );
        inner_3.insert(
            (3, Sign::One),
            (
                [
                    true, true, false, false, true, false, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 5, 6, 5, 5],
                [1, 0, 1, 1, 0, 0],
            ),
        );
        inner_3.insert(
            (3, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, false, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 5, 6, 5, 5],
                [1, 0, 1, 1, 0, 0],
            ),
        );
        inner_3.insert(
            (4, Sign::One),
            (
                [
                    true, true, false, false, false, true, false, false, false, false, false, false,
                ],
                [1, 0, 1, 0, 5, 6, 5, 6],
                [1, 0, 0, 1, 1, 0],
            ),
        );
        inner_3.insert(
            (4, Sign::NegativeOne),
            (
                [
                    true, false, false, false, true, true, false, false, false, false, false, false,
                ],
                [1, 0, 1, 0, 5, 6, 5, 6],
                [1, 0, 0, 1, 1, 0],
            ),
        );
        inner_3.insert(
            (5, Sign::One),
            (
                [
                    true, true, false, false, false, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 1, 6, 7, 7, 6],
                [1, 0, 0, 0, 1, 1],
            ),
        );
        inner_3.insert(
            (5, Sign::NegativeOne),
            (
                [
                    true, false, false, false, false, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 1, 6, 7, 7, 6],
                [1, 0, 0, 0, 1, 1],
            ),
        );
        inner_3.insert(
            (6, Sign::Zero),
            (
                [
                    true, false, true, false, true, false, false, false, false, false, false, false,
                ],
                [1, 1, 1, 1, 7, 7, 7, 7],
                [0, 2, 0, 1, 0, 0],
            ),
        );
        inner_3.insert(
            (7, Sign::One),
            (
                [
                    true, false, true, false, false, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 5, 6, 5, 5],
                [0, 1, 1, 0, 1, 0],
            ),
        );
        inner_3.insert(
            (7, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 5, 6, 5, 5],
                [0, 1, 1, 0, 1, 0],
            ),
        );
        inner_3.insert(
            (8, Sign::One),
            (
                [
                    true, false, true, false, false, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 1, 6, 7, 7, 6],
                [0, 1, 0, 1, 0, 1],
            ),
        );
        inner_3.insert(
            (8, Sign::NegativeOne),
            (
                [
                    true, false, false, false, true, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 1, 6, 7, 7, 6],
                [0, 1, 0, 1, 0, 1],
            ),
        );
        inner_3.insert(
            (9, Sign::Zero),
            (
                [
                    true, false, true, false, false, false, false, true, false, false, false, false,
                ],
                [1, 1, 0, 0, 7, 7, 4, 4],
                [0, 1, 0, 0, 2, 0],
            ),
        );
        inner_3.insert(
            (10, Sign::Zero),
            (
                [
                    true, false, false, true, false, false, true, false, false, false, false, false,
                ],
                [1, 1, 1, 1, 8, 8, 8, 8],
                [0, 0, 2, 0, 0, 1],
            ),
        );
        inner_3.insert(
            (11, Sign::One),
            (
                [
                    true, false, false, true, false, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 5, 6, 5, 5],
                [0, 0, 1, 1, 1, 0],
            ),
        );
        inner_3.insert(
            (11, Sign::NegativeOne),
            (
                [
                    true, false, false, false, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 5, 6, 5, 5],
                [0, 0, 1, 1, 1, 0],
            ),
        );
        inner_3.insert(
            (12, Sign::Zero),
            (
                [
                    true, false, false, false, true, false, false, false, true, false, false, false,
                ],
                [3, 3, 3, 3, 9, 9, 9, 9],
                [0, 0, 0, 3, 0, 0],
            ),
        );
        let mut inner_4 = HashMap::new();
        inner_4.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, false, false, false, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 5, 5, 1, 1],
                [3, 2, 1, 0, 0, 0],
            ),
        );
        inner_4.insert(
            (2, Sign::One),
            (
                [
                    true, true, true, false, true, false, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 3, 4, 1, 1],
                [2, 2, 1, 1, 0, 0],
            ),
        );
        inner_4.insert(
            (2, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, false, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 3, 4, 1, 1],
                [2, 2, 1, 1, 0, 0],
            ),
        );
        inner_4.insert(
            (3, Sign::Zero),
            (
                [
                    true, true, false, true, true, false, false, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 3, 3, 2, 2],
                [2, 1, 2, 1, 0, 0],
            ),
        );
        inner_4.insert(
            (4, Sign::One),
            (
                [
                    true, true, true, false, false, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 3, 2, 3],
                [2, 1, 1, 1, 1, 0],
            ),
        );
        inner_4.insert(
            (4, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 3, 2, 3],
                [2, 1, 1, 1, 1, 0],
            ),
        );
        inner_4.insert(
            (5, Sign::One),
            (
                [
                    true, true, true, false, false, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 2, 4, 3, 2],
                [2, 1, 0, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (5, Sign::NegativeOne),
            (
                [
                    true, false, false, false, true, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 2, 4, 3, 2],
                [2, 1, 0, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (6, Sign::Zero),
            (
                [
                    true, true, true, false, false, false, false, true, false, false, false, false,
                ],
                [1, 1, 1, 1, 4, 4, 4, 4],
                [2, 1, 0, 0, 2, 1],
            ),
        );
        inner_4.insert(
            (7, Sign::Zero),
            (
                [
                    true, true, false, false, true, true, false, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 3, 3, 3, 3],
                [2, 0, 1, 2, 1, 0],
            ),
        );
        inner_4.insert(
            (8, Sign::Zero),
            (
                [
                    true, true, false, false, false, true, true, false, false, false, false, false,
                ],
                [1, 1, 1, 1, 4, 4, 4, 4],
                [2, 0, 0, 1, 2, 1],
            ),
        );
        inner_4.insert(
            (9, Sign::Zero),
            (
                [
                    true, true, false, false, false, false, true, true, false, false, false, false,
                ],
                [2, 2, 2, 2, 6, 6, 6, 6],
                [2, 0, 0, 0, 2, 2],
            ),
        );
        inner_4.insert(
            (10, Sign::Zero),
            (
                [
                    true, false, true, true, false, true, false, false, false, false, false, false,
                ],
                [1, 1, 1, 1, 3, 3, 3, 3],
                [1, 2, 2, 0, 1, 0],
            ),
        );
        inner_4.insert(
            (11, Sign::One),
            (
                [
                    true, true, false, true, false, true, false, false, false, false, false, false,
                ],
                [1, 0, 1, 0, 1, 3, 1, 3],
                [1, 2, 1, 1, 1, 0],
            ),
        );
        inner_4.insert(
            (11, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, false, false, false, false, false, false,
                ],
                [1, 0, 1, 0, 1, 3, 1, 3],
                [1, 2, 1, 1, 1, 0],
            ),
        );
        inner_4.insert(
            (12, Sign::One),
            (
                [
                    true, false, true, true, false, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 2, 4, 3, 2],
                [1, 1, 2, 1, 0, 1],
            ),
        );
        inner_4.insert(
            (12, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 2, 4, 3, 2],
                [1, 1, 2, 1, 0, 1],
            ),
        );
        inner_4.insert(
            (13, Sign::One),
            (
                [
                    true, true, false, true, false, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 1, 2, 4, 4, 2],
                [1, 1, 2, 0, 1, 1],
            ),
        );
        inner_4.insert(
            (13, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 1, 2, 4, 4, 2],
                [1, 1, 2, 0, 1, 1],
            ),
        );
        inner_4.insert(
            (14, Sign::One),
            (
                [
                    true, false, true, true, false, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 3, 2, 3],
                [1, 1, 1, 1, 2, 0],
            ),
        );
        inner_4.insert(
            (14, Sign::NegativeOne),
            (
                [
                    true, false, false, false, true, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 3, 2, 3],
                [1, 1, 1, 1, 2, 0],
            ),
        );
        inner_4.insert(
            (15, Sign::One),
            (
                [
                    true, true, false, false, true, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 3, 3, 1],
                [1, 1, 1, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (15, Sign::NegativeOne),
            (
                [
                    true, false, true, false, false, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 3, 3, 1],
                [1, 1, 1, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (16, Sign::One),
            (
                [
                    true, true, false, false, false, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 2, 4, 3, 2],
                [1, 1, 0, 1, 2, 1],
            ),
        );
        inner_4.insert(
            (16, Sign::NegativeOne),
            (
                [
                    true, false, true, false, false, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 2, 4, 3, 2],
                [1, 1, 0, 1, 2, 1],
            ),
        );
        inner_4.insert(
            (17, Sign::Zero),
            (
                [
                    true, false, false, true, true, false, false, true, false, false, false, false,
                ],
                [1, 1, 1, 1, 3, 3, 3, 3],
                [1, 0, 2, 2, 1, 0],
            ),
        );
        inner_4.insert(
            (18, Sign::One),
            (
                [
                    true, true, false, false, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 2, 4, 4, 2],
                [1, 0, 2, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (18, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 2, 4, 4, 2],
                [1, 0, 2, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (19, Sign::One),
            (
                [
                    true, true, false, false, true, false, false, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 3, 5, 3, 5],
                [1, 0, 1, 3, 1, 0],
            ),
        );
        inner_4.insert(
            (19, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, false, false, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 3, 5, 3, 5],
                [1, 0, 1, 3, 1, 0],
            ),
        );
        inner_4.insert(
            (20, Sign::Zero),
            (
                [
                    true, true, false, false, false, true, false, false, true, false, false, false,
                ],
                [1, 1, 0, 0, 3, 3, 3, 3],
                [1, 0, 1, 2, 2, 0],
            ),
        );
        inner_4.insert(
            (21, Sign::Zero),
            (
                [
                    true, false, true, false, true, false, true, false, false, false, false, false,
                ],
                [1, 1, 1, 1, 6, 6, 6, 6],
                [0, 3, 0, 2, 0, 1],
            ),
        );
        inner_4.insert(
            (22, Sign::One),
            (
                [
                    true, false, true, false, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 3, 4, 1, 1],
                [0, 2, 1, 1, 2, 0],
            ),
        );
        inner_4.insert(
            (22, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 3, 4, 1, 1],
                [0, 2, 1, 1, 2, 0],
            ),
        );
        inner_4.insert(
            (23, Sign::Zero),
            (
                [
                    true, false, true, false, false, true, false, true, false, false, false, false,
                ],
                [1, 1, 0, 0, 5, 5, 1, 1],
                [0, 2, 1, 0, 3, 0],
            ),
        );
        inner_4.insert(
            (24, Sign::Zero),
            (
                [
                    true, false, true, false, true, false, false, false, true, false, false, false,
                ],
                [1, 1, 1, 1, 6, 6, 6, 6],
                [0, 2, 0, 3, 0, 1],
            ),
        );
        inner_4.insert(
            (25, Sign::Zero),
            (
                [
                    true, false, true, false, false, false, true, false, true, false, false, false,
                ],
                [2, 2, 2, 2, 6, 6, 6, 6],
                [0, 2, 0, 2, 0, 2],
            ),
        );
        inner_4.insert(
            (26, Sign::Zero),
            (
                [
                    true, false, false, true, false, true, false, false, true, false, false, false,
                ],
                [1, 1, 0, 0, 3, 3, 2, 2],
                [0, 1, 2, 1, 2, 0],
            ),
        );
        inner_4.insert(
            (27, Sign::One),
            (
                [
                    true, false, true, false, false, true, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 2, 4, 3, 2],
                [0, 1, 2, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (27, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, false, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 2, 4, 3, 2],
                [0, 1, 2, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (28, Sign::Zero),
            (
                [
                    true, false, false, true, false, false, true, false, false, true, false, false,
                ],
                [4, 4, 4, 4, 8, 8, 8, 8],
                [0, 0, 4, 0, 0, 2],
            ),
        );
        inner_4.insert(
            (29, Sign::One),
            (
                [
                    true, true, false, true, false, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 3, 3, 1],
                [1, 1, 1, 1, 1, 1],
            ),
        );
        inner_4.insert(
            (29, Sign::NegativeOne),
            (
                [
                    true, false, false, false, true, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 3, 3, 1],
                [1, 1, 1, 1, 1, 1],
            ),
        );
        let mut inner_5 = HashMap::new();
        inner_5.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, true, false, false, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 3, 3, 0, 0],
                [4, 3, 2, 1, 0, 0],
            ),
        );
        inner_5.insert(
            (2, Sign::One),
            (
                [
                    true, true, true, true, false, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 2, 1, 1],
                [3, 3, 2, 1, 1, 0],
            ),
        );
        inner_5.insert(
            (2, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 2, 1, 1],
                [3, 3, 2, 1, 1, 0],
            ),
        );
        inner_5.insert(
            (3, Sign::One),
            (
                [
                    true, true, true, false, true, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 1, 1, 0],
                [3, 2, 2, 2, 1, 0],
            ),
        );
        inner_5.insert(
            (3, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, true, false, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 1, 1, 0],
                [3, 2, 2, 2, 1, 0],
            ),
        );
        inner_5.insert(
            (4, Sign::One),
            (
                [
                    true, true, true, true, false, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 0],
                [3, 2, 2, 1, 1, 1],
            ),
        );
        inner_5.insert(
            (4, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 0],
                [3, 2, 2, 1, 1, 1],
            ),
        );
        inner_5.insert(
            (5, Sign::One),
            (
                [
                    true, true, true, true, false, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 1],
                [3, 2, 1, 1, 2, 1],
            ),
        );
        inner_5.insert(
            (5, Sign::NegativeOne),
            (
                [
                    true, false, false, false, true, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 1],
                [3, 2, 1, 1, 2, 1],
            ),
        );
        inner_5.insert(
            (6, Sign::One),
            (
                [
                    true, true, true, false, false, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 1],
                [3, 1, 1, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (6, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 1],
                [3, 1, 1, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (7, Sign::One),
            (
                [
                    true, true, true, false, false, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 2, 3, 3, 2],
                [3, 1, 0, 1, 3, 2],
            ),
        );
        inner_5.insert(
            (7, Sign::NegativeOne),
            (
                [
                    true, true, false, false, false, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 2, 3, 3, 2],
                [3, 1, 0, 1, 3, 2],
            ),
        );
        inner_5.insert(
            (8, Sign::Zero),
            (
                [
                    true, false, true, true, true, false, true, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 2, 2, 0, 0],
                [2, 3, 2, 2, 0, 1],
            ),
        );
        inner_5.insert(
            (9, Sign::One),
            (
                [
                    true, true, true, false, true, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 1],
                [2, 3, 1, 2, 1, 1],
            ),
        );
        inner_5.insert(
            (9, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 1],
                [2, 3, 1, 2, 1, 1],
            ),
        );
        inner_5.insert(
            (10, Sign::One),
            (
                [
                    true, true, false, true, true, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [2, 2, 3, 1, 1, 1],
            ),
        );
        inner_5.insert(
            (10, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [2, 2, 3, 1, 1, 1],
            ),
        );
        inner_5.insert(
            (11, Sign::One),
            (
                [
                    true, false, true, true, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 1, 0, 1, 1, 1, 1],
                [2, 2, 2, 2, 2, 0],
            ),
        );
        inner_5.insert(
            (11, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, true, false, true, false, false, false, false,
                ],
                [1, 0, 1, 0, 1, 1, 1, 1],
                [2, 2, 2, 2, 2, 0],
            ),
        );
        inner_5.insert(
            (12, Sign::Zero),
            (
                [
                    true, true, false, true, false, true, true, false, false, false, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [2, 2, 2, 1, 2, 1],
            ),
        );
        inner_5.insert(
            (13, Sign::One),
            (
                [
                    true, true, true, false, true, false, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 1],
                [2, 2, 1, 3, 1, 1],
            ),
        );
        inner_5.insert(
            (13, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, false, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 1],
                [2, 2, 1, 3, 1, 1],
            ),
        );
        inner_5.insert(
            (14, Sign::One),
            (
                [
                    true, true, true, false, false, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 1],
                [2, 2, 1, 1, 3, 1],
            ),
        );
        inner_5.insert(
            (14, Sign::NegativeOne),
            (
                [
                    true, false, true, false, false, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 1],
                [2, 2, 1, 1, 3, 1],
            ),
        );
        inner_5.insert(
            (15, Sign::Zero),
            (
                [
                    true, true, true, false, false, false, true, false, true, false, false, false,
                ],
                [1, 1, 1, 1, 2, 2, 2, 2],
                [2, 2, 0, 2, 2, 2],
            ),
        );
        inner_5.insert(
            (16, Sign::One),
            (
                [
                    true, true, false, true, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [2, 1, 3, 2, 1, 1],
            ),
        );
        inner_5.insert(
            (16, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [2, 1, 3, 2, 1, 1],
            ),
        );
        inner_5.insert(
            (17, Sign::Zero),
            (
                [
                    true, true, false, true, true, false, false, false, true, false, false, false,
                ],
                [1, 1, 0, 0, 1, 1, 2, 2],
                [2, 1, 2, 3, 2, 0],
            ),
        );
        inner_5.insert(
            (18, Sign::One),
            (
                [
                    true, true, false, false, true, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [2, 1, 2, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (18, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [2, 1, 2, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (19, Sign::One),
            (
                [
                    true, true, false, true, false, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 0, 2, 2, 0],
                [2, 1, 2, 1, 2, 2],
            ),
        );
        inner_5.insert(
            (19, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 0, 2, 2, 0],
                [2, 1, 2, 1, 2, 2],
            ),
        );
        inner_5.insert(
            (20, Sign::One),
            (
                [
                    true, true, false, true, false, false, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 1],
                [2, 1, 1, 2, 3, 1],
            ),
        );
        inner_5.insert(
            (20, Sign::NegativeOne),
            (
                [
                    true, true, false, false, false, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 1],
                [2, 1, 1, 2, 3, 1],
            ),
        );
        inner_5.insert(
            (21, Sign::One),
            (
                [
                    true, true, false, false, true, true, false, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 3, 3, 3, 3],
                [2, 0, 2, 4, 2, 0],
            ),
        );
        inner_5.insert(
            (21, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, false, false, true, true, false, false, false,
                ],
                [1, 0, 1, 0, 3, 3, 3, 3],
                [2, 0, 2, 4, 2, 0],
            ),
        );
        inner_5.insert(
            (22, Sign::Zero),
            (
                [
                    true, true, false, false, true, false, false, true, true, false, false, false,
                ],
                [1, 1, 1, 1, 2, 2, 2, 2],
                [2, 0, 2, 3, 2, 1],
            ),
        );
        inner_5.insert(
            (23, Sign::One),
            (
                [
                    true, false, true, true, false, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 2, 1, 1],
                [1, 3, 2, 1, 3, 0],
            ),
        );
        inner_5.insert(
            (23, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 1, 2, 1, 1],
                [1, 3, 2, 1, 3, 0],
            ),
        );
        inner_5.insert(
            (24, Sign::One),
            (
                [
                    true, true, false, true, false, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 1],
                [1, 3, 1, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (24, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 1],
                [1, 3, 1, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (25, Sign::One),
            (
                [
                    true, false, true, true, false, true, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [1, 2, 3, 1, 2, 1],
            ),
        );
        inner_5.insert(
            (25, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [1, 2, 3, 1, 2, 1],
            ),
        );
        inner_5.insert(
            (26, Sign::One),
            (
                [
                    true, false, true, false, true, true, false, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 0, 2, 0, 2],
                [1, 2, 2, 3, 1, 1],
            ),
        );
        inner_5.insert(
            (26, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, false, true, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 0, 2, 0, 2],
                [1, 2, 2, 3, 1, 1],
            ),
        );
        inner_5.insert(
            (27, Sign::One),
            (
                [
                    true, true, false, true, false, true, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 1, 1, 1, 0],
                [1, 2, 2, 2, 3, 0],
            ),
        );
        inner_5.insert(
            (27, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 1, 1, 1, 0],
                [1, 2, 2, 2, 3, 0],
            ),
        );
        inner_5.insert(
            (28, Sign::One),
            (
                [
                    true, false, true, true, false, false, true, false, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 2, 2, 0],
                [1, 2, 2, 2, 1, 2],
            ),
        );
        inner_5.insert(
            (28, Sign::NegativeOne),
            (
                [
                    true, false, true, false, false, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 2, 2, 0],
                [1, 2, 2, 2, 1, 2],
            ),
        );
        inner_5.insert(
            (29, Sign::One),
            (
                [
                    true, true, false, true, false, false, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 0],
                [1, 2, 2, 1, 3, 1],
            ),
        );
        inner_5.insert(
            (29, Sign::NegativeOne),
            (
                [
                    true, false, true, false, false, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 0],
                [1, 2, 2, 1, 3, 1],
            ),
        );
        inner_5.insert(
            (30, Sign::One),
            (
                [
                    true, true, false, false, true, false, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 1],
                [1, 2, 1, 3, 2, 1],
            ),
        );
        inner_5.insert(
            (30, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, false, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 2, 0, 1],
                [1, 2, 1, 3, 2, 1],
            ),
        );
        inner_5.insert(
            (31, Sign::One),
            (
                [
                    true, true, false, true, false, false, true, false, false, true, false, false,
                ],
                [1, 0, 0, 1, 0, 3, 3, 0],
                [1, 1, 4, 1, 1, 2],
            ),
        );
        inner_5.insert(
            (31, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, false, true, false, false, true, false, false,
                ],
                [1, 0, 0, 1, 0, 3, 3, 0],
                [1, 1, 4, 1, 1, 2],
            ),
        );
        inner_5.insert(
            (32, Sign::One),
            (
                [
                    true, true, false, false, true, false, true, false, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [1, 1, 3, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (32, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, false, false, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [1, 1, 3, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (33, Sign::Zero),
            (
                [
                    true, false, true, false, true, false, true, false, true, false, false, false,
                ],
                [1, 1, 1, 1, 6, 6, 6, 6],
                [0, 4, 0, 4, 0, 2],
            ),
        );
        inner_5.insert(
            (34, Sign::Zero),
            (
                [
                    true, false, true, false, true, false, true, false, false, true, false, false,
                ],
                [1, 1, 0, 0, 2, 2, 0, 0],
                [0, 3, 2, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (35, Sign::Zero),
            (
                [
                    true, false, true, false, true, false, false, true, false, true, false, false,
                ],
                [1, 1, 0, 0, 3, 3, 0, 0],
                [0, 3, 2, 1, 4, 0],
            ),
        );
        inner_5.insert(
            (36, Sign::One),
            (
                [
                    true, true, true, false, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 0, 1, 1, 0],
                [2, 2, 2, 1, 2, 1],
            ),
        );
        inner_5.insert(
            (36, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 0, 1, 1, 0],
                [2, 2, 2, 1, 2, 1],
            ),
        );
        inner_5.insert(
            (37, Sign::Zero),
            (
                [
                    true, false, false, true, true, true, false, false, true, false, false, false,
                ],
                [1, 1, 0, 0, 1, 1, 2, 2],
                [2, 1, 2, 3, 2, 0],
            ),
        );
        inner_5.insert(
            (38, Sign::One),
            (
                [
                    true, true, true, false, false, true, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [2, 1, 2, 2, 2, 1],
            ),
        );
        inner_5.insert(
            (38, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 1, 0],
                [2, 1, 2, 2, 2, 1],
            ),
        );
        let mut inner_6 = HashMap::new();
        inner_6.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, false, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 1, 1, 0, 0],
                [5, 4, 3, 2, 1, 0],
            ),
        );
        inner_6.insert(
            (2, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [4, 4, 3, 2, 1, 1],
            ),
        );
        inner_6.insert(
            (2, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [4, 4, 3, 2, 1, 1],
            ),
        );
        inner_6.insert(
            (3, Sign::One),
            (
                [
                    true, true, true, true, false, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 3, 2, 2, 1],
            ),
        );
        inner_6.insert(
            (3, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, true, true, false, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 3, 2, 2, 1],
            ),
        );
        inner_6.insert(
            (4, Sign::Zero),
            (
                [
                    true, true, true, false, true, true, true, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [4, 3, 2, 3, 2, 1],
            ),
        );
        inner_6.insert(
            (5, Sign::One),
            (
                [
                    true, true, true, true, false, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [4, 2, 2, 2, 3, 2],
            ),
        );
        inner_6.insert(
            (5, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [4, 2, 2, 2, 3, 2],
            ),
        );
        inner_6.insert(
            (6, Sign::Zero),
            (
                [
                    true, true, true, false, false, true, true, true, false, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 1, 1],
                [4, 2, 1, 2, 4, 2],
            ),
        );
        inner_6.insert(
            (7, Sign::Zero),
            (
                [
                    true, true, true, false, false, false, true, true, true, false, false, false,
                ],
                [2, 2, 2, 2, 2, 2, 2, 2],
                [4, 2, 0, 2, 4, 3],
            ),
        );
        inner_6.insert(
            (8, Sign::Zero),
            (
                [
                    true, false, true, true, true, true, false, true, false, false, false, false,
                ],
                [1, 1, 1, 1, 1, 1, 1, 1],
                [3, 4, 3, 2, 3, 0],
            ),
        );
        inner_6.insert(
            (9, Sign::One),
            (
                [
                    true, true, true, true, false, true, false, true, false, false, false, false,
                ],
                [1, 0, 1, 0, 0, 1, 0, 1],
                [3, 4, 2, 2, 3, 1],
            ),
        );
        inner_6.insert(
            (9, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, true, true, false, false, false, false,
                ],
                [1, 0, 1, 0, 0, 1, 0, 1],
                [3, 4, 2, 2, 3, 1],
            ),
        );
        inner_6.insert(
            (10, Sign::One),
            (
                [
                    true, true, false, true, true, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 3, 3, 3, 2, 1],
            ),
        );
        inner_6.insert(
            (10, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 3, 3, 3, 2, 1],
            ),
        );
        inner_6.insert(
            (11, Sign::One),
            (
                [
                    true, true, true, false, true, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 1, 0],
                [3, 3, 3, 2, 3, 1],
            ),
        );
        inner_6.insert(
            (11, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 1, 0],
                [3, 3, 3, 2, 3, 1],
            ),
        );
        inner_6.insert(
            (12, Sign::One),
            (
                [
                    true, true, true, false, true, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 3, 2, 2, 3, 2],
            ),
        );
        inner_6.insert(
            (12, Sign::NegativeOne),
            (
                [
                    true, true, false, true, false, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 3, 2, 2, 3, 2],
            ),
        );
        inner_6.insert(
            (13, Sign::Zero),
            (
                [
                    true, true, false, true, true, false, true, true, false, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [3, 2, 4, 2, 2, 2],
            ),
        );
        inner_6.insert(
            (14, Sign::One),
            (
                [
                    true, true, false, true, true, true, false, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 1, 0, 1, 0],
                [3, 2, 3, 4, 3, 0],
            ),
        );
        inner_6.insert(
            (14, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, true, false, true, true, false, false, false,
                ],
                [1, 0, 1, 0, 1, 0, 1, 0],
                [3, 2, 3, 4, 3, 0],
            ),
        );
        inner_6.insert(
            (15, Sign::One),
            (
                [
                    true, true, true, false, true, true, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [3, 2, 3, 4, 2, 1],
            ),
        );
        inner_6.insert(
            (15, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [3, 2, 3, 4, 2, 1],
            ),
        );
        inner_6.insert(
            (16, Sign::One),
            (
                [
                    true, true, false, false, true, true, true, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 0, 1, 0, 1],
                [3, 2, 2, 4, 3, 1],
            ),
        );
        inner_6.insert(
            (16, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, false, false, true, true, false, false, false,
                ],
                [1, 0, 1, 0, 0, 1, 0, 1],
                [3, 2, 2, 4, 3, 1],
            ),
        );
        inner_6.insert(
            (17, Sign::One),
            (
                [
                    true, true, true, false, true, false, false, true, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 2, 2, 3, 3, 2],
            ),
        );
        inner_6.insert(
            (17, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 2, 2, 3, 3, 2],
            ),
        );
        inner_6.insert(
            (18, Sign::One),
            (
                [
                    true, true, true, false, false, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [3, 2, 2, 2, 4, 2],
            ),
        );
        inner_6.insert(
            (18, Sign::NegativeOne),
            (
                [
                    true, true, false, true, false, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [3, 2, 2, 2, 4, 2],
            ),
        );
        inner_6.insert(
            (19, Sign::One),
            (
                [
                    true, true, false, true, true, false, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 1, 0],
                [3, 1, 3, 4, 3, 1],
            ),
        );
        inner_6.insert(
            (19, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 1, 0],
                [3, 1, 3, 4, 3, 1],
            ),
        );
        inner_6.insert(
            (20, Sign::Zero),
            (
                [
                    true, true, false, false, true, true, false, false, true, true, false, false,
                ],
                [3, 3, 3, 3, 3, 3, 3, 3],
                [3, 0, 3, 6, 3, 0],
            ),
        );
        inner_6.insert(
            (21, Sign::One),
            (
                [
                    true, false, true, true, true, false, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [2, 4, 2, 4, 1, 2],
            ),
        );
        inner_6.insert(
            (21, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [2, 4, 2, 4, 1, 2],
            ),
        );
        inner_6.insert(
            (22, Sign::One),
            (
                [
                    true, true, true, false, true, false, true, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 0, 1, 0, 1],
                [2, 4, 1, 4, 2, 2],
            ),
        );
        inner_6.insert(
            (22, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, false, true, true, true, false, false, false,
                ],
                [1, 0, 1, 0, 0, 1, 0, 1],
                [2, 4, 1, 4, 2, 2],
            ),
        );
        inner_6.insert(
            (23, Sign::Zero),
            (
                [
                    true, false, true, true, false, true, true, false, true, false, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [2, 3, 4, 2, 2, 2],
            ),
        );
        inner_6.insert(
            (24, Sign::One),
            (
                [
                    true, true, false, true, true, false, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [2, 3, 3, 3, 3, 1],
            ),
        );
        inner_6.insert(
            (24, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [2, 3, 3, 3, 3, 1],
            ),
        );
        inner_6.insert(
            (25, Sign::One),
            (
                [
                    true, true, false, true, false, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [2, 3, 3, 2, 4, 1],
            ),
        );
        inner_6.insert(
            (25, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [2, 3, 3, 2, 4, 1],
            ),
        );
        inner_6.insert(
            (26, Sign::Zero),
            (
                [
                    true, true, false, true, false, true, false, true, true, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [2, 3, 2, 3, 4, 1],
            ),
        );
        inner_6.insert(
            (27, Sign::One),
            (
                [
                    true, true, false, true, true, false, true, false, false, true, false, false,
                ],
                [1, 0, 0, 1, 0, 1, 1, 0],
                [2, 2, 5, 2, 2, 2],
            ),
        );
        inner_6.insert(
            (27, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, true, false, false, true, false, false,
                ],
                [1, 0, 0, 1, 0, 1, 1, 0],
                [2, 2, 5, 2, 2, 2],
            ),
        );
        inner_6.insert(
            (28, Sign::Zero),
            (
                [
                    true, true, false, true, false, true, true, false, false, true, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [2, 2, 4, 3, 2, 2],
            ),
        );
        inner_6.insert(
            (29, Sign::Zero),
            (
                [
                    true, true, false, true, false, false, true, false, true, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [2, 2, 4, 2, 3, 2],
            ),
        );
        inner_6.insert(
            (30, Sign::One),
            (
                [
                    true, true, false, true, false, false, true, true, false, true, false, false,
                ],
                [2, 0, 0, 2, 0, 2, 2, 0],
                [2, 2, 4, 2, 2, 3],
            ),
        );
        inner_6.insert(
            (30, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, false, true, false, true, true, false, false,
                ],
                [2, 0, 0, 2, 0, 2, 2, 0],
                [2, 2, 4, 2, 2, 3],
            ),
        );
        inner_6.insert(
            (31, Sign::One),
            (
                [
                    true, true, false, true, false, true, false, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [2, 2, 3, 4, 3, 1],
            ),
        );
        inner_6.insert(
            (31, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, false, true, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [2, 2, 3, 4, 3, 1],
            ),
        );
        inner_6.insert(
            (32, Sign::Zero),
            (
                [
                    true, false, true, false, true, true, false, true, false, true, false, false,
                ],
                [1, 1, 0, 0, 1, 1, 0, 0],
                [1, 4, 3, 2, 5, 0],
            ),
        );
        inner_6.insert(
            (33, Sign::One),
            (
                [
                    true, false, true, true, false, true, false, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [1, 4, 3, 2, 4, 1],
            ),
        );
        inner_6.insert(
            (33, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, false, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [1, 4, 3, 2, 4, 1],
            ),
        );
        inner_6.insert(
            (34, Sign::One),
            (
                [
                    true, true, false, true, false, true, false, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [1, 4, 2, 4, 2, 2],
            ),
        );
        inner_6.insert(
            (34, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, false, true, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 1, 0, 0],
                [1, 4, 2, 4, 2, 2],
            ),
        );
        inner_6.insert(
            (35, Sign::Zero),
            (
                [
                    true, false, true, false, true, false, true, false, true, false, true, false,
                ],
                [6, 6, 6, 6, 6, 6, 6, 6],
                [0, 6, 0, 6, 0, 3],
            ),
        );
        inner_6.insert(
            (36, Sign::One),
            (
                [
                    true, true, true, true, true, false, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 3, 2, 2, 1],
            ),
        );
        inner_6.insert(
            (36, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 3, 2, 2, 1],
            ),
        );
        inner_6.insert(
            (37, Sign::Zero),
            (
                [
                    true, true, true, true, true, false, false, false, true, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [4, 3, 2, 3, 2, 1],
            ),
        );
        inner_6.insert(
            (38, Sign::Zero),
            (
                [
                    true, true, true, true, false, false, false, true, true, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 1, 1],
                [4, 2, 1, 2, 4, 2],
            ),
        );
        inner_6.insert(
            (39, Sign::One),
            (
                [
                    true, false, true, true, true, true, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 3, 3, 3, 2, 1],
            ),
        );
        inner_6.insert(
            (39, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 3, 3, 3, 2, 1],
            ),
        );
        inner_6.insert(
            (40, Sign::One),
            (
                [
                    true, true, true, true, false, true, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 1, 0],
                [3, 3, 3, 2, 3, 1],
            ),
        );
        inner_6.insert(
            (40, Sign::NegativeOne),
            (
                [
                    true, false, false, true, false, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 1, 0],
                [3, 3, 3, 2, 3, 1],
            ),
        );
        inner_6.insert(
            (41, Sign::One),
            (
                [
                    true, true, true, true, false, false, true, false, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 3, 2, 2, 3, 2],
            ),
        );
        inner_6.insert(
            (41, Sign::NegativeOne),
            (
                [
                    true, false, true, false, false, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 3, 2, 2, 3, 2],
            ),
        );
        inner_6.insert(
            (42, Sign::Zero),
            (
                [
                    true, true, true, true, false, false, true, false, false, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [3, 2, 4, 2, 2, 2],
            ),
        );
        inner_6.insert(
            (43, Sign::One),
            (
                [
                    true, true, true, false, false, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 2, 2, 3, 3, 2],
            ),
        );
        inner_6.insert(
            (43, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 2, 2, 3, 3, 2],
            ),
        );
        inner_6.insert(
            (44, Sign::One),
            (
                [
                    true, true, true, false, false, true, true, false, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 1, 0],
                [3, 1, 3, 4, 3, 1],
            ),
        );
        inner_6.insert(
            (44, Sign::NegativeOne),
            (
                [
                    true, true, true, false, false, true, false, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 1, 0],
                [3, 1, 3, 4, 3, 1],
            ),
        );
        inner_6.insert(
            (45, Sign::Zero),
            (
                [
                    true, false, true, true, true, false, true, false, false, true, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [2, 3, 4, 2, 2, 2],
            ),
        );
        inner_6.insert(
            (46, Sign::One),
            (
                [
                    true, true, true, false, true, false, true, false, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [2, 3, 3, 3, 3, 1],
            ),
        );
        inner_6.insert(
            (46, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, true, false, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [2, 3, 3, 3, 3, 1],
            ),
        );
        inner_6.insert(
            (47, Sign::One),
            (
                [
                    true, true, true, false, true, false, false, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [2, 3, 3, 2, 4, 1],
            ),
        );
        inner_6.insert(
            (47, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, false, false, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [2, 3, 3, 2, 4, 1],
            ),
        );
        inner_6.insert(
            (48, Sign::Zero),
            (
                [
                    true, true, true, false, false, true, false, true, false, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [2, 3, 2, 3, 4, 1],
            ),
        );
        inner_6.insert(
            (49, Sign::Zero),
            (
                [
                    true, true, false, true, true, false, false, true, false, true, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [2, 2, 4, 3, 2, 2],
            ),
        );
        inner_6.insert(
            (50, Sign::Zero),
            (
                [
                    true, true, false, false, true, false, true, true, false, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [2, 2, 4, 2, 3, 2],
            ),
        );
        let mut inner_7 = HashMap::new();
        inner_7.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, false, false, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [6, 5, 4, 3, 2, 1],
            ),
        );
        inner_7.insert(
            (2, Sign::One),
            (
                [
                    true, true, true, true, true, true, false, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 4, 3, 3, 1],
            ),
        );
        inner_7.insert(
            (2, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 4, 3, 3, 1],
            ),
        );
        inner_7.insert(
            (3, Sign::One),
            (
                [
                    true, true, true, true, true, true, false, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 4, 4, 4, 3, 1],
            ),
        );
        inner_7.insert(
            (3, Sign::NegativeOne),
            (
                [
                    true, false, false, true, true, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 4, 4, 4, 3, 1],
            ),
        );
        inner_7.insert(
            (4, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 4, 4, 3, 3, 2],
            ),
        );
        inner_7.insert(
            (4, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 4, 4, 3, 3, 2],
            ),
        );
        inner_7.insert(
            (5, Sign::One),
            (
                [
                    true, true, true, true, false, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 4, 3, 3, 4, 2],
            ),
        );
        inner_7.insert(
            (5, Sign::NegativeOne),
            (
                [
                    true, true, true, false, true, true, true, true, false, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 4, 3, 3, 4, 2],
            ),
        );
        inner_7.insert(
            (6, Sign::One),
            (
                [
                    true, true, true, true, true, false, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 3, 3, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (6, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 3, 3, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (7, Sign::One),
            (
                [
                    true, true, true, true, false, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [5, 3, 2, 3, 5, 3],
            ),
        );
        inner_7.insert(
            (7, Sign::NegativeOne),
            (
                [
                    true, true, true, false, false, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [5, 3, 2, 3, 5, 3],
            ),
        );
        inner_7.insert(
            (8, Sign::Zero),
            (
                [
                    true, false, true, true, true, true, true, false, true, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [4, 5, 4, 4, 2, 2],
            ),
        );
        inner_7.insert(
            (9, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 5, 3, 4, 3, 2],
            ),
        );
        inner_7.insert(
            (9, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 5, 3, 4, 3, 2],
            ),
        );
        inner_7.insert(
            (10, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, false, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 4, 5, 3, 3, 2],
            ),
        );
        inner_7.insert(
            (10, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, true, false, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 4, 5, 3, 3, 2],
            ),
        );
        inner_7.insert(
            (11, Sign::One),
            (
                [
                    true, true, false, true, true, true, true, false, true, false, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [4, 4, 4, 4, 4, 1],
            ),
        );
        inner_7.insert(
            (11, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, false, true, true, false, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [4, 4, 4, 4, 4, 1],
            ),
        );
        inner_7.insert(
            (12, Sign::Zero),
            (
                [
                    true, true, true, true, true, false, false, true, false, true, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [4, 4, 4, 3, 4, 2],
            ),
        );
        inner_7.insert(
            (13, Sign::One),
            (
                [
                    true, true, true, false, true, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 4, 3, 5, 3, 2],
            ),
        );
        inner_7.insert(
            (13, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 4, 3, 5, 3, 2],
            ),
        );
        inner_7.insert(
            (14, Sign::One),
            (
                [
                    true, true, true, true, false, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 4, 3, 3, 5, 2],
            ),
        );
        inner_7.insert(
            (14, Sign::NegativeOne),
            (
                [
                    true, true, false, true, false, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 4, 3, 3, 5, 2],
            ),
        );
        inner_7.insert(
            (15, Sign::Zero),
            (
                [
                    true, true, true, false, true, false, true, true, true, false, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [4, 4, 2, 4, 4, 3],
            ),
        );
        inner_7.insert(
            (16, Sign::One),
            (
                [
                    true, true, true, true, false, true, true, false, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 5, 4, 3, 2],
            ),
        );
        inner_7.insert(
            (16, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, true, true, false, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 5, 4, 3, 2],
            ),
        );
        inner_7.insert(
            (17, Sign::Zero),
            (
                [
                    true, true, true, false, true, true, true, false, false, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [4, 3, 4, 5, 4, 1],
            ),
        );
        inner_7.insert(
            (18, Sign::One),
            (
                [
                    true, true, true, true, false, true, false, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 4, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (18, Sign::NegativeOne),
            (
                [
                    true, true, false, false, true, false, true, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 4, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (19, Sign::One),
            (
                [
                    true, true, true, true, false, false, true, true, false, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [4, 3, 4, 3, 4, 3],
            ),
        );
        inner_7.insert(
            (19, Sign::NegativeOne),
            (
                [
                    true, true, true, true, false, false, true, false, true, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [4, 3, 4, 3, 4, 3],
            ),
        );
        inner_7.insert(
            (20, Sign::One),
            (
                [
                    true, true, true, false, true, false, false, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 3, 4, 5, 2],
            ),
        );
        inner_7.insert(
            (20, Sign::NegativeOne),
            (
                [
                    true, true, true, false, false, true, false, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 3, 4, 5, 2],
            ),
        );
        inner_7.insert(
            (21, Sign::One),
            (
                [
                    true, true, true, false, true, true, false, false, true, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [4, 2, 4, 6, 4, 1],
            ),
        );
        inner_7.insert(
            (21, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, true, false, false, true, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [4, 2, 4, 6, 4, 1],
            ),
        );
        inner_7.insert(
            (22, Sign::Zero),
            (
                [
                    true, true, true, false, false, true, true, false, true, true, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [4, 2, 4, 5, 4, 2],
            ),
        );
        inner_7.insert(
            (23, Sign::One),
            (
                [
                    true, false, true, true, true, true, false, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 5, 4, 3, 5, 1],
            ),
        );
        inner_7.insert(
            (23, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 5, 4, 3, 5, 1],
            ),
        );
        inner_7.insert(
            (24, Sign::One),
            (
                [
                    true, true, true, true, false, true, false, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 5, 3, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (24, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, false, true, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 5, 3, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (25, Sign::One),
            (
                [
                    true, false, true, true, true, false, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 4, 5, 3, 4, 2],
            ),
        );
        inner_7.insert(
            (25, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 4, 5, 3, 4, 2],
            ),
        );
        inner_7.insert(
            (26, Sign::One),
            (
                [
                    true, true, false, true, true, true, false, true, false, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [3, 4, 4, 5, 3, 2],
            ),
        );
        inner_7.insert(
            (26, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, true, false, true, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [3, 4, 4, 5, 3, 2],
            ),
        );
        inner_7.insert(
            (27, Sign::One),
            (
                [
                    true, true, true, false, true, true, false, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 4, 4, 4, 5, 1],
            ),
        );
        inner_7.insert(
            (27, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, false, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 4, 4, 4, 5, 1],
            ),
        );
        inner_7.insert(
            (28, Sign::One),
            (
                [
                    true, true, false, true, false, true, true, true, false, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 4, 4, 4, 3, 3],
            ),
        );
        inner_7.insert(
            (28, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, false, true, false, true, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 4, 4, 4, 3, 3],
            ),
        );
        inner_7.insert(
            (29, Sign::One),
            (
                [
                    true, true, true, false, true, false, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 4, 4, 3, 5, 2],
            ),
        );
        inner_7.insert(
            (29, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, false, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 4, 4, 3, 5, 2],
            ),
        );
        inner_7.insert(
            (30, Sign::One),
            (
                [
                    true, true, true, false, true, false, true, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 4, 3, 5, 4, 2],
            ),
        );
        inner_7.insert(
            (30, Sign::NegativeOne),
            (
                [
                    true, true, false, true, false, true, false, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 4, 3, 5, 4, 2],
            ),
        );
        inner_7.insert(
            (31, Sign::One),
            (
                [
                    true, true, false, true, true, false, true, true, false, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 3, 6, 3, 3, 3],
            ),
        );
        inner_7.insert(
            (31, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, true, false, true, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [3, 3, 6, 3, 3, 3],
            ),
        );
        inner_7.insert(
            (32, Sign::One),
            (
                [
                    true, true, false, true, true, false, true, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 3, 5, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (32, Sign::NegativeOne),
            (
                [
                    true, true, false, true, false, true, true, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [3, 3, 5, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (33, Sign::Zero),
            (
                [
                    true, true, true, false, true, false, true, false, true, false, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [2, 6, 2, 6, 2, 3],
            ),
        );
        inner_7.insert(
            (34, Sign::Zero),
            (
                [
                    true, true, false, true, true, false, true, false, true, false, true, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [2, 5, 4, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (35, Sign::Zero),
            (
                [
                    true, true, false, true, false, true, true, false, true, false, true, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [2, 5, 4, 3, 6, 1],
            ),
        );
        inner_7.insert(
            (36, Sign::One),
            (
                [
                    true, true, true, true, false, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [4, 4, 4, 3, 4, 2],
            ),
        );
        inner_7.insert(
            (36, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [4, 4, 4, 3, 4, 2],
            ),
        );
        inner_7.insert(
            (37, Sign::Zero),
            (
                [
                    true, true, false, true, true, true, false, true, true, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [4, 3, 4, 5, 4, 1],
            ),
        );
        inner_7.insert(
            (38, Sign::One),
            (
                [
                    true, true, true, false, true, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 4, 4, 4, 2],
            ),
        );
        inner_7.insert(
            (38, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 3, 4, 4, 4, 2],
            ),
        );
        let mut inner_8 = HashMap::new();
        inner_8.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, true, false, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [7, 6, 5, 4, 4, 2],
            ),
        );
        inner_8.insert(
            (2, Sign::One),
            (
                [
                    true, true, true, true, true, true, true, false, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 6, 5, 5, 4, 2],
            ),
        );
        inner_8.insert(
            (2, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 6, 5, 5, 4, 2],
            ),
        );
        inner_8.insert(
            (3, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, false, false, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [6, 5, 6, 5, 4, 2],
            ),
        );
        inner_8.insert(
            (4, Sign::One),
            (
                [
                    true, true, true, true, true, true, false, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 5, 5, 5, 5, 2],
            ),
        );
        inner_8.insert(
            (4, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 5, 5, 5, 5, 2],
            ),
        );
        inner_8.insert(
            (5, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 5, 4, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (5, Sign::NegativeOne),
            (
                [
                    true, true, true, false, true, true, true, true, true, false, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 5, 4, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (6, Sign::Zero),
            (
                [
                    true, true, true, true, false, true, true, true, true, false, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [6, 5, 4, 4, 6, 3],
            ),
        );
        inner_8.insert(
            (7, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, false, false, true, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [6, 4, 5, 6, 5, 2],
            ),
        );
        inner_8.insert(
            (8, Sign::Zero),
            (
                [
                    true, true, true, true, true, false, false, true, true, true, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [6, 4, 4, 5, 6, 3],
            ),
        );
        inner_8.insert(
            (9, Sign::Zero),
            (
                [
                    true, true, true, true, false, false, true, true, true, true, false, false,
                ],
                [2, 2, 2, 2, 0, 0, 0, 0],
                [6, 4, 4, 4, 6, 4],
            ),
        );
        inner_8.insert(
            (10, Sign::Zero),
            (
                [
                    true, false, true, true, true, true, true, true, false, true, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [5, 6, 6, 4, 5, 2],
            ),
        );
        inner_8.insert(
            (11, Sign::One),
            (
                [
                    true, true, true, true, true, true, false, true, false, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [5, 6, 5, 5, 5, 2],
            ),
        );
        inner_8.insert(
            (11, Sign::NegativeOne),
            (
                [
                    true, false, true, false, true, true, true, true, true, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [5, 6, 5, 5, 5, 2],
            ),
        );
        inner_8.insert(
            (12, Sign::One),
            (
                [
                    true, true, false, true, true, true, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 6, 5, 4, 3],
            ),
        );
        inner_8.insert(
            (12, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, true, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 6, 5, 4, 3],
            ),
        );
        inner_8.insert(
            (13, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, true, false, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [5, 5, 6, 4, 5, 3],
            ),
        );
        inner_8.insert(
            (13, Sign::NegativeOne),
            (
                [
                    true, false, true, true, false, true, true, true, true, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [5, 5, 6, 4, 5, 3],
            ),
        );
        inner_8.insert(
            (14, Sign::One),
            (
                [
                    true, true, true, false, true, true, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 6, 2],
            ),
        );
        inner_8.insert(
            (14, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, false, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 6, 2],
            ),
        );
        inner_8.insert(
            (15, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (15, Sign::NegativeOne),
            (
                [
                    true, true, false, true, false, true, true, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (16, Sign::One),
            (
                [
                    true, true, true, true, false, true, false, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 4, 5, 6, 3],
            ),
        );
        inner_8.insert(
            (16, Sign::NegativeOne),
            (
                [
                    true, true, true, false, true, false, true, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 4, 5, 6, 3],
            ),
        );
        inner_8.insert(
            (17, Sign::Zero),
            (
                [
                    true, true, false, true, true, true, true, false, true, true, false, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [5, 4, 6, 6, 5, 2],
            ),
        );
        inner_8.insert(
            (18, Sign::One),
            (
                [
                    true, true, true, true, false, true, true, false, true, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [5, 4, 6, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (18, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, false, true, true, true, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [5, 4, 6, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (19, Sign::One),
            (
                [
                    true, true, true, false, true, true, true, false, true, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [5, 4, 5, 7, 5, 2],
            ),
        );
        inner_8.insert(
            (19, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, true, false, true, true, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [5, 4, 5, 7, 5, 2],
            ),
        );
        inner_8.insert(
            (20, Sign::Zero),
            (
                [
                    true, true, true, false, true, true, false, true, true, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [5, 4, 5, 6, 6, 2],
            ),
        );
        inner_8.insert(
            (21, Sign::Zero),
            (
                [
                    true, true, true, true, true, false, true, false, true, false, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [4, 7, 4, 6, 4, 3],
            ),
        );
        inner_8.insert(
            (22, Sign::One),
            (
                [
                    true, true, true, true, false, true, true, false, true, false, true, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 6, 5, 5, 6, 2],
            ),
        );
        inner_8.insert(
            (22, Sign::NegativeOne),
            (
                [
                    true, true, true, true, false, true, false, true, false, true, true, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 6, 5, 5, 6, 2],
            ),
        );
        inner_8.insert(
            (23, Sign::Zero),
            (
                [
                    true, true, true, true, false, true, false, true, true, false, true, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [4, 6, 5, 4, 7, 2],
            ),
        );
        inner_8.insert(
            (24, Sign::Zero),
            (
                [
                    true, true, true, false, true, true, true, false, true, false, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [4, 6, 4, 7, 4, 3],
            ),
        );
        inner_8.insert(
            (25, Sign::Zero),
            (
                [
                    true, true, true, false, true, false, true, true, true, false, true, false,
                ],
                [2, 2, 2, 2, 0, 0, 0, 0],
                [4, 6, 4, 6, 4, 4],
            ),
        );
        inner_8.insert(
            (26, Sign::Zero),
            (
                [
                    true, true, true, false, true, true, false, true, false, true, true, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [4, 5, 6, 5, 6, 2],
            ),
        );
        inner_8.insert(
            (27, Sign::One),
            (
                [
                    true, true, true, false, true, true, false, true, true, false, true, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 5, 6, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (27, Sign::NegativeOne),
            (
                [
                    true, true, true, false, true, false, true, true, false, true, true, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [4, 5, 6, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (28, Sign::Zero),
            (
                [
                    true, true, false, true, true, false, true, true, false, true, true, false,
                ],
                [4, 4, 4, 4, 0, 0, 0, 0],
                [4, 4, 8, 4, 4, 4],
            ),
        );
        inner_8.insert(
            (29, Sign::One),
            (
                [
                    true, true, true, true, false, true, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 5, 3],
            ),
        );
        inner_8.insert(
            (29, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, false, true, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [5, 5, 5, 5, 5, 3],
            ),
        );
        let mut inner_9 = HashMap::new();
        inner_9.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, true, true, false, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [8, 7, 6, 6, 6, 3],
            ),
        );
        inner_9.insert(
            (2, Sign::One),
            (
                [
                    true, true, true, true, true, true, true, true, false, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [7, 7, 7, 6, 6, 3],
            ),
        );
        inner_9.insert(
            (2, Sign::NegativeOne),
            (
                [
                    true, false, true, true, true, true, true, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [7, 7, 7, 6, 6, 3],
            ),
        );
        inner_9.insert(
            (3, Sign::One),
            (
                [
                    true, true, true, true, true, true, true, false, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [7, 6, 7, 7, 6, 3],
            ),
        );
        inner_9.insert(
            (3, Sign::NegativeOne),
            (
                [
                    true, true, false, true, true, true, true, true, true, true, false, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [7, 6, 7, 7, 6, 3],
            ),
        );
        inner_9.insert(
            (4, Sign::One),
            (
                [
                    true, true, true, true, true, true, false, true, true, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [7, 6, 6, 7, 7, 3],
            ),
        );
        inner_9.insert(
            (4, Sign::NegativeOne),
            (
                [
                    true, true, true, false, true, true, true, true, true, true, false, false,
                ],
                [1, 0, 1, 0, 0, 0, 0, 0],
                [7, 6, 6, 7, 7, 3],
            ),
        );
        inner_9.insert(
            (5, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, true, true, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [7, 6, 6, 6, 7, 4],
            ),
        );
        inner_9.insert(
            (5, Sign::NegativeOne),
            (
                [
                    true, true, true, true, false, true, true, true, true, true, false, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [7, 6, 6, 6, 7, 4],
            ),
        );
        inner_9.insert(
            (6, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, false, true, false, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [6, 8, 6, 7, 6, 3],
            ),
        );
        inner_9.insert(
            (7, Sign::One),
            (
                [
                    true, true, true, true, true, true, false, true, true, false, true, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 7, 7, 6, 7, 3],
            ),
        );
        inner_9.insert(
            (7, Sign::NegativeOne),
            (
                [
                    true, true, true, true, true, true, false, true, false, true, true, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 7, 7, 6, 7, 3],
            ),
        );
        inner_9.insert(
            (8, Sign::One),
            (
                [
                    true, true, true, true, true, false, true, true, true, false, true, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [6, 7, 6, 7, 6, 4],
            ),
        );
        inner_9.insert(
            (8, Sign::NegativeOne),
            (
                [
                    true, true, true, true, true, false, true, false, true, true, true, false,
                ],
                [1, 0, 0, 1, 0, 0, 0, 0],
                [6, 7, 6, 7, 6, 4],
            ),
        );
        inner_9.insert(
            (9, Sign::Zero),
            (
                [
                    true, true, true, true, false, true, true, true, true, false, true, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [6, 7, 6, 6, 8, 3],
            ),
        );
        inner_9.insert(
            (10, Sign::Zero),
            (
                [
                    true, true, true, true, true, false, true, true, false, true, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [6, 6, 8, 6, 6, 4],
            ),
        );
        inner_9.insert(
            (11, Sign::One),
            (
                [
                    true, true, true, true, false, true, true, true, false, true, true, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 6, 7, 7, 7, 3],
            ),
        );
        inner_9.insert(
            (11, Sign::NegativeOne),
            (
                [
                    true, true, true, true, false, true, true, false, true, true, true, false,
                ],
                [1, 0, 0, 0, 0, 0, 0, 0],
                [6, 6, 7, 7, 7, 3],
            ),
        );
        inner_9.insert(
            (12, Sign::Zero),
            (
                [
                    true, true, true, false, true, true, true, false, true, true, true, false,
                ],
                [3, 3, 3, 3, 0, 0, 0, 0],
                [6, 6, 6, 9, 6, 3],
            ),
        );
        let mut inner_10 = HashMap::new();
        inner_10.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, true, true, true, false, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [9, 8, 8, 8, 8, 4],
            ),
        );
        inner_10.insert(
            (2, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, true, true, false, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [8, 9, 8, 8, 8, 4],
            ),
        );
        inner_10.insert(
            (3, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, true, false, true, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [8, 8, 9, 8, 8, 4],
            ),
        );
        inner_10.insert(
            (4, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, false, true, true, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [8, 8, 8, 9, 8, 4],
            ),
        );
        inner_10.insert(
            (5, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, false, true, true, true, true, false,
                ],
                [1, 1, 0, 0, 0, 0, 0, 0],
                [8, 8, 8, 8, 9, 4],
            ),
        );
        inner_10.insert(
            (6, Sign::Zero),
            (
                [
                    true, true, true, true, true, false, true, true, true, true, true, false,
                ],
                [2, 2, 2, 2, 0, 0, 0, 0],
                [8, 8, 8, 8, 8, 5],
            ),
        );
        let mut inner_11 = HashMap::new();
        inner_11.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, true, true, true, true, false,
                ],
                [1, 1, 1, 1, 0, 0, 0, 0],
                [10, 10, 10, 10, 10, 5],
            ),
        );
        let mut inner_12 = HashMap::new();
        inner_12.insert(
            (1, Sign::Zero),
            (
                [
                    true, true, true, true, true, true, true, true, true, true, true, true,
                ],
                [12, 12, 12, 12, 0, 0, 0, 0],
                [12, 12, 12, 12, 12, 6],
            ),
        );
        [
            inner_0, inner_1, inner_2, inner_3, inner_4, inner_5, inner_6, inner_7, inner_8,
            inner_9, inner_10, inner_11, inner_12,
        ]
    });

pub(super) static FORTE_NUMBER_WITH_INVERSION_TO_INDEX: ForteNumberWithInversionToIndex =
    LazyLock::new(|| {
        let mut m = HashMap::new();
        m.insert((1, 1, Sign::Zero), 1);
        m.insert((2, 1, Sign::Zero), 1);
        m.insert((2, 2, Sign::Zero), 2);
        m.insert((2, 3, Sign::Zero), 3);
        m.insert((2, 4, Sign::Zero), 4);
        m.insert((2, 5, Sign::Zero), 5);
        m.insert((2, 6, Sign::Zero), 6);
        m.insert((3, 1, Sign::Zero), 1);
        m.insert((3, 2, Sign::One), 2);
        m.insert((3, 2, Sign::NegativeOne), 3);
        m.insert((3, 3, Sign::One), 4);
        m.insert((3, 3, Sign::NegativeOne), 5);
        m.insert((3, 4, Sign::One), 6);
        m.insert((3, 4, Sign::NegativeOne), 7);
        m.insert((3, 5, Sign::One), 8);
        m.insert((3, 5, Sign::NegativeOne), 9);
        m.insert((3, 6, Sign::Zero), 10);
        m.insert((3, 7, Sign::One), 11);
        m.insert((3, 7, Sign::NegativeOne), 12);
        m.insert((3, 8, Sign::One), 13);
        m.insert((3, 8, Sign::NegativeOne), 14);
        m.insert((3, 9, Sign::Zero), 15);
        m.insert((3, 10, Sign::Zero), 16);
        m.insert((3, 11, Sign::One), 17);
        m.insert((3, 11, Sign::NegativeOne), 18);
        m.insert((3, 12, Sign::Zero), 19);
        m.insert((4, 1, Sign::Zero), 1);
        m.insert((4, 2, Sign::One), 2);
        m.insert((4, 2, Sign::NegativeOne), 3);
        m.insert((4, 3, Sign::Zero), 4);
        m.insert((4, 4, Sign::One), 5);
        m.insert((4, 4, Sign::NegativeOne), 6);
        m.insert((4, 5, Sign::One), 7);
        m.insert((4, 5, Sign::NegativeOne), 8);
        m.insert((4, 6, Sign::Zero), 9);
        m.insert((4, 7, Sign::Zero), 10);
        m.insert((4, 8, Sign::Zero), 11);
        m.insert((4, 9, Sign::Zero), 12);
        m.insert((4, 10, Sign::Zero), 13);
        m.insert((4, 11, Sign::One), 14);
        m.insert((4, 11, Sign::NegativeOne), 15);
        m.insert((4, 12, Sign::One), 16);
        m.insert((4, 12, Sign::NegativeOne), 17);
        m.insert((4, 13, Sign::One), 18);
        m.insert((4, 13, Sign::NegativeOne), 19);
        m.insert((4, 14, Sign::One), 20);
        m.insert((4, 14, Sign::NegativeOne), 21);
        m.insert((4, 15, Sign::One), 22);
        m.insert((4, 15, Sign::NegativeOne), 23);
        m.insert((4, 16, Sign::One), 24);
        m.insert((4, 16, Sign::NegativeOne), 25);
        m.insert((4, 17, Sign::Zero), 26);
        m.insert((4, 18, Sign::One), 27);
        m.insert((4, 18, Sign::NegativeOne), 28);
        m.insert((4, 19, Sign::One), 29);
        m.insert((4, 19, Sign::NegativeOne), 30);
        m.insert((4, 20, Sign::Zero), 31);
        m.insert((4, 21, Sign::Zero), 32);
        m.insert((4, 22, Sign::One), 33);
        m.insert((4, 22, Sign::NegativeOne), 34);
        m.insert((4, 23, Sign::Zero), 35);
        m.insert((4, 24, Sign::Zero), 36);
        m.insert((4, 25, Sign::Zero), 37);
        m.insert((4, 26, Sign::Zero), 38);
        m.insert((4, 27, Sign::One), 39);
        m.insert((4, 27, Sign::NegativeOne), 40);
        m.insert((4, 28, Sign::Zero), 41);
        m.insert((4, 29, Sign::One), 42);
        m.insert((4, 29, Sign::NegativeOne), 43);
        m.insert((5, 1, Sign::Zero), 1);
        m.insert((5, 2, Sign::One), 2);
        m.insert((5, 2, Sign::NegativeOne), 3);
        m.insert((5, 3, Sign::One), 4);
        m.insert((5, 3, Sign::NegativeOne), 5);
        m.insert((5, 4, Sign::One), 6);
        m.insert((5, 4, Sign::NegativeOne), 7);
        m.insert((5, 5, Sign::One), 8);
        m.insert((5, 5, Sign::NegativeOne), 9);
        m.insert((5, 6, Sign::One), 10);
        m.insert((5, 6, Sign::NegativeOne), 11);
        m.insert((5, 7, Sign::One), 12);
        m.insert((5, 7, Sign::NegativeOne), 13);
        m.insert((5, 8, Sign::Zero), 14);
        m.insert((5, 9, Sign::One), 15);
        m.insert((5, 9, Sign::NegativeOne), 16);
        m.insert((5, 10, Sign::One), 17);
        m.insert((5, 10, Sign::NegativeOne), 18);
        m.insert((5, 11, Sign::One), 19);
        m.insert((5, 11, Sign::NegativeOne), 20);
        m.insert((5, 12, Sign::Zero), 21);
        m.insert((5, 13, Sign::One), 22);
        m.insert((5, 13, Sign::NegativeOne), 23);
        m.insert((5, 14, Sign::One), 24);
        m.insert((5, 14, Sign::NegativeOne), 25);
        m.insert((5, 15, Sign::Zero), 26);
        m.insert((5, 16, Sign::One), 27);
        m.insert((5, 16, Sign::NegativeOne), 28);
        m.insert((5, 17, Sign::Zero), 29);
        m.insert((5, 18, Sign::One), 30);
        m.insert((5, 18, Sign::NegativeOne), 31);
        m.insert((5, 19, Sign::One), 32);
        m.insert((5, 19, Sign::NegativeOne), 33);
        m.insert((5, 20, Sign::One), 34);
        m.insert((5, 20, Sign::NegativeOne), 35);
        m.insert((5, 21, Sign::One), 36);
        m.insert((5, 21, Sign::NegativeOne), 37);
        m.insert((5, 22, Sign::Zero), 38);
        m.insert((5, 23, Sign::One), 39);
        m.insert((5, 23, Sign::NegativeOne), 40);
        m.insert((5, 24, Sign::One), 41);
        m.insert((5, 24, Sign::NegativeOne), 42);
        m.insert((5, 25, Sign::One), 43);
        m.insert((5, 25, Sign::NegativeOne), 44);
        m.insert((5, 26, Sign::One), 45);
        m.insert((5, 26, Sign::NegativeOne), 46);
        m.insert((5, 27, Sign::One), 47);
        m.insert((5, 27, Sign::NegativeOne), 48);
        m.insert((5, 28, Sign::One), 49);
        m.insert((5, 28, Sign::NegativeOne), 50);
        m.insert((5, 29, Sign::One), 51);
        m.insert((5, 29, Sign::NegativeOne), 52);
        m.insert((5, 30, Sign::One), 53);
        m.insert((5, 30, Sign::NegativeOne), 54);
        m.insert((5, 31, Sign::One), 55);
        m.insert((5, 31, Sign::NegativeOne), 56);
        m.insert((5, 32, Sign::One), 57);
        m.insert((5, 32, Sign::NegativeOne), 58);
        m.insert((5, 33, Sign::Zero), 59);
        m.insert((5, 34, Sign::Zero), 60);
        m.insert((5, 35, Sign::Zero), 61);
        m.insert((5, 36, Sign::One), 62);
        m.insert((5, 36, Sign::NegativeOne), 63);
        m.insert((5, 37, Sign::Zero), 64);
        m.insert((5, 38, Sign::One), 65);
        m.insert((5, 38, Sign::NegativeOne), 66);
        m.insert((6, 1, Sign::Zero), 1);
        m.insert((6, 2, Sign::One), 2);
        m.insert((6, 2, Sign::NegativeOne), 3);
        m.insert((6, 3, Sign::One), 4);
        m.insert((6, 3, Sign::NegativeOne), 5);
        m.insert((6, 4, Sign::Zero), 6);
        m.insert((6, 5, Sign::One), 7);
        m.insert((6, 5, Sign::NegativeOne), 8);
        m.insert((6, 6, Sign::Zero), 9);
        m.insert((6, 7, Sign::Zero), 10);
        m.insert((6, 8, Sign::Zero), 11);
        m.insert((6, 9, Sign::One), 12);
        m.insert((6, 9, Sign::NegativeOne), 13);
        m.insert((6, 10, Sign::One), 14);
        m.insert((6, 10, Sign::NegativeOne), 15);
        m.insert((6, 11, Sign::One), 16);
        m.insert((6, 11, Sign::NegativeOne), 17);
        m.insert((6, 12, Sign::One), 18);
        m.insert((6, 12, Sign::NegativeOne), 19);
        m.insert((6, 13, Sign::Zero), 20);
        m.insert((6, 14, Sign::One), 21);
        m.insert((6, 14, Sign::NegativeOne), 22);
        m.insert((6, 15, Sign::One), 23);
        m.insert((6, 15, Sign::NegativeOne), 24);
        m.insert((6, 16, Sign::One), 25);
        m.insert((6, 16, Sign::NegativeOne), 26);
        m.insert((6, 17, Sign::One), 27);
        m.insert((6, 17, Sign::NegativeOne), 28);
        m.insert((6, 18, Sign::One), 29);
        m.insert((6, 18, Sign::NegativeOne), 30);
        m.insert((6, 19, Sign::One), 31);
        m.insert((6, 19, Sign::NegativeOne), 32);
        m.insert((6, 20, Sign::Zero), 33);
        m.insert((6, 21, Sign::One), 34);
        m.insert((6, 21, Sign::NegativeOne), 35);
        m.insert((6, 22, Sign::One), 36);
        m.insert((6, 22, Sign::NegativeOne), 37);
        m.insert((6, 23, Sign::Zero), 38);
        m.insert((6, 24, Sign::One), 39);
        m.insert((6, 24, Sign::NegativeOne), 40);
        m.insert((6, 25, Sign::One), 41);
        m.insert((6, 25, Sign::NegativeOne), 42);
        m.insert((6, 26, Sign::Zero), 43);
        m.insert((6, 27, Sign::One), 44);
        m.insert((6, 27, Sign::NegativeOne), 45);
        m.insert((6, 28, Sign::Zero), 46);
        m.insert((6, 29, Sign::Zero), 47);
        m.insert((6, 30, Sign::One), 48);
        m.insert((6, 30, Sign::NegativeOne), 49);
        m.insert((6, 31, Sign::One), 50);
        m.insert((6, 31, Sign::NegativeOne), 51);
        m.insert((6, 32, Sign::Zero), 52);
        m.insert((6, 33, Sign::One), 53);
        m.insert((6, 33, Sign::NegativeOne), 54);
        m.insert((6, 34, Sign::One), 55);
        m.insert((6, 34, Sign::NegativeOne), 56);
        m.insert((6, 35, Sign::Zero), 57);
        m.insert((6, 36, Sign::One), 58);
        m.insert((6, 36, Sign::NegativeOne), 59);
        m.insert((6, 37, Sign::Zero), 60);
        m.insert((6, 38, Sign::Zero), 61);
        m.insert((6, 39, Sign::One), 62);
        m.insert((6, 39, Sign::NegativeOne), 63);
        m.insert((6, 40, Sign::One), 64);
        m.insert((6, 40, Sign::NegativeOne), 65);
        m.insert((6, 41, Sign::One), 66);
        m.insert((6, 41, Sign::NegativeOne), 67);
        m.insert((6, 42, Sign::Zero), 68);
        m.insert((6, 43, Sign::One), 69);
        m.insert((6, 43, Sign::NegativeOne), 70);
        m.insert((6, 44, Sign::One), 71);
        m.insert((6, 44, Sign::NegativeOne), 72);
        m.insert((6, 45, Sign::Zero), 73);
        m.insert((6, 46, Sign::One), 74);
        m.insert((6, 46, Sign::NegativeOne), 75);
        m.insert((6, 47, Sign::One), 76);
        m.insert((6, 47, Sign::NegativeOne), 77);
        m.insert((6, 48, Sign::Zero), 78);
        m.insert((6, 49, Sign::Zero), 79);
        m.insert((6, 50, Sign::Zero), 80);
        m.insert((7, 1, Sign::Zero), 1);
        m.insert((7, 2, Sign::One), 2);
        m.insert((7, 2, Sign::NegativeOne), 3);
        m.insert((7, 3, Sign::One), 4);
        m.insert((7, 3, Sign::NegativeOne), 5);
        m.insert((7, 4, Sign::One), 6);
        m.insert((7, 4, Sign::NegativeOne), 7);
        m.insert((7, 5, Sign::One), 8);
        m.insert((7, 5, Sign::NegativeOne), 9);
        m.insert((7, 6, Sign::One), 10);
        m.insert((7, 6, Sign::NegativeOne), 11);
        m.insert((7, 7, Sign::One), 12);
        m.insert((7, 7, Sign::NegativeOne), 13);
        m.insert((7, 8, Sign::Zero), 14);
        m.insert((7, 9, Sign::One), 15);
        m.insert((7, 9, Sign::NegativeOne), 16);
        m.insert((7, 10, Sign::One), 17);
        m.insert((7, 10, Sign::NegativeOne), 18);
        m.insert((7, 11, Sign::One), 19);
        m.insert((7, 11, Sign::NegativeOne), 20);
        m.insert((7, 12, Sign::Zero), 21);
        m.insert((7, 13, Sign::One), 22);
        m.insert((7, 13, Sign::NegativeOne), 23);
        m.insert((7, 14, Sign::One), 24);
        m.insert((7, 14, Sign::NegativeOne), 25);
        m.insert((7, 15, Sign::Zero), 26);
        m.insert((7, 16, Sign::One), 27);
        m.insert((7, 16, Sign::NegativeOne), 28);
        m.insert((7, 17, Sign::Zero), 29);
        m.insert((7, 18, Sign::One), 30);
        m.insert((7, 18, Sign::NegativeOne), 31);
        m.insert((7, 19, Sign::One), 32);
        m.insert((7, 19, Sign::NegativeOne), 33);
        m.insert((7, 20, Sign::One), 34);
        m.insert((7, 20, Sign::NegativeOne), 35);
        m.insert((7, 21, Sign::One), 36);
        m.insert((7, 21, Sign::NegativeOne), 37);
        m.insert((7, 22, Sign::Zero), 38);
        m.insert((7, 23, Sign::One), 39);
        m.insert((7, 23, Sign::NegativeOne), 40);
        m.insert((7, 24, Sign::One), 41);
        m.insert((7, 24, Sign::NegativeOne), 42);
        m.insert((7, 25, Sign::One), 43);
        m.insert((7, 25, Sign::NegativeOne), 44);
        m.insert((7, 26, Sign::One), 45);
        m.insert((7, 26, Sign::NegativeOne), 46);
        m.insert((7, 27, Sign::One), 47);
        m.insert((7, 27, Sign::NegativeOne), 48);
        m.insert((7, 28, Sign::One), 49);
        m.insert((7, 28, Sign::NegativeOne), 50);
        m.insert((7, 29, Sign::One), 51);
        m.insert((7, 29, Sign::NegativeOne), 52);
        m.insert((7, 30, Sign::One), 53);
        m.insert((7, 30, Sign::NegativeOne), 54);
        m.insert((7, 31, Sign::One), 55);
        m.insert((7, 31, Sign::NegativeOne), 56);
        m.insert((7, 32, Sign::One), 57);
        m.insert((7, 32, Sign::NegativeOne), 58);
        m.insert((7, 33, Sign::Zero), 59);
        m.insert((7, 34, Sign::Zero), 60);
        m.insert((7, 35, Sign::Zero), 61);
        m.insert((7, 36, Sign::One), 62);
        m.insert((7, 36, Sign::NegativeOne), 63);
        m.insert((7, 37, Sign::Zero), 64);
        m.insert((7, 38, Sign::One), 65);
        m.insert((7, 38, Sign::NegativeOne), 66);
        m.insert((8, 1, Sign::Zero), 1);
        m.insert((8, 2, Sign::One), 2);
        m.insert((8, 2, Sign::NegativeOne), 3);
        m.insert((8, 3, Sign::Zero), 4);
        m.insert((8, 4, Sign::One), 5);
        m.insert((8, 4, Sign::NegativeOne), 6);
        m.insert((8, 5, Sign::One), 7);
        m.insert((8, 5, Sign::NegativeOne), 8);
        m.insert((8, 6, Sign::Zero), 9);
        m.insert((8, 7, Sign::Zero), 10);
        m.insert((8, 8, Sign::Zero), 11);
        m.insert((8, 9, Sign::Zero), 12);
        m.insert((8, 10, Sign::Zero), 13);
        m.insert((8, 11, Sign::One), 14);
        m.insert((8, 11, Sign::NegativeOne), 15);
        m.insert((8, 12, Sign::One), 16);
        m.insert((8, 12, Sign::NegativeOne), 17);
        m.insert((8, 13, Sign::One), 18);
        m.insert((8, 13, Sign::NegativeOne), 19);
        m.insert((8, 14, Sign::One), 20);
        m.insert((8, 14, Sign::NegativeOne), 21);
        m.insert((8, 15, Sign::One), 22);
        m.insert((8, 15, Sign::NegativeOne), 23);
        m.insert((8, 16, Sign::One), 24);
        m.insert((8, 16, Sign::NegativeOne), 25);
        m.insert((8, 17, Sign::Zero), 26);
        m.insert((8, 18, Sign::One), 27);
        m.insert((8, 18, Sign::NegativeOne), 28);
        m.insert((8, 19, Sign::One), 29);
        m.insert((8, 19, Sign::NegativeOne), 30);
        m.insert((8, 20, Sign::Zero), 31);
        m.insert((8, 21, Sign::Zero), 32);
        m.insert((8, 22, Sign::One), 33);
        m.insert((8, 22, Sign::NegativeOne), 34);
        m.insert((8, 23, Sign::Zero), 35);
        m.insert((8, 24, Sign::Zero), 36);
        m.insert((8, 25, Sign::Zero), 37);
        m.insert((8, 26, Sign::Zero), 38);
        m.insert((8, 27, Sign::One), 39);
        m.insert((8, 27, Sign::NegativeOne), 40);
        m.insert((8, 28, Sign::Zero), 41);
        m.insert((8, 29, Sign::One), 42);
        m.insert((8, 29, Sign::NegativeOne), 43);
        m.insert((9, 1, Sign::Zero), 1);
        m.insert((9, 2, Sign::One), 2);
        m.insert((9, 2, Sign::NegativeOne), 3);
        m.insert((9, 3, Sign::One), 4);
        m.insert((9, 3, Sign::NegativeOne), 5);
        m.insert((9, 4, Sign::One), 6);
        m.insert((9, 4, Sign::NegativeOne), 7);
        m.insert((9, 5, Sign::One), 8);
        m.insert((9, 5, Sign::NegativeOne), 9);
        m.insert((9, 6, Sign::Zero), 10);
        m.insert((9, 7, Sign::One), 11);
        m.insert((9, 7, Sign::NegativeOne), 12);
        m.insert((9, 8, Sign::One), 13);
        m.insert((9, 8, Sign::NegativeOne), 14);
        m.insert((9, 9, Sign::Zero), 15);
        m.insert((9, 10, Sign::Zero), 16);
        m.insert((9, 11, Sign::One), 17);
        m.insert((9, 11, Sign::NegativeOne), 18);
        m.insert((9, 12, Sign::Zero), 19);
        m.insert((10, 1, Sign::Zero), 1);
        m.insert((10, 2, Sign::Zero), 2);
        m.insert((10, 3, Sign::Zero), 3);
        m.insert((10, 4, Sign::Zero), 4);
        m.insert((10, 5, Sign::Zero), 5);
        m.insert((10, 6, Sign::Zero), 6);
        m.insert((11, 1, Sign::Zero), 1);
        m.insert((12, 1, Sign::Zero), 1);
        m
    });

pub(super) static TN_INDEX_TO_CHORD_INFO: TnIndexToChordInfo = LazyLock::new(|| {
    let mut m = HashMap::new();
    m.insert(
        (1, 1, Sign::Zero),
        Some(vec!["unison", "monad", "singleton"]),
    );
    m.insert(
        (2, 1, Sign::Zero),
        Some(vec![
            "interval class 1",
            "minor second",
            "m2",
            "half step",
            "semitone",
        ]),
    );
    m.insert(
        (2, 2, Sign::Zero),
        Some(vec![
            "interval class 2",
            "major second",
            "M2",
            "whole step",
            "whole tone",
        ]),
    );
    m.insert(
        (2, 3, Sign::Zero),
        Some(vec!["interval class 3", "minor third", "m3"]),
    );
    m.insert(
        (2, 4, Sign::Zero),
        Some(vec!["interval class 4", "major third", "M3"]),
    );
    m.insert(
        (2, 5, Sign::Zero),
        Some(vec!["interval class 5", "perfect fourth", "P4"]),
    );
    m.insert(
        (2, 6, Sign::Zero),
        Some(vec!["tritone", "diminished fifth", "augmented fourth"]),
    );
    m.insert((3, 1, Sign::Zero), Some(vec!["chromatic trimirror"]));
    m.insert((3, 2, Sign::One), Some(vec!["phrygian trichord"]));
    m.insert((3, 2, Sign::NegativeOne), Some(vec!["minor trichord"]));
    m.insert((3, 3, Sign::One), Some(vec!["major-minor trichord"]));
    m.insert(
        (3, 3, Sign::NegativeOne),
        Some(vec!["major-minor trichord"]),
    );
    m.insert(
        (3, 4, Sign::One),
        Some(vec!["incomplete major-seventh chord"]),
    );
    m.insert(
        (3, 4, Sign::NegativeOne),
        Some(vec!["incomplete major-seventh chord"]),
    );
    m.insert((3, 5, Sign::One), Some(vec!["tritone-fourth"]));
    m.insert((3, 5, Sign::NegativeOne), Some(vec!["tritone-fourth"]));
    m.insert((3, 6, Sign::Zero), Some(vec!["whole-tone trichord"]));
    m.insert(
        (3, 7, Sign::One),
        Some(vec!["incomplete minor-seventh chord"]),
    );
    m.insert(
        (3, 7, Sign::NegativeOne),
        Some(vec!["incomplete dominant-seventh chord"]),
    );
    m.insert(
        (3, 8, Sign::One),
        Some(vec![
            "incomplete dominant-seventh chord",
            "Italian augmented sixth chord",
        ]),
    );
    m.insert(
        (3, 8, Sign::NegativeOne),
        Some(vec!["incomplete half-diminished seventh chord"]),
    );
    m.insert((3, 9, Sign::Zero), Some(vec!["quartal trichord"]));
    m.insert((3, 10, Sign::Zero), Some(vec!["diminished triad"]));
    m.insert((3, 11, Sign::One), Some(vec!["minor triad"]));
    m.insert((3, 11, Sign::NegativeOne), Some(vec!["major triad"]));
    m.insert(
        (3, 12, Sign::Zero),
        Some(vec!["augmented triad", "equal 3-part octave division"]),
    );
    m.insert(
        (4, 1, Sign::Zero),
        Some(vec!["chromatic tetramirror", "BACH"]),
    );
    m.insert((4, 2, Sign::One), Some(vec!["major-second tetracluster"]));
    m.insert(
        (4, 2, Sign::NegativeOne),
        Some(vec!["major-second tetracluster"]),
    );
    m.insert((4, 3, Sign::Zero), Some(vec!["alternating tetramirror"]));
    m.insert((4, 4, Sign::One), Some(vec!["minor third tetracluster"]));
    m.insert(
        (4, 4, Sign::NegativeOne),
        Some(vec!["minor third tetracluster"]),
    );
    m.insert((4, 5, Sign::One), Some(vec!["major third tetracluster"]));
    m.insert(
        (4, 5, Sign::NegativeOne),
        Some(vec!["major third tetracluster"]),
    );
    m.insert((4, 6, Sign::Zero), Some(vec!["perfect fourth tetramirror"]));
    m.insert((4, 7, Sign::Zero), Some(vec!["Arabian tetramirror"]));
    m.insert((4, 8, Sign::Zero), Some(vec!["double-fourth tetramirror"]));
    m.insert((4, 9, Sign::Zero), Some(vec!["double tritone tetramirror"]));
    m.insert((4, 10, Sign::Zero), Some(vec!["minor tetramirror"]));
    m.insert((4, 11, Sign::One), Some(vec!["phrygian tetrachord"]));
    m.insert(
        (4, 11, Sign::NegativeOne),
        Some(vec!["lydian tetrachord", "major tetrachord"]),
    );
    m.insert((4, 12, Sign::One), Some(vec!["harmonic minor tetrachord"]));
    m.insert(
        (4, 12, Sign::NegativeOne),
        Some(vec!["major-third diminished tetrachord"]),
    );
    m.insert(
        (4, 13, Sign::One),
        Some(vec!["minor-second diminished tetrachord"]),
    );
    m.insert(
        (4, 13, Sign::NegativeOne),
        Some(vec!["perfect-fourth diminished tetrachord"]),
    );
    m.insert(
        (4, 14, Sign::One),
        Some(vec!["major-second minor tetrachord"]),
    );
    m.insert(
        (4, 14, Sign::NegativeOne),
        Some(vec!["perfect-fourth major tetrachord"]),
    );
    m.insert((4, 15, Sign::One), Some(vec!["all-interval tetrachord"]));
    m.insert(
        (4, 15, Sign::NegativeOne),
        Some(vec!["all-interval tetrachord"]),
    );
    m.insert(
        (4, 16, Sign::One),
        Some(vec!["minor-second quartal tetrachord"]),
    );
    m.insert(
        (4, 16, Sign::NegativeOne),
        Some(vec!["tritone quartal tetrachord"]),
    );
    m.insert((4, 17, Sign::Zero), Some(vec!["major-minor tetramirror"]));
    m.insert(
        (4, 18, Sign::One),
        Some(vec!["major-diminished tetrachord"]),
    );
    m.insert(
        (4, 18, Sign::NegativeOne),
        Some(vec!["minor-diminished tetrachord"]),
    );
    m.insert((4, 19, Sign::One), Some(vec!["minor-augmented tetrachord"]));
    m.insert(
        (4, 19, Sign::NegativeOne),
        Some(vec!["augmented major tetrachord"]),
    );
    m.insert((4, 20, Sign::Zero), Some(vec!["major seventh chord"]));
    m.insert((4, 21, Sign::Zero), Some(vec!["whole-tone tetramirror"]));
    m.insert(
        (4, 22, Sign::One),
        Some(vec!["major-second major tetrachord"]),
    );
    m.insert(
        (4, 22, Sign::NegativeOne),
        Some(vec!["perfect-fourth minor tetrachord"]),
    );
    m.insert((4, 23, Sign::Zero), Some(vec!["quartal tetramirror"]));
    m.insert((4, 24, Sign::Zero), Some(vec!["augmented seventh chord"]));
    m.insert(
        (4, 25, Sign::Zero),
        Some(vec![
            "Messiaen's truncated mode 6",
            "French augmented sixth chord",
        ]),
    );
    m.insert((4, 26, Sign::Zero), Some(vec!["minor seventh chord"]));
    m.insert(
        (4, 27, Sign::One),
        Some(vec!["half-diminished seventh chord"]),
    );
    m.insert(
        (4, 27, Sign::NegativeOne),
        Some(vec![
            "dominant seventh chord",
            "major minor seventh chord",
            "German augmented sixth chord",
            "Swiss augmented sixth chord",
        ]),
    );
    m.insert(
        (4, 28, Sign::Zero),
        Some(vec![
            "diminished seventh chord",
            "equal 4-part octave division",
        ]),
    );
    m.insert((4, 29, Sign::One), Some(vec!["all-interval tetrachord"]));
    m.insert(
        (4, 29, Sign::NegativeOne),
        Some(vec!["all-interval tetrachord"]),
    );
    m.insert((5, 1, Sign::Zero), Some(vec!["chromatic pentamirror"]));
    m.insert((5, 2, Sign::One), Some(vec!["major-second pentacluster"]));
    m.insert(
        (5, 2, Sign::NegativeOne),
        Some(vec!["major-second pentacluster"]),
    );
    m.insert(
        (5, 3, Sign::One),
        Some(vec!["minor-second major pentachord"]),
    );
    m.insert(
        (5, 3, Sign::NegativeOne),
        Some(vec!["Spanish pentacluster"]),
    );
    m.insert((5, 4, Sign::One), Some(vec!["blues pentacluster"]));
    m.insert(
        (5, 4, Sign::NegativeOne),
        Some(vec!["minor-third pentacluster"]),
    );
    m.insert((5, 5, Sign::One), Some(vec!["major-third pentacluster"]));
    m.insert(
        (5, 5, Sign::NegativeOne),
        Some(vec!["major-third pentacluster"]),
    );
    m.insert(
        (5, 6, Sign::One),
        Some(vec!["Asian pentacluster", "quasi raga Megharanji"]),
    );
    m.insert((5, 6, Sign::NegativeOne), Some(vec!["Asian pentacluster"]));
    m.insert(
        (5, 7, Sign::One),
        Some(vec!["double pentacluster", "quasi raga Nabhomani"]),
    );
    m.insert((5, 7, Sign::NegativeOne), Some(vec!["double pentacluster"]));
    m.insert(
        (5, 8, Sign::Zero),
        Some(vec!["tritone-symmetric pentamirror"]),
    );
    m.insert(
        (5, 9, Sign::One),
        Some(vec!["tritone-expanding pentachord"]),
    );
    m.insert(
        (5, 9, Sign::NegativeOne),
        Some(vec!["tritone-contracting pentachord"]),
    );
    m.insert((5, 10, Sign::One), Some(vec!["alternating pentachord"]));
    m.insert(
        (5, 10, Sign::NegativeOne),
        Some(vec!["alternating pentachord"]),
    );
    m.insert((5, 11, Sign::One), Some(vec!["center-cluster pentachord"]));
    m.insert(
        (5, 11, Sign::NegativeOne),
        Some(vec!["center-cluster pentachord"]),
    );
    m.insert((5, 12, Sign::Zero), Some(vec!["locrian pentachord"]));
    m.insert((5, 13, Sign::One), Some(vec!["augmented pentacluster"]));
    m.insert(
        (5, 13, Sign::NegativeOne),
        Some(vec!["augmented pentacluster"]),
    );
    m.insert(
        (5, 14, Sign::One),
        Some(vec!["double-seconds triple-fourth pentachord"]),
    );
    m.insert(
        (5, 14, Sign::NegativeOne),
        Some(vec!["double-seconds triple-fourth pentachord"]),
    );
    m.insert((5, 15, Sign::Zero), Some(vec!["asymmetric pentamirror"]));
    m.insert(
        (5, 16, Sign::One),
        Some(vec!["major-minor-diminished pentachord"]),
    );
    m.insert(
        (5, 16, Sign::NegativeOne),
        Some(vec!["major-minor diminished pentachord"]),
    );
    m.insert((5, 17, Sign::Zero), Some(vec!["minor-major ninth chord"]));
    m.insert((5, 18, Sign::One), Some(vec!["Roma (Gypsy) pentachord"]));
    m.insert(
        (5, 18, Sign::NegativeOne),
        Some(vec!["Roma (Gypsy) pentachord"]),
    );
    m.insert((5, 19, Sign::One), Some(vec!["Javanese pentachord"]));
    m.insert(
        (5, 19, Sign::NegativeOne),
        Some(vec!["Balinese pentachord"]),
    );
    m.insert(
        (5, 20, Sign::One),
        Some(vec![
            "Balinese Pelog pentatonic",
            "quasi raga Bhupala",
            "quasi raga Bibhas",
        ]),
    );
    m.insert(
        (5, 20, Sign::NegativeOne),
        Some(vec![
            "Hirajoshi pentatonic",
            "Iwato",
            "Sakura",
            "quasi raga Saveri",
        ]),
    );
    m.insert(
        (5, 21, Sign::One),
        Some(vec![
            "major-augmented ninth chord",
            "Syrian pentatonic",
            "quasi raga Megharanji",
        ]),
    );
    m.insert(
        (5, 21, Sign::NegativeOne),
        Some(vec!["Lebanese pentachord", "augmented-minor chord"]),
    );
    m.insert(
        (5, 22, Sign::Zero),
        Some(vec!["Persian pentamirror", "quasi raga Ramkali"]),
    );
    m.insert(
        (5, 23, Sign::One),
        Some(vec!["dorian pentachord", "minor pentachord"]),
    );
    m.insert((5, 23, Sign::NegativeOne), Some(vec!["major pentachord"]));
    m.insert((5, 24, Sign::One), Some(vec!["phrygian pentachord"]));
    m.insert((5, 24, Sign::NegativeOne), Some(vec!["lydian pentachord"]));
    m.insert(
        (5, 25, Sign::One),
        Some(vec!["diminished-major ninth chord"]),
    );
    m.insert(
        (5, 25, Sign::NegativeOne),
        Some(vec!["minor-diminished ninth chord"]),
    );
    m.insert(
        (5, 26, Sign::One),
        Some(vec!["diminished-augmented ninth chord"]),
    );
    m.insert(
        (5, 26, Sign::NegativeOne),
        Some(vec!["augmented-diminished ninth chord"]),
    );
    m.insert((5, 27, Sign::One), Some(vec!["major-ninth chord"]));
    m.insert((5, 27, Sign::NegativeOne), Some(vec!["minor-ninth chord"]));
    m.insert((5, 28, Sign::One), Some(vec!["augmented-sixth pentachord"]));
    m.insert(
        (5, 28, Sign::NegativeOne),
        Some(vec!["Javanese pentatonic", "augmented-sixth pentachord"]),
    );
    m.insert((5, 29, Sign::One), Some(vec!["Kumoi pentachord"]));
    m.insert((5, 29, Sign::NegativeOne), Some(vec!["Kumoi pentachord"]));
    m.insert((5, 30, Sign::One), Some(vec!["enigmatic pentachord"]));
    m.insert(
        (5, 30, Sign::NegativeOne),
        Some(vec!["enigmatic pentachord", "altered pentatonic"]),
    );
    m.insert(
        (5, 31, Sign::One),
        Some(vec!["diminished minor-ninth chord"]),
    );
    m.insert(
        (5, 31, Sign::NegativeOne),
        Some(vec!["flat-ninth pentachord", "quasi raga Ranjaniraga"]),
    );
    m.insert((5, 32, Sign::One), Some(vec!["Neapolitan pentachord"]));
    m.insert(
        (5, 32, Sign::NegativeOne),
        Some(vec!["Neapolitan pentachord"]),
    );
    m.insert((5, 33, Sign::Zero), Some(vec!["whole-tone pentachord"]));
    m.insert(
        (5, 34, Sign::Zero),
        Some(vec![
            "dominant-ninth",
            "major-minor",
            "Prometheus pentamirror",
            "dominant pentatonic",
        ]),
    );
    m.insert(
        (5, 35, Sign::Zero),
        Some(vec![
            "major pentatonic",
            "black-key scale",
            "blues pentatonic",
            "slendro",
            "quartal pentamirror",
        ]),
    );
    m.insert((5, 36, Sign::One), Some(vec!["major-seventh pentacluster"]));
    m.insert(
        (5, 36, Sign::NegativeOne),
        Some(vec!["minor-seventh pentacluster"]),
    );
    m.insert(
        (5, 37, Sign::Zero),
        Some(vec!["center-cluster pentamirror"]),
    );
    m.insert((5, 38, Sign::One), Some(vec!["diminished pentacluster"]));
    m.insert(
        (5, 38, Sign::NegativeOne),
        Some(vec!["diminished pentacluster"]),
    );
    m.insert(
        (6, 1, Sign::Zero),
        Some(vec![
            "A all combinatorial (P6, I11, RI5, RI11)",
            "chromatic hexamirror",
            "first-order all-combinatorial",
        ]),
    );
    m.insert((6, 2, Sign::One), Some(vec!["combinatorial I (I11)"]));
    m.insert(
        (6, 2, Sign::NegativeOne),
        Some(vec!["combinatorial I (I1)"]),
    );
    m.insert((6, 3, Sign::One), None);
    m.insert((6, 3, Sign::NegativeOne), None);
    m.insert((6, 4, Sign::Zero), Some(vec!["combinatorial RI (RI6)"]));
    m.insert((6, 5, Sign::One), Some(vec!["combinatorial I (I11)"]));
    m.insert(
        (6, 5, Sign::NegativeOne),
        Some(vec!["combinatorial I (I3)"]),
    );
    m.insert((6, 6, Sign::Zero), Some(vec!["double cluster hexamirror"]));
    m.insert(
        (6, 7, Sign::Zero),
        Some(vec![
            "B all combinatorial (P3, P9, I5, R6, R12, R8)",
            "Messiaen's mode 5",
            "second-order all combinatorial",
        ]),
    );
    m.insert(
        (6, 8, Sign::Zero),
        Some(vec!["D all combinatorial (P6, I1, RI7)"]),
    );
    m.insert((6, 9, Sign::One), Some(vec!["combinatorial I (I11)"]));
    m.insert(
        (6, 9, Sign::NegativeOne),
        Some(vec!["combinatorial I (I3)"]),
    );
    m.insert((6, 10, Sign::One), None);
    m.insert((6, 10, Sign::NegativeOne), None);
    m.insert((6, 11, Sign::One), None);
    m.insert((6, 11, Sign::NegativeOne), None);
    m.insert((6, 12, Sign::One), None);
    m.insert((6, 12, Sign::NegativeOne), None);
    m.insert(
        (6, 13, Sign::Zero),
        Some(vec!["alternating hexamirror", "combinatorial I (I7)"]),
    );
    m.insert((6, 14, Sign::One), Some(vec!["combinatorial P (P6)"]));
    m.insert(
        (6, 14, Sign::NegativeOne),
        Some(vec!["combinatorial P (P6)"]),
    );
    m.insert((6, 15, Sign::One), Some(vec!["combinatorial I (I11)"]));
    m.insert(
        (6, 15, Sign::NegativeOne),
        Some(vec!["combinatorial I (I5)"]),
    );
    m.insert((6, 16, Sign::One), Some(vec!["combinatorial I (I3)"]));
    m.insert(
        (6, 16, Sign::NegativeOne),
        Some(vec!["combinatorial I (I1)", "quasi raga Megha"]),
    );
    m.insert((6, 17, Sign::One), Some(vec!["all tri-chord hexachord"]));
    m.insert(
        (6, 17, Sign::NegativeOne),
        Some(vec!["all tri-chord hexachord (inverted form)"]),
    );
    m.insert((6, 18, Sign::One), Some(vec!["combinatorial I (I11)"]));
    m.insert(
        (6, 18, Sign::NegativeOne),
        Some(vec!["combinatorial I (I5)"]),
    );
    m.insert((6, 19, Sign::One), None);
    m.insert((6, 19, Sign::NegativeOne), None);
    m.insert(
        (6, 20, Sign::Zero),
        Some(vec![
            "E all combinatorial (P2, P6, P10, I3, I7, R4, R8, RI1, RI5, RI9)",
            "Messiaen's truncated mode 3",
            "Genus tertium",
            "third-order all combinatorial",
        ]),
    );
    m.insert((6, 21, Sign::One), Some(vec!["combinatorial I (I1)"]));
    m.insert(
        (6, 21, Sign::NegativeOne),
        Some(vec!["combinatorial I (I3)"]),
    );
    m.insert((6, 22, Sign::One), Some(vec!["combinatorial I (I11)"]));
    m.insert(
        (6, 22, Sign::NegativeOne),
        Some(vec!["combinatorial I (I5)"]),
    );
    m.insert(
        (6, 23, Sign::Zero),
        Some(vec!["combinatorial RI (RI8)", "super-locrian hexamirror"]),
    );
    m.insert((6, 24, Sign::One), None);
    m.insert(
        (6, 24, Sign::NegativeOne),
        Some(vec!["melodic-minor hexachord"]),
    );
    m.insert((6, 25, Sign::One), Some(vec!["locrian hexachord"]));
    m.insert((6, 25, Sign::NegativeOne), Some(vec!["minor hexachord"]));
    m.insert(
        (6, 26, Sign::Zero),
        Some(vec!["phrygian hexamirror", "combinatorial RI (RI8)"]),
    );
    m.insert((6, 27, Sign::One), Some(vec!["combinatorial I (I11)"]));
    m.insert(
        (6, 27, Sign::NegativeOne),
        Some(vec!["combinatorial I (I1)", "pyramid hexachord"]),
    );
    m.insert(
        (6, 28, Sign::Zero),
        Some(vec!["double-phrygian hexachord", "combinatorial RI (RI6)"]),
    );
    m.insert((6, 29, Sign::Zero), Some(vec!["combinatorial RI (RI9)"]));
    m.insert(
        (6, 30, Sign::One),
        Some(vec![
            "Messiaen's truncated mode 2",
            "minor-bitonal hexachord",
            "combinatorial R (R6)",
            "combinatorial I (I1, I7)",
        ]),
    );
    m.insert(
        (6, 30, Sign::NegativeOne),
        Some(vec![
            "Stravinsky's Petrushka-chord",
            "Messiaen's truncated mode 2",
            "major-bitonal hexachord",
            "combinatorial R (R6)",
            "combinatorial I (I1, I7)",
        ]),
    );
    m.insert((6, 31, Sign::One), Some(vec!["combinatorial I (I7)"]));
    m.insert(
        (6, 31, Sign::NegativeOne),
        Some(vec!["combinatorial I (I11)"]),
    );
    m.insert(
        (6, 32, Sign::Zero),
        Some(vec![
            "Guidonian hexachord",
            "C all combinatorial (P6, I3, RI9)",
            "major hexamirror",
            "quartal hexamirror",
            "first-order all combinatorial",
        ]),
    );
    m.insert(
        (6, 33, Sign::One),
        Some(vec!["dorian hexachord", "combinatorial I (I6)"]),
    );
    m.insert(
        (6, 33, Sign::NegativeOne),
        Some(vec![
            "dominant-eleventh",
            "lydian hexachord",
            "combinatorial I (I1)",
        ]),
    );
    m.insert(
        (6, 34, Sign::One),
        Some(vec![
            "Scriabin's Mystic-chord",
            "Prometheus hexachord",
            "combinatorial I (I11)",
        ]),
    );
    m.insert(
        (6, 34, Sign::NegativeOne),
        Some(vec![
            "augmented-eleventh",
            "harmonic hexachord",
            "combinatorial I (I7)",
        ]),
    );
    m.insert((6, 35, Sign::Zero), Some(vec!["whole tone scale", "6 equal part division", "F all-combinatorial (P1, P3, P5, P7, P9, P11, I1, I3, I5, I7, I9, I11, R2, R4, R6, R8, R10, RI2, RI4, RI6, RI8, RI10)", "Messiaen's mode 1", "sixth-order all combinatorial"]));
    m.insert((6, 36, Sign::One), None);
    m.insert((6, 36, Sign::NegativeOne), None);
    m.insert((6, 37, Sign::Zero), Some(vec!["combinatorial RI (RI4)"]));
    m.insert((6, 38, Sign::Zero), Some(vec!["combinatorial RI (RI3)"]));
    m.insert((6, 39, Sign::One), None);
    m.insert((6, 39, Sign::NegativeOne), None);
    m.insert((6, 40, Sign::One), None);
    m.insert((6, 40, Sign::NegativeOne), None);
    m.insert((6, 41, Sign::One), None);
    m.insert((6, 41, Sign::NegativeOne), None);
    m.insert((6, 42, Sign::Zero), Some(vec!["combinatorial RI (RI3)"]));
    m.insert(
        (6, 43, Sign::One),
        Some(vec!["complement of all tri-chord hexachord"]),
    );
    m.insert(
        (6, 43, Sign::NegativeOne),
        Some(vec![
            "complement of all-tri-chord hexachord (inverted form)",
        ]),
    );
    m.insert(
        (6, 44, Sign::One),
        Some(vec!["Schoenberg Anagram hexachord"]),
    );
    m.insert((6, 44, Sign::NegativeOne), Some(vec!["quasi raga Bauli"]));
    m.insert((6, 45, Sign::Zero), Some(vec!["combinatorial RI (RI6)"]));
    m.insert((6, 46, Sign::One), None);
    m.insert((6, 46, Sign::NegativeOne), None);
    m.insert((6, 47, Sign::One), None);
    m.insert((6, 47, Sign::NegativeOne), Some(vec!["blues scale"]));
    m.insert((6, 48, Sign::Zero), Some(vec!["combinatorial RI (RI2)"]));
    m.insert(
        (6, 49, Sign::Zero),
        Some(vec!["combinatorial RI (RI4)", "Prometheus Neapolitan mode"]),
    );
    m.insert((6, 50, Sign::Zero), Some(vec!["combinatorial RI (RI1)"]));
    m.insert((7, 1, Sign::Zero), Some(vec!["chromatic heptamirror"]));
    m.insert((7, 2, Sign::One), None);
    m.insert((7, 2, Sign::NegativeOne), None);
    m.insert((7, 3, Sign::One), None);
    m.insert((7, 3, Sign::NegativeOne), None);
    m.insert((7, 4, Sign::One), None);
    m.insert((7, 4, Sign::NegativeOne), None);
    m.insert((7, 5, Sign::One), None);
    m.insert((7, 5, Sign::NegativeOne), None);
    m.insert((7, 6, Sign::One), None);
    m.insert((7, 6, Sign::NegativeOne), None);
    m.insert((7, 7, Sign::One), None);
    m.insert((7, 7, Sign::NegativeOne), None);
    m.insert((7, 8, Sign::Zero), None);
    m.insert((7, 9, Sign::One), None);
    m.insert((7, 9, Sign::NegativeOne), None);
    m.insert((7, 10, Sign::One), None);
    m.insert((7, 10, Sign::NegativeOne), None);
    m.insert((7, 11, Sign::One), None);
    m.insert((7, 11, Sign::NegativeOne), None);
    m.insert((7, 12, Sign::Zero), None);
    m.insert((7, 13, Sign::One), None);
    m.insert((7, 13, Sign::NegativeOne), None);
    m.insert((7, 14, Sign::One), None);
    m.insert((7, 14, Sign::NegativeOne), None);
    m.insert((7, 15, Sign::Zero), None);
    m.insert((7, 16, Sign::One), Some(vec!["Debussy's heptatonic"]));
    m.insert((7, 16, Sign::NegativeOne), None);
    m.insert((7, 17, Sign::Zero), None);
    m.insert((7, 18, Sign::One), None);
    m.insert((7, 18, Sign::NegativeOne), None);
    m.insert((7, 19, Sign::One), None);
    m.insert((7, 19, Sign::NegativeOne), None);
    m.insert((7, 20, Sign::One), Some(vec!["chromatic phrygian inverse"]));
    m.insert(
        (7, 20, Sign::NegativeOne),
        Some(vec![
            "Greek chromatic",
            "chromatic mixolydian",
            "chromatic dorian",
            "quasi raga Pantuvarali",
            "mela Kanakangi",
        ]),
    );
    m.insert((7, 21, Sign::One), None);
    m.insert(
        (7, 21, Sign::NegativeOne),
        Some(vec!["Roma (Gypsy) hepatonic"]),
    );
    m.insert(
        (7, 22, Sign::Zero),
        Some(vec![
            "double harmonic scale",
            "major Roma (Gypsy)",
            "Hungarian minor",
            "double harmonic scale",
            "quasi raga Mayamdavagaula",
        ]),
    );
    m.insert((7, 23, Sign::One), None);
    m.insert(
        (7, 23, Sign::NegativeOne),
        Some(vec!["tritone major heptachord"]),
    );
    m.insert((7, 24, Sign::One), None);
    m.insert(
        (7, 24, Sign::NegativeOne),
        Some(vec!["mystic heptachord", "Enigmatic heptatonic"]),
    );
    m.insert((7, 25, Sign::One), None);
    m.insert((7, 25, Sign::NegativeOne), None);
    m.insert((7, 26, Sign::One), None);
    m.insert((7, 26, Sign::NegativeOne), None);
    m.insert((7, 27, Sign::One), None);
    m.insert((7, 27, Sign::NegativeOne), Some(vec!["modified blues"]));
    m.insert((7, 28, Sign::One), None);
    m.insert((7, 28, Sign::NegativeOne), None);
    m.insert((7, 29, Sign::One), None);
    m.insert((7, 29, Sign::NegativeOne), None);
    m.insert((7, 30, Sign::One), Some(vec!["Neapolitan-minor mode"]));
    m.insert((7, 30, Sign::NegativeOne), None);
    m.insert(
        (7, 31, Sign::One),
        Some(vec!["alternating heptachord", "Hungarian major mode"]),
    );
    m.insert(
        (7, 31, Sign::NegativeOne),
        Some(vec!["diminished scale", "alternating heptachord"]),
    );
    m.insert(
        (7, 32, Sign::One),
        Some(vec![
            "harmonic minor scale",
            "harmonic minor collection",
            "Spanish Roma (Gypsy)",
            "mela Kiravani",
        ]),
    );
    m.insert(
        (7, 32, Sign::NegativeOne),
        Some(vec![
            "harmonic major scale (inverted)",
            "harmonic minor collection (inverted)",
            "mela Cakravana",
            "quasi raga Ahir Bhairav",
        ]),
    );
    m.insert(
        (7, 33, Sign::Zero),
        Some(vec!["Neapolitan-major mode", "leading-whole-tone mode"]),
    );
    m.insert(
        (7, 34, Sign::Zero),
        Some(vec![
            "melodic minor ascending scale",
            "jazz minor",
            "augmented thirteenth heptamirror",
            "harmonic/super-locrian",
        ]),
    );
    m.insert(
        (7, 35, Sign::Zero),
        Some(vec![
            "major scale",
            "major diatonic heptachord",
            "natural minor scale",
            "dominant thirteenth",
            "locrian",
            "phrygian",
            "major inverse",
        ]),
    );
    m.insert((7, 36, Sign::One), None);
    m.insert((7, 36, Sign::NegativeOne), None);
    m.insert((7, 37, Sign::Zero), None);
    m.insert((7, 38, Sign::One), None);
    m.insert((7, 38, Sign::NegativeOne), None);
    m.insert((8, 1, Sign::Zero), Some(vec!["chromatic octamirror"]));
    m.insert((8, 2, Sign::One), None);
    m.insert((8, 2, Sign::NegativeOne), None);
    m.insert((8, 3, Sign::Zero), None);
    m.insert((8, 4, Sign::One), None);
    m.insert((8, 4, Sign::NegativeOne), None);
    m.insert((8, 5, Sign::One), None);
    m.insert((8, 5, Sign::NegativeOne), None);
    m.insert((8, 6, Sign::Zero), None);
    m.insert((8, 7, Sign::Zero), None);
    m.insert((8, 8, Sign::Zero), None);
    m.insert((8, 9, Sign::Zero), Some(vec!["Messiaen's mode 4"]));
    m.insert((8, 10, Sign::Zero), None);
    m.insert((8, 11, Sign::One), None);
    m.insert((8, 11, Sign::NegativeOne), Some(vec!["blues octatonic"]));
    m.insert((8, 12, Sign::One), None);
    m.insert((8, 12, Sign::NegativeOne), None);
    m.insert((8, 13, Sign::One), Some(vec!["blues octatonic"]));
    m.insert((8, 13, Sign::NegativeOne), None);
    m.insert((8, 14, Sign::One), None);
    m.insert((8, 14, Sign::NegativeOne), None);
    m.insert((8, 15, Sign::One), None);
    m.insert((8, 15, Sign::NegativeOne), None);
    m.insert((8, 16, Sign::One), None);
    m.insert(
        (8, 16, Sign::NegativeOne),
        Some(vec!["enigmatic octachord"]),
    );
    m.insert((8, 17, Sign::Zero), None);
    m.insert((8, 18, Sign::One), None);
    m.insert((8, 18, Sign::NegativeOne), None);
    m.insert((8, 19, Sign::One), None);
    m.insert((8, 19, Sign::NegativeOne), None);
    m.insert((8, 20, Sign::Zero), None);
    m.insert((8, 21, Sign::Zero), None);
    m.insert((8, 22, Sign::One), None);
    m.insert(
        (8, 22, Sign::NegativeOne),
        Some(vec!["Spanish octatonic scale"]),
    );
    m.insert(
        (8, 23, Sign::Zero),
        Some(vec!["Greek", "quartal octachord", "diatonic octad"]),
    );
    m.insert((8, 24, Sign::Zero), None);
    m.insert((8, 25, Sign::Zero), Some(vec!["Messiaen's mode 6"]));
    m.insert((8, 26, Sign::Zero), Some(vec!["Spanish phrygian", "blues"]));
    m.insert((8, 27, Sign::One), None);
    m.insert((8, 27, Sign::NegativeOne), None);
    m.insert(
        (8, 28, Sign::Zero),
        Some(vec![
            "octatonic scale",
            "Messiaen's mode 2",
            "alternating octatonic scale",
            "diminished scale",
        ]),
    );
    m.insert((8, 29, Sign::One), None);
    m.insert((8, 29, Sign::NegativeOne), None);
    m.insert((9, 1, Sign::Zero), Some(vec!["chromatic nonamirror"]));
    m.insert((9, 2, Sign::One), None);
    m.insert((9, 2, Sign::NegativeOne), None);
    m.insert((9, 3, Sign::One), None);
    m.insert((9, 3, Sign::NegativeOne), None);
    m.insert((9, 4, Sign::One), None);
    m.insert((9, 4, Sign::NegativeOne), None);
    m.insert((9, 5, Sign::One), None);
    m.insert((9, 5, Sign::NegativeOne), None);
    m.insert((9, 6, Sign::Zero), None);
    m.insert((9, 7, Sign::One), Some(vec!["nonatonic blues"]));
    m.insert((9, 7, Sign::NegativeOne), None);
    m.insert((9, 8, Sign::One), None);
    m.insert((9, 8, Sign::NegativeOne), None);
    m.insert((9, 9, Sign::Zero), None);
    m.insert((9, 10, Sign::Zero), None);
    m.insert((9, 11, Sign::One), None);
    m.insert(
        (9, 11, Sign::NegativeOne),
        Some(vec!["diminishing nonachord"]),
    );
    m.insert(
        (9, 12, Sign::Zero),
        Some(vec!["Messiaen's mode 3", "Tsjerepnin"]),
    );
    m.insert((10, 1, Sign::Zero), Some(vec!["chromatic decamirror"]));
    m.insert((10, 2, Sign::Zero), None);
    m.insert((10, 3, Sign::Zero), None);
    m.insert((10, 4, Sign::Zero), None);
    m.insert((10, 5, Sign::Zero), Some(vec!["major-minor mixed"]));
    m.insert((10, 6, Sign::Zero), Some(vec!["Messiaen's mode 7"]));
    m.insert((11, 1, Sign::Zero), Some(vec!["chromatic undecamirror"]));
    m.insert(
        (12, 1, Sign::Zero),
        Some(vec![
            "aggregate",
            "dodecachord",
            "twelve-tone chromatic",
            "chromatic scale",
            "dodecamirror",
        ]),
    );
    m
});

pub(super) static MAXIMUM_INDEX_NUMBER_WITHOUT_INVERSION_EQUIVALENCE:
    MaximumIndexNumberWithoutInversionEquivalence =
    LazyLock::new(|| vec![1, 1, 6, 19, 43, 66, 80, 66, 43, 19, 6, 1, 1]);

pub(super) static MAXIMUM_INDEX_NUMBER_WITH_INVERSION_EQUIVALENCE:
    MaximumIndexNumberWithInversionEquivalence =
    LazyLock::new(|| vec![1, 1, 6, 12, 29, 38, 50, 38, 29, 12, 6, 1, 1]);
